---
published: true
title: 
Abstracting Failure-Inducing Inputs
layout: post
comments: true
tags: ddset, cfg, deltadebug
categories: post
---

# Abstracting Failure-Inducing Inputs

This is a complete worked out example of the algorithm given in the paper.

We start by importing the prerequisites.


<div class="input_area" markdown="1">

```python
from enum import Enum
import copy
```

</div>

## Expression Example

### Predicate

First, we define a way to capture the status of an input. There can be four outcomes when an input is executed:

* Success (failure condition reproduced)
* Failed (failure condition not reproduced)
* Invalid (Did not reach failure condition -- possibly semantically invalid)
* Timeout (equivalent to Failed)


<div class="input_area" markdown="1">

```python
class PRes(str, Enum):
    success = 'SUCCESS'
    failed = 'FAILED'
    invalid = 'INVALID'
    timeout = 'TIMEOUT'
```

</div>

Next, we define our predicate. It is a simple test for doubled parenthesis such as `((..))`


<div class="input_area" markdown="1">

```python
import re
```

</div>


<div class="input_area" markdown="1">

```python
def expr_double_paren(inp):
    if re.match(r'.*[(][(].*[)][)].*', inp):
        return PRes.success
    return PRes.failed
```

</div>


<div class="input_area" markdown="1">

```python
my_predicate = expr_double_paren
```

</div>

We also define an input.


<div class="input_area" markdown="1">

```python
expr_input =  '1 + ((2 * 3 / 4))'
```

</div>


<div class="input_area" markdown="1">

```python
my_input = expr_input
```

</div>

We verify that we can reproduce the failing condition correctly.


<div class="input_area" markdown="1">

```python
assert my_predicate(my_input) == PRes.success
```

</div>


<div class="input_area" markdown="1">

```python
assert my_predicate('(1+2)') == PRes.failed
```

</div>

### Grammar

A context-free grammar is represented as a Python dict, with each nonterminal symbol forming a key, and each nonterminal _defined_ by a list of expansion rules. For example, the expression grammar for parsing arithmetic expressions is given below.


<div class="input_area" markdown="1">

```python
EXPR_GRAMMAR = {'<start>': [['<expr>']],
 '<expr>': [['<term>', ' + ', '<expr>'],
  ['<term>', ' - ', '<expr>'],
  ['<term>']],
 '<term>': [['<factor>', ' * ', '<term>'],
  ['<factor>', ' / ', '<term>'],
  ['<factor>']],
 '<factor>': [['+', '<factor>'],
  ['-', '<factor>'],
  ['(', '<expr>', ')'],
  ['<integer>', '.', '<integer>'],
  ['<integer>']],
 '<integer>': [['<digit>', '<integer>'], ['<digit>']],
 '<digit>': [['0'], ['1'], ['2'], ['3'], ['4'], ['5'], ['6'], ['7'], ['8'], ['9']]}
```

</div>


<div class="input_area" markdown="1">

```python
EXPR_G = {'[start]': '<start>', '[grammar]': EXPR_GRAMMAR}
```

</div>

Note the convention we used: Each nonterminal is enclosed in angle brackets. E.g. `<expr>`. We now define a function that can distinguish terminal symbols from nonterminals.

The `is_nt()` function checks if the given node is a terminal or not.


<div class="input_area" markdown="1">

```python
def is_nt(symbol):
     return symbol and (symbol[0], symbol[-1]) == ('<', '>')
```

</div>

#### The parser

Given the grammar, and an input, we can parse it into a derivation tree.
The `Parser` below is from [fuzzingbook.org](https://www.fuzzingbook.org/html/Parser.html), and provides a generic context-free parser. This is present in the `src` directory.


<div class="input_area" markdown="1">

```python
from Parser import EarleyParser as Parser
```

</div>

How do we check that our parse succeeded? We can convert the derivation tree back to the original string and check for equality.

The `tree_to_string()` function converts a derivation tree to its original string.


<div class="input_area" markdown="1">

```python
def tree_to_string(tree, wrap=lambda ntree, depth, name, string: string, depth=0):
    name, children, *rest = tree
    if not is_nt(name):
        return name
    else:
        return wrap(tree, depth, name, ''.join([tree_to_string(c, wrap, depth-1) for c in children]))
```

</div>


<div class="input_area" markdown="1">

```python
expr_parser = Parser(EXPR_GRAMMAR, start_symbol='<start>', canonical=True)
parsed_expr = list(expr_parser.parse(my_input))[0]
tree_to_string(parsed_expr)
```

</div>




{:.output_data_text}
```
'1 + ((2 * 3 / 4))'
```



#### Graphical trees

While converting to strings are easy, it is unsatisfying. We want to make our output look pretty, and inspect the tree structure of the parsed tree. So we define graphical tree display (code from the Fuzzingbook)


<div class="input_area" markdown="1">

```python
from graphviz import Digraph
```

</div>


<div class="input_area" markdown="1">

```python
from IPython.display import display, Image
```

</div>


<div class="input_area" markdown="1">

```python
def zoom(v, zoom=True):
    # return v directly if you do not want to zoom out.
    if zoom:
        return Image(v.render(format='png'))
    return v
```

</div>


<div class="input_area" markdown="1">

```python
def extract_node(node, id):
    symbol, children, *annotation = node
    return symbol, children, ''.join(str(a) for a in annotation)
def node_attr(dot, nid, symbol, ann): dot.node(repr(nid), symbol)
def edge_attr(dot, start_node, stop_node): dot.edge(repr(start_node), repr(stop_node))
def graph_attr(dot): dot.attr('node', shape='plain')
def display_tree(derivation_tree):
    counter = 0
    def traverse_tree(dot, tree, id=0):
        (symbol, children, annotation) = extract_node(tree, id)
        node_attr(dot, id, symbol, annotation)
        if children:
            for child in children:
                nonlocal counter
                counter += 1
                child_id = counter
                edge_attr(dot, id, child_id)
                traverse_tree(dot, child, child_id)
    dot = Digraph(comment="Derivation Tree")
    graph_attr(dot)
    traverse_tree(dot, derivation_tree)
    return dot
```

</div>

We are now ready to display the tree structure.


<div class="input_area" markdown="1">

```python
zoom(display_tree(parsed_expr))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_36_0.png)



## Reduction

We are now ready to define our delta debugging reduction phase. We use the **Perses** algorithm. The algorithm is as follows: We start the root, and recursively go down the child nodes. For each node, we check if that node can be replaced by a subtree with the same nonterminal, and still reproduce the failure, and find the smallest such tree (length determined by number of leaves).

Since this procedure can result in multiple trees, the tree to work on is chosen based on a priority queue where the priority is given to the smallest tree.

The particular node chosen to replace the current node is determined based first on its number of leaf nodes, and then on its rank in a priority queue, where the priority is determined by the depth of the subtree from the current node. That is, a child gets priority over a grand child.

We first have to define a way to address a specific node.


<div class="input_area" markdown="1">

```python
t = parsed_expr[1][0][1][2][1][0]
zoom(display_tree(t))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_39_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(t)
```

</div>




{:.output_data_text}
```
'((2 * 3 / 4))'
```



For the path, we simply use a list of numbers indicating the child node. For example, in the above, the path would be `[0, 2, 0]`

Given a path, `get_child()` will simply return the node at the path.


<div class="input_area" markdown="1">

```python
def get_child(tree, path):
    if not path: return tree
    cur, *path = path
    return get_child(tree[1][cur], path)
```

</div>


<div class="input_area" markdown="1">

```python
te = get_child(parsed_expr, [0, 2, 0])
zoom(display_tree(te))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_44_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(te)
```

</div>




{:.output_data_text}
```
'((2 * 3 / 4))'
```



We also need a way to replace one node with another. This is done by `replace_path()`.


<div class="input_area" markdown="1">

```python
def replace_path(tree, path, new_node=None):
    if new_node is None: new_node = []
    if not path: return copy.deepcopy(new_node)
    cur, *path = path
    name, children, *rest = tree
    new_children = []
    for i,c in enumerate(children):
        if i == cur:
            nc = replace_path(c, path, new_node)
        else:
            nc = c
        if nc:
            new_children.append(nc)
    return (name, new_children, *rest)
```

</div>


<div class="input_area" markdown="1">

```python
t = parsed_expr[1][0][1][2][1][0]
zoom(display_tree(t))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_48_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(t)
```

</div>




{:.output_data_text}
```
'((2 * 3 / 4))'
```




<div class="input_area" markdown="1">

```python
te = replace_path(parsed_expr, [0, 2, 0], [])
zoom(display_tree(te))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_50_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(te)
```

</div>




{:.output_data_text}
```
'1 + '
```




<div class="input_area" markdown="1">

```python
tn = replace_path(parsed_expr, [0, 2, 0], ('x',[]))
zoom(display_tree(tn))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_52_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(tn)
```

</div>




{:.output_data_text}
```
'1 + x'
```



### Priority queue

For perses reduction, one needs a way to count the number of leaf nodes to determine the priority of a node. This is done by `count_leaves()`


<div class="input_area" markdown="1">

```python
import heapq
```

</div>


<div class="input_area" markdown="1">

```python
def count_leaves(node):
    name, children, *_ = node
    if not children:
        return 1
    return sum(count_leaves(i) for i in children)
```

</div>


<div class="input_area" markdown="1">

```python
count_leaves(parsed_expr)
```

</div>




{:.output_data_text}
```
11
```




<div class="input_area" markdown="1">

```python
count_leaves(te)
```

</div>




{:.output_data_text}
```
3
```



We also define a helper that simply counts the internal nodes.


<div class="input_area" markdown="1">

```python
def count_nodes(node):
    name, children, *_ = node
    if not children:
        return 0
    return sum(count_nodes(i) for i in children) + 1
```

</div>


<div class="input_area" markdown="1">

```python
count_nodes(parsed_expr)
```

</div>




{:.output_data_text}
```
25
```



Next, we need to maintain a priority queue of the `[(tree, path)]`. The essential idea is to prioritize the items first by the number of leaves in  the full tree (that is, the smallest tree that we have currently gets priority), then next by the number of leaves in the node pointed to by path, and finally, tie break by the insertion order (`ecount`).


<div class="input_area" markdown="1">

```python
ecount = 0
```

</div>


<div class="input_area" markdown="1">

```python
def add_to_pq(tup, q):
    global ecount
    dtree, F_path = tup
    stree = get_child(dtree, F_path)
    n =  count_leaves(dtree)
    m =  count_leaves(stree)
    # heap smallest first
    heapq.heappush(q, (n, m, -ecount, tup))
    ecount += 1
```

</div>

We define another helper function `nt_group()` that groups all nonterminals that have the same name. These are used to determine the nodes that can be used to replace one node.


<div class="input_area" markdown="1">

```python
def nt_group(tree, all_nodes=None):
    if all_nodes is None: all_nodes = {}
    name, children, *_ = tree
    if not is_nt(name): return
    all_nodes.setdefault(name, []).append(tree)
    for c in children:
        nt_group(c, all_nodes)
    return all_nodes
```

</div>


<div class="input_area" markdown="1">

```python
gp = nt_group(te)
for key in gp:
    print(key)
    for node in gp[key]:
        print(tree_to_string(node))
```

</div>

{:.output_stream}
```
<start>
1 + 
<expr>
1 + 

<term>
1
<factor>
1
<integer>
1
<digit>
1

```

What are the compatible nodes? These are all the nodes that have the same nonterminal name, and is a descendent of the current node. Further, if the nonterminal allows empty node, then this is the first in the list. This is defined by `compatible_nodes()`


<div class="input_area" markdown="1">

```python
def compatible_nodes(tree, grammar):
    key, children, *_ = tree
    # Here is the first choice. Do we restrict ourselves to only children of the tree
    # or do we allow all nodes in the original tree? given in all_nodes?
    lst = nt_group(tree)
    node_lst = [(i, n) for i,n in enumerate(lst[key])]

    # insert empty if the grammar allows it as the first element
    if [] in grammar[key]: node_lst.insert(0, (-1, (key, [])))
    return node_lst
```

</div>


<div class="input_area" markdown="1">

```python
get_child(te, [0])
```

</div>




{:.output_data_text}
```
('<expr>',
 [('<term>', [('<factor>', [('<integer>', [('<digit>', [('1', [])])])])]),
  (' + ', []),
  ('<expr>', [])])
```




<div class="input_area" markdown="1">

```python
compatible_nodes(get_child(te, [0]), EXPR_GRAMMAR)
```

</div>




{:.output_data_text}
```
[(0,
  ('<expr>',
   [('<term>', [('<factor>', [('<integer>', [('<digit>', [('1', [])])])])]),
    (' + ', []),
    ('<expr>', [])])),
 (1, ('<expr>', []))]
```



Some programming languages have `tokens` which are first level lexical elements. The parser is often defined using the lexer tokens. We do not want to try to reduce tokens further. So we define a way to identify them (we have to keep in mind when we produce grammars).


<div class="input_area" markdown="1">

```python
def is_token(val):
    assert val != '<>'
    assert (val[0], val[-1]) == ('<', '>')
    if val[1].isupper(): return True
    #if val[1] == '_': return val[2].isupper() # token derived.
    return False
```

</div>

### Perses reduction

We finally define the reduction algorithm. The implementation of __Perses__ is given in `reduction()`. The essential idea is as follows:

1. We have a priority queue of (tree, path_to_node) structures, where node is a node within the tree.
 * The highest priority is given to the smallest tree.
 * With in the nodes in the same tree, priority is given to nodes with smallest number of leaves
 * In case of tie break, the shallowest subnode gets the highest priority (i.e child has higher priority over grand child, and empty node has the highest priority since it is a peer of the current node).
2. We pick each nodes, and find compatible subnodes that reproduce the failure.
3. Each compatible node and the corresponding tree is put back into the priority queue.
4. If no child nodes were found that could replace the current node, then we add each children with the current tree into the priority queue. (If we had to recurse into the child nodes, then the next tree that will get picked will be a different tree.)


<div class="input_area" markdown="1">

```python
def reduction(tree, grammar, predicate):
    first_tuple = (tree, [])
    p_q = []
    add_to_pq(first_tuple, p_q)

    ostr = tree_to_string(tree)
    assert predicate(ostr) == PRes.success
    failed_set = {ostr: True}

    min_tree, min_tree_size = tree, count_leaves(tree)
    while p_q:
        # extract the tuple
        _n, _m, _ec, (dtree, F_path) = heapq.heappop(p_q)
        stree = get_child(dtree, F_path)
        skey, schildren = stree
        found = False
        # we now want to replace stree with alternate nodes.
        for i, node in compatible_nodes(stree, grammar):
            # replace with current (copy).
            ctree = replace_path(dtree, F_path, node)
            if ctree is None: continue # same node
            v = tree_to_string(ctree)
            if v in failed_set: continue
            failed_set[v] = predicate(v) # we ignore PRes.invalid results
            if failed_set[v] == PRes.success:
                found = True
                ctree_size = count_leaves(ctree)
                if ctree_size < min_tree_size: min_tree, min_tree_size = ctree, ctree_size

                if v not in failed_set:
                    print(v)
                t = (ctree, F_path)
                assert get_child(ctree, F_path) is not None
                add_to_pq(t, p_q)

        # The CHOICE here is that we explore the children if and only if we fail
        # to find a node that can replace the current
        if found: continue
        if is_token(skey): continue # do not follow children TOKEN optimization
        for i, child in enumerate(schildren):
            if not is_nt(child[0]): continue
            assert get_child(tree=dtree, path=F_path + [i]) is not None
            t = (dtree, F_path + [i])
            add_to_pq(t, p_q)
    return min_tree
```

</div>


<div class="input_area" markdown="1">

```python
er = reduction(parsed_expr, EXPR_GRAMMAR, my_predicate)
zoom(display_tree(er))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_77_0.png)




<div class="input_area" markdown="1">

```python
tree_to_string(er)
```

</div>




{:.output_data_text}
```
'((4))'
```



## A Fuzzer

In order to define abstraction, we need to be able to generate values based on a grammar. Our fuzzer is able to do that.


<div class="input_area" markdown="1">

```python
import random
```

</div>

### The interface


<div class="input_area" markdown="1">

```python
class Fuzzer:
    def __init__(self, grammar):
        self.grammar = grammar

    def fuzz(self, key='<start>', max_num=None, max_depth=None):
        raise NotImplemented()
```

</div>

### The implementation

The fuzzer tries to randomly choose an expansion when more than one expansion is available. If however, it goes beyond max_depth, then it chooses the cheapest nodes. The cheapest nodes are those nodes with minimum further expansion (no recursion).


<div class="input_area" markdown="1">

```python
class LimitFuzzer(Fuzzer):
    def symbol_cost(self, grammar, symbol, seen):
        if symbol in self.key_cost: return self.key_cost[symbol]
        if symbol in seen:
            self.key_cost[symbol] = float('inf')
            return float('inf')
        v = min((self.expansion_cost(grammar, rule, seen | {symbol})
                    for rule in grammar.get(symbol, [])), default=0)
        self.key_cost[symbol] = v
        return v

    def expansion_cost(self, grammar, tokens, seen):
        return max((self.symbol_cost(grammar, token, seen)
                    for token in tokens if token in grammar), default=0) + 1

    def gen_key(self, key, depth, max_depth):
        if key not in self.grammar: return key
        if depth > max_depth:
            assert key in self.cost
            clst = sorted([(self.cost[key][str(rule)], rule) for rule in self.grammar[key]])
            rules = [r for c,r in clst if c == clst[0][0]]
        else:
            rules = self.grammar[key]
        return self.gen_rule(random.choice(rules), depth+1, max_depth)

    def gen_rule(self, rule, depth, max_depth):
        return ''.join(self.gen_key(token, depth, max_depth) for token in rule)

    def fuzz(self, key='<start>', max_depth=10):
        return self.gen_key(key=key, depth=0, max_depth=max_depth)

    def __init__(self, grammar):
        super().__init__(grammar)
        self.key_cost = {}
        self.cost = self.compute_cost(grammar)

    def compute_cost(self, grammar):
        cost = {}
        for k in grammar:
            cost[k] = {}
            for rule in grammar[k]:
                cost[k][str(rule)] = self.expansion_cost(grammar, rule, set())
        return cost
```

</div>


<div class="input_area" markdown="1">

```python
expr_fuzzer = LimitFuzzer(EXPR_GRAMMAR)
expr_fuzzer.fuzz()
```

</div>




{:.output_data_text}
```
'-5.2 / 1628'
```



## Abstraction

We can now start to define abstraction.

### Mark the abstract nodes

Give a list of paths that were verified as abstract, we go through each, and mark them abstract in the same tree.


<div class="input_area" markdown="1">

```python
def mark_verified_abstract_path(tree, path):
    name, children = get_child(tree, path)
    new_tree = replace_path(tree, path, (name, children, {'abstract': True}))
    return new_tree
```

</div>


<div class="input_area" markdown="1">

```python
mark_verified_abstract_path(te, [0])
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>', [('<factor>', [('<integer>', [('<digit>', [('1', [])])])])]),
    (' + ', []),
    ('<expr>', [])],
   {'abstract': True})])
```




<div class="input_area" markdown="1">

```python
def mark_verified_abstract(tree, verified_paths):
    for path in verified_paths:
        tree = mark_verified_abstract_path(tree, path)
    return tree
```

</div>


<div class="input_area" markdown="1">

```python
at = mark_verified_abstract(te, ([0,0], [0,2])); at
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>',
     [('<factor>', [('<integer>', [('<digit>', [('1', [])])])])],
     {'abstract': True}),
    (' + ', []),
    ('<expr>', [], {'abstract': True})])])
```



A method to mark everything else as concrete.


<div class="input_area" markdown="1">

```python
def mark_concrete(tree):
    name, children, *abstract_a = tree
    abstract = {'abstract': False} if not abstract_a else abstract_a[0]
    return (name, [mark_concrete(c) for c in children], abstract)
```

</div>


<div class="input_area" markdown="1">

```python
t = mark_concrete(at); t
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>',
     [('<factor>',
       [('<integer>',
         [('<digit>', [('1', [], {'abstract': False})], {'abstract': False})],
         {'abstract': False})],
       {'abstract': False})],
     {'abstract': True}),
    (' + ', [], {'abstract': False}),
    ('<expr>', [], {'abstract': True})],
   {'abstract': False})],
 {'abstract': False})
```



A way to display the abstracted tree


<div class="input_area" markdown="1">

```python
def till_abstract(node):
    name, children, *rest = node
    if rest[-1]['abstract']:
        return (name + '*', [])
    return (name, [till_abstract(c) for c in children], *rest)
```

</div>


<div class="input_area" markdown="1">

```python
zoom(display_tree(till_abstract(t)))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_100_0.png)



Next, we define a method that given a list of paths, will replace each of these nodes with random values.


<div class="input_area" markdown="1">

```python
def replace_arr_with_random_values(npath_arr, grammar, tree):
    if not npath_arr: return tree
    npath, *npath_arr = npath_arr
    node = get_child(tree, npath)
    gf = LimitFuzzer(grammar)
    e = gf.fuzz(key=node[0])
    ntree = replace_path(tree, npath, [node[0], [(e, [])]])
    assert ntree is not None
    return replace_arr_with_random_values(npath_arr, grammar, ntree)
```

</div>


<div class="input_area" markdown="1">

```python
rt = replace_arr_with_random_values([[0, 0], [0, 2]], EXPR_GRAMMAR, t); rt
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [['<term>',
     [('(3037 / 27.11 - 20.394 * +(4.7 * 1.7 / 3 + 7.0 + 4.2 + 5) / 1.4 / 61) / (--8831) * 882 / 4 * 2 / (69.71 + 0 / 4.9 * 6.7) * -7.3 * +--5.2 * ++6.6',
       [])]],
    (' + ', [], {'abstract': False}),
    ['<expr>',
     [('85.46 * 0 * (-(2.0 + 2.3 - 1) / 575.6 / -(8) / +6 - 3 - +(0) * +5 + -4 * 4.9 * 1.8 + 4.9 - 4.4 + 9.5)',
       [])]]],
   {'abstract': False})],
 {'abstract': False})
```




<div class="input_area" markdown="1">

```python
zoom(display_tree(rt))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_104_0.png)



A wrapper for the `replace_arr_with_random_values()`


<div class="input_area" markdown="1">

```python
def generate(dtree, grammar, paths):
    res = replace_arr_with_random_values([p[0] for p in paths], grammar, dtree)
    return tree_to_string(res)
```

</div>

### Check if we can generalize a node

We now define `can_generalize()`. This function takes a current path, the derivation tree, the grammar, predicate and a list of unverified paths the maximum number of checks (`max_checks`), and produces `max_checks` number of inputs where every node in unverified and the current node in `tval` is replaced with random values. This is then checked to see if the resulting input reproduces the failure. This way, we can verify that `tval` can be generalized even when other abstract nodes are replaced with random values.


<div class="input_area" markdown="1">

```python
MAX_CHECKS=100
MAX_LIMIT=1000
FIND_COUNTER_EXAMPLE=True
MIN_EXAMPLES=1
```

</div>


<div class="input_area" markdown="1">

```python
def can_generalize(tval, dtree, grammar, predicate, unverified, max_checks):
    checks = 0
    limit = 0
    abstract = True
    rstr = None
    checks = set()
    while len(checks) < max_checks:
        limit += 1
        if limit >= MAX_LIMIT:
            # giveup.
            if FIND_COUNTER_EXAMPLE:
                if len(checks) > MIN_EXAMPLES:
                    abstract = True
                else:
                    abstract = False
            else:
                abstract = False
            path, status = tval
            node = get_child(dtree, path)
            print('warn: giving up', node[0], 'after', MAX_LIMIT,
                    'and no counterexample found.'
                    'with', len(checks),
                    'valid values abstract:', abstract)
            break
        rstr = generate(dtree, grammar, [tval] + unverified)
        pres = predicate(rstr)
        if pres == PRes.failed:
            abstract = False
            break
        else:
            if pres == PRes.success:
                checks.add(rstr)
            else:
                continue
    return abstract
```

</div>


<div class="input_area" markdown="1">

```python

```

</div>


<div class="input_area" markdown="1">

```python
first_expr = [0]
display_tree(get_child(er, first_expr))
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_112_0.svg)




<div class="input_area" markdown="1">

```python
second_expr = [0,0,0,1]
display_tree(get_child(er, second_expr))
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_113_0.svg)




<div class="input_area" markdown="1">

```python
third_expr = [0,0,0,1,0,0,1]
display_tree(get_child(er, third_expr))
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_114_0.svg)




<div class="input_area" markdown="1">

```python
class St(Enum):
    unchecked = 1
    unverified = -1
    verified = 0
```

</div>


<div class="input_area" markdown="1">

```python
can_generalize((second_expr, St.unchecked), er, EXPR_GRAMMAR, my_predicate, [], 100)
```

</div>




{:.output_data_text}
```
False
```




<div class="input_area" markdown="1">

```python
can_generalize((third_expr, St.unchecked), er, EXPR_GRAMMAR, my_predicate, [], 100)
```

</div>




{:.output_data_text}
```
True
```



The `abstraction()` uses `can_generalize()` to check whether each node can be abstracted. The main job of `abstraction()` is to recurse into the child nodes when a previously abstract node is marked as concrete.


<div class="input_area" markdown="1">

```python
SKIP_IS_SPECIAL=True
SKIP_IS_CONCRETE = True
LOG=True
LOOK_DEEPER_IN_ISOLATED=True
```

</div>


<div class="input_area" markdown="1">

```python
check_counter = 0
```

</div>


<div class="input_area" markdown="1">

```python
def abstraction(tval, dtree, grammar, predicate, unverified, max_checks):
    global check_counter, KEY
    path, status = tval
    node = get_child(dtree, path)
    KEY = "%s:(%s) %s" % (node[0], tree_to_string(node), status)
    if LOG:
        print(check_counter, 'check:', node[0], status)
        check_counter += 1
    key, children, *rest = node
    if not children: return []
    if not is_nt(key): return []

    if key == '<_SKIP>' and SKIP_IS_SPECIAL:
        if SKIP_IS_CONCRETE: return []
        if status == St.unchecked:
            print('abstract: unverified', node[0])
            return [(path, St.unverified)]
        else:
            print('abstract: verified', node[0])
            return [(path, St.verified)]

    abstract = can_generalize(tval, dtree, grammar, predicate, unverified, max_checks)
    if abstract:
        if status == St.unchecked:
            print('abstract: unverified', node[0])
            return [(path, St.unverified)]
        else:
            print('abstract: verified', node[0])
            return [(path, St.verified)]
    else:
        if status == St.unverified:
            print('NOT ABSTRACT:', KEY)

        if is_token(key): return []
        paths = []
        # what should we do when an unverified node is found not abstract?
        # do we look at the child nodes? It can be costly, because now we
        # are also dealing with random values in other nodes marked general.
        if status == St.unchecked or LOOK_DEEPER_IN_ISOLATED:
            for i,child in enumerate(children):
                if not is_nt(child[0]): continue
                tval = (path + [i], St.unchecked)
                p = abstraction(tval, dtree, grammar, predicate, unverified, max_checks)
                paths.extend(p)
        return paths
```

</div>


<div class="input_area" markdown="1">

```python
ab = abstraction((first_expr, St.unchecked), er, EXPR_GRAMMAR, my_predicate, [], 100); ab
```

</div>

{:.output_stream}
```
0 check: <expr> St.unchecked
1 check: <term> St.unchecked
2 check: <factor> St.unchecked
3 check: <expr> St.unchecked
4 check: <term> St.unchecked
5 check: <factor> St.unchecked
6 check: <expr> St.unchecked
abstract: unverified <expr>

```




{:.output_data_text}
```
[([0, 0, 0, 1, 0, 0, 1], <St.unverified: -1>)]
```




<div class="input_area" markdown="1">

```python
display_tree(get_child(er, ab[0][0]))
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_123_0.svg)



### Isolation

To isolate independent causes,  We first collect all nodes that can be independently generalized, and then check whether they are still generalizable even when other abstract marked nodes are replaced with random values.


<div class="input_area" markdown="1">

```python
gen_counter = 0
```

</div>


<div class="input_area" markdown="1">

```python
def isolation(tree, grammar, predicate, max_checks):
    def _path(v): return ','.join([str(i) for i in v[0]])
    def is_child(a, b):
        return len(a[0]) > len(b[0]) and _path(a).startswith(_path(b)) # a is child of b

    global gen_counter
    unverified = [([], St.unchecked)]
    verified = []
    original = []
    while unverified:
        v = unverified.pop(0)
        if LOG:
            node = get_child(tree, v[0])
            print(gen_counter, 'isolation:', node[0], v[1])
            gen_counter += 1
        _original = list(original)
        original.append(v)
        # problem here is, some of the original may be parent of some of the unverified
        # so, we want to avoid those unverified if they are already part of original
 
        # so we next remove any from original that is parent of current v
        _original = [o for o in _original if not is_child(v, o)]

        # remove from _original that is parent of any of itself.
        _original = [x for x in _original if not [o for o in _original if is_child(x, o)]]

        # next we remove from unverified any that is child of any in _original
        _unverified = list(unverified)
        _unverified = [u for u in _unverified if not [o for o in _original if is_child(u, o)]]
        print('O paths:')
        for p in (_original):
            node = get_child(tree, p[0])
            print("o>\t", p, "%s<%s>" % (node[0], repr(tree_to_string(node))))
        print()
        print('U paths:')
        for p in (_unverified):
            node = get_child(tree, p[0])
            print("u>\t", p, "%s<%s>" % (node[0], repr(tree_to_string(node))))
        print()
        
        newpaths = abstraction(v, tree, grammar, predicate, sorted(_unverified + _original), max_checks)
        print('current paths:')
        for p in newpaths:
            node = get_child(tree, p[0])
            print(">\t", p, "%s<%s>" % (node[0], repr(tree_to_string(node))))
        print()

        for p in newpaths:
            if p[1] == St.verified:
                verified.append(p)
            elif p[1] == St.unverified:
                unverified.append(p)
            else:
                assert false
    print('abstract paths:', len(verified))
    new_tree = mark_verified_abstract(tree, [p[0] for p in verified])
    # now change everything else to False
    return mark_concrete(new_tree)
```

</div>


<div class="input_area" markdown="1">

```python

```

</div>


<div class="input_area" markdown="1">

```python
nt = replace_path(parsed_expr, [0, 0], get_child(er, [0, 0])); display_tree(nt)
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_129_0.svg)




<div class="input_area" markdown="1">

```python
tree_to_string(nt)
```

</div>




{:.output_data_text}
```
'((4)) + ((2 * 3 / 4))'
```




<div class="input_area" markdown="1">

```python
nt
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>',
     [('<factor>',
       [('(', []),
        ('<expr>',
         [('<term>',
           [('<factor>',
             [('(', []),
              ('<expr>',
               [('<term>',
                 [('<factor>',
                   [('<integer>', [('<digit>', [('4', [])])])])])]),
              (')', [])])])]),
        (')', [])])]),
    (' + ', []),
    ('<expr>',
     [('<term>',
       [('<factor>',
         [('(', []),
          ('<expr>',
           [('<term>',
             [('<factor>',
               [('(', []),
                ('<expr>',
                 [('<term>',
                   [('<factor>', [('<integer>', [('<digit>', [('2', [])])])]),
                    (' * ', []),
                    ('<term>',
                     [('<factor>',
                       [('<integer>', [('<digit>', [('3', [])])])]),
                      (' / ', []),
                      ('<term>',
                       [('<factor>',
                         [('<integer>', [('<digit>', [('4', [])])])])])])])]),
                (')', [])])])]),
          (')', [])])])])])])
```




<div class="input_area" markdown="1">

```python
ist = isolation(nt, EXPR_GRAMMAR, my_predicate, 100); ist
```

</div>

{:.output_stream}
```
0 isolation: <start> St.unchecked
O paths:

U paths:

7 check: <start> St.unchecked
8 check: <expr> St.unchecked
9 check: <term> St.unchecked
abstract: unverified <term>
10 check: <expr> St.unchecked
abstract: unverified <expr>
current paths:
>	 ([0, 0], <St.unverified: -1>) <term><'((4))'>
>	 ([0, 2], <St.unverified: -1>) <expr><'((2 * 3 / 4))'>

1 isolation: <term> St.unverified
O paths:

U paths:
u>	 ([0, 2], <St.unverified: -1>) <expr><'((2 * 3 / 4))'>

11 check: <term> St.unverified
NOT ABSTRACT: <term>:(((4))) St.unverified
12 check: <factor> St.unchecked
13 check: <expr> St.unchecked
14 check: <term> St.unchecked
15 check: <factor> St.unchecked
16 check: <expr> St.unchecked
abstract: unverified <expr>
current paths:
>	 ([0, 0, 0, 1, 0, 0, 1], <St.unverified: -1>) <expr><'4'>

2 isolation: <expr> St.unverified
O paths:
o>	 ([0, 0], <St.unverified: -1>) <term><'((4))'>

U paths:

17 check: <expr> St.unverified
NOT ABSTRACT: <expr>:(((2 * 3 / 4))) St.unverified
18 check: <term> St.unchecked
19 check: <factor> St.unchecked
20 check: <expr> St.unchecked
21 check: <term> St.unchecked
22 check: <factor> St.unchecked
23 check: <expr> St.unchecked
abstract: unverified <expr>
current paths:
>	 ([0, 2, 0, 0, 1, 0, 0, 1], <St.unverified: -1>) <expr><'2 * 3 / 4'>

3 isolation: <expr> St.unverified
O paths:
o>	 ([0, 2], <St.unverified: -1>) <expr><'((2 * 3 / 4))'>

U paths:

24 check: <expr> St.unverified
abstract: verified <expr>
current paths:
>	 ([0, 0, 0, 1, 0, 0, 1], <St.verified: 0>) <expr><'4'>

4 isolation: <expr> St.unverified
O paths:
o>	 ([0, 0], <St.unverified: -1>) <term><'((4))'>

U paths:

25 check: <expr> St.unverified
abstract: verified <expr>
current paths:
>	 ([0, 2, 0, 0, 1, 0, 0, 1], <St.verified: 0>) <expr><'2 * 3 / 4'>

abstract paths: 2

```




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>',
     [('<factor>',
       [('(', [], {'abstract': False}),
        ('<expr>',
         [('<term>',
           [('<factor>',
             [('(', [], {'abstract': False}),
              ('<expr>',
               [('<term>',
                 [('<factor>',
                   [('<integer>',
                     [('<digit>',
                       [('4', [], {'abstract': False})],
                       {'abstract': False})],
                     {'abstract': False})],
                   {'abstract': False})],
                 {'abstract': False})],
               {'abstract': True}),
              (')', [], {'abstract': False})],
             {'abstract': False})],
           {'abstract': False})],
         {'abstract': False}),
        (')', [], {'abstract': False})],
       {'abstract': False})],
     {'abstract': False}),
    (' + ', [], {'abstract': False}),
    ('<expr>',
     [('<term>',
       [('<factor>',
         [('(', [], {'abstract': False}),
          ('<expr>',
           [('<term>',
             [('<factor>',
               [('(', [], {'abstract': False}),
                ('<expr>',
                 [('<term>',
                   [('<factor>',
                     [('<integer>',
                       [('<digit>',
                         [('2', [], {'abstract': False})],
                         {'abstract': False})],
                       {'abstract': False})],
                     {'abstract': False}),
                    (' * ', [], {'abstract': False}),
                    ('<term>',
                     [('<factor>',
                       [('<integer>',
                         [('<digit>',
                           [('3', [], {'abstract': False})],
                           {'abstract': False})],
                         {'abstract': False})],
                       {'abstract': False}),
                      (' / ', [], {'abstract': False}),
                      ('<term>',
                       [('<factor>',
                         [('<integer>',
                           [('<digit>',
                             [('4', [], {'abstract': False})],
                             {'abstract': False})],
                           {'abstract': False})],
                         {'abstract': False})],
                       {'abstract': False})],
                     {'abstract': False})],
                   {'abstract': False})],
                 {'abstract': True}),
                (')', [], {'abstract': False})],
               {'abstract': False})],
             {'abstract': False})],
           {'abstract': False}),
          (')', [], {'abstract': False})],
         {'abstract': False})],
       {'abstract': False})],
     {'abstract': False})],
   {'abstract': False})],
 {'abstract': False})
```




<div class="input_area" markdown="1">

```python
display_tree(till_abstract(ist))
```

</div>




![svg](/resources/posts/2020-07-15-ddset/DDSet_133_0.svg)



### Context Sensitivity

In finding similar nodes, we have to give first preference
to the paths with maximum *amount* of common elements that can
be identified on a string in terms of character count. No
similarity analysis should be allowed on the nodes where a
previous analysis detected similarity

The essential idea here is to first find _concrete_ nodes, and
check their string representation one at a time with other concrete
nodes.


<div class="input_area" markdown="1">

```python
def e_g(abstract_a):
    if not abstract_a:
        return True
    else:
        return abstract_a[0]['abstract']
```

</div>


<div class="input_area" markdown="1">

```python
def identify_concrete_paths_to_nt(gtree, path=None):
    if path is None: path = []
    name, children, *_general = gtree
    general = e_g(_general)

    # we dont care about general non terminals
    if general and is_nt(name): return []
    # we dont care about terminals either
    if not is_nt(name): return []
    if name == '<_SKIP>': return []

    my_paths = [path]
    # for tokens we do not care about things below
    if is_token(name): return my_paths

    for i, c in enumerate(children):
        ps = identify_concrete_paths_to_nt(c, path + [i])
        my_paths.extend(ps)
    return my_paths
```

</div>


<div class="input_area" markdown="1">

```python
nts = identify_concrete_paths_to_nt(ist); nts
```

</div>




{:.output_data_text}
```
[[],
 [0],
 [0, 0],
 [0, 0, 0],
 [0, 0, 0, 1],
 [0, 0, 0, 1, 0],
 [0, 0, 0, 1, 0, 0],
 [0, 2],
 [0, 2, 0],
 [0, 2, 0, 0],
 [0, 2, 0, 0, 1],
 [0, 2, 0, 0, 1, 0],
 [0, 2, 0, 0, 1, 0, 0]]
```




<div class="input_area" markdown="1">

```python
for nt in nts:
    print(nt, "          ", tree_to_string(get_child(ist, nt)))
```

</div>

{:.output_stream}
```
[]            ((4)) + ((2 * 3 / 4))
[0]            ((4)) + ((2 * 3 / 4))
[0, 0]            ((4))
[0, 0, 0]            ((4))
[0, 0, 0, 1]            (4)
[0, 0, 0, 1, 0]            (4)
[0, 0, 0, 1, 0, 0]            (4)
[0, 2]            ((2 * 3 / 4))
[0, 2, 0]            ((2 * 3 / 4))
[0, 2, 0, 0]            ((2 * 3 / 4))
[0, 2, 0, 0, 1]            (2 * 3 / 4)
[0, 2, 0, 0, 1, 0]            (2 * 3 / 4)
[0, 2, 0, 0, 1, 0, 0]            (2 * 3 / 4)

```

Next, we need to find out of these nodes, which are similar


<div class="input_area" markdown="1">

```python
def find_similar_nodes(gtree, cpaths, log=False):
    strings = {}
    for path in cpaths:
        n = get_child(gtree, path)
        s = tree_to_string(n)
        if not len(s): continue
        key = (n[0], s)
        strings.setdefault(key, []).append(path)
    if log:
        for k in strings:
            print(k)
            for q in strings[k]:
                print("  ", q)
    return {s:strings[s] for s in strings if len(strings[s]) > 1}
```

</div>


<div class="input_area" markdown="1">

```python
find_similar_nodes(ist, nts, log=True)
```

</div>

{:.output_stream}
```
('<start>', '((4)) + ((2 * 3 / 4))')
   []
('<expr>', '((4)) + ((2 * 3 / 4))')
   [0]
('<term>', '((4))')
   [0, 0]
('<factor>', '((4))')
   [0, 0, 0]
('<expr>', '(4)')
   [0, 0, 0, 1]
('<term>', '(4)')
   [0, 0, 0, 1, 0]
('<factor>', '(4)')
   [0, 0, 0, 1, 0, 0]
('<expr>', '((2 * 3 / 4))')
   [0, 2]
('<term>', '((2 * 3 / 4))')
   [0, 2, 0]
('<factor>', '((2 * 3 / 4))')
   [0, 2, 0, 0]
('<expr>', '(2 * 3 / 4)')
   [0, 2, 0, 0, 1]
('<term>', '(2 * 3 / 4)')
   [0, 2, 0, 0, 1, 0]
('<factor>', '(2 * 3 / 4)')
   [0, 2, 0, 0, 1, 0, 0]

```




{:.output_data_text}
```
{}
```



How do we verify that two keys are abstractable but context sensitive? generate random values for them, and replace it in all instances, and verify that the faults can be reproduced.


<div class="input_area" markdown="1">

```python
def are_these_similar(tkey, paths, grammar, gtree, predicate, max_checks=100):
    name, string = tkey
    if len(paths) < 2: return False
    gf = LimitFuzzer(grammar)
    nchecks = 0
    seen = set()
    global KEY
    KEY = 'similar: ' + name
    for i in range(max_checks):
        v = gf.fuzz(key=name)
        if v in seen: continue
        seen.add(v)
        # now replace it in all paths
        ctree = gtree
        for p in paths:
            ctree = replace_path(ctree, p, (name, [(v, [])]))
        res = tree_to_string(ctree)
        pr = predicate(res)
        if pr == PRes.failed:
            print(repr(v), repr(res))
            return False
        elif pr == PRes.success:
            continue
        elif pr == PRes.invalid  or pr == PRes.timeout:
            nchecks += 1

    if len(seen) <= 1: # a single
        return False

    # there has been at least one successful replacement
    return nchecks < max_checks
```

</div>

The `markup_paths` simply rename the context sensitive nodes with a `$` prefix. Since there can be multiple context sensitive nodes with the same nonterminal, but separate usages, we also append a number to them.


<div class="input_area" markdown="1">

```python
nsym = 0
```

</div>


<div class="input_area" markdown="1">

```python
def markup_paths(tkey, paths, gtree):
    global nsym
    nsym += 1
    name, string = tkey
    newname = '<$%s_%d>' % (name[1:-1], nsym)
    for p in paths:
        cname, children, gen = get_child(gtree, p)
        assert name == cname
        # now it is generalizable!
        gtree = replace_path(gtree, p, (newname, children, {'sensitive': True, 'abstract': True})) 
    return gtree
```

</div>


<div class="input_area" markdown="1">

```python
def identify_similarities(grammar, predicate, generalized_tree, max_checks=100):
    cpaths = identify_concrete_paths_to_nt(generalized_tree)
    similar_nodes = find_similar_nodes(generalized_tree, cpaths)

    for key in similar_nodes:
        res = are_these_similar(key, similar_nodes[key], grammar, generalized_tree, predicate, max_checks)
        if res and len(similar_nodes[key]) > 1:
            generalized_tree = markup_paths(key, similar_nodes[key], generalized_tree)
        print('Similar?', key, res)
    # from_paths_identify_similar
    # for each similar verify if they can be fuzzed together.
    return generalized_tree
```

</div>

Finally we need to define the string representation of the tree. This is done by `general_str()`


<div class="input_area" markdown="1">

```python
def general_str(tree):
    name, children, *general_ = tree
    if not is_nt(name): return name
    v = tree_to_string(tree)
    if not v.strip(): return v
    general = e_g(general_)
    if general:
        if is_nt(name):
            if name == '<>': return v
            return name
        else:
            assert not children
            return name
    res = []
    for c in children:
        x = general_str(c)
        res.append(x)
    return ''.join(res)
```

</div>

### All Together


<div class="input_area" markdown="1">

```python
def get_abstraction(grammar_, my_input, predicate, max_checks=100):
    start = grammar_.get('[start]', '<start>')
    grammar = grammar_['[grammar]']
    assert start in grammar
    assert predicate(my_input) == PRes.success
    d_tree, *_ = Parser(grammar, start_symbol=start, canonical=True).parse(my_input)
    min_tree = reduction(d_tree, grammar, predicate)
    min_s = tree_to_string(min_tree)

    dd_tree_ =  isolation(min_tree, grammar, predicate, max_checks)
    dd_tree = identify_similarities(grammar, predicate, dd_tree_, max_checks)
    s = general_str(dd_tree)
    return min_s, s, dd_tree
```

</div>


<div class="input_area" markdown="1">

```python
min_s, s, dd_tree = get_abstraction(EXPR_G, my_input, my_predicate)
```

</div>

{:.output_stream}
```
5 isolation: <start> St.unchecked
O paths:

U paths:

26 check: <start> St.unchecked
27 check: <expr> St.unchecked
28 check: <term> St.unchecked
29 check: <factor> St.unchecked
30 check: <expr> St.unchecked
31 check: <term> St.unchecked
32 check: <factor> St.unchecked
33 check: <expr> St.unchecked
abstract: unverified <expr>
current paths:
>	 ([0, 0, 0, 1, 0, 0, 1], <St.unverified: -1>) <expr><'4'>

6 isolation: <expr> St.unverified
O paths:

U paths:

34 check: <expr> St.unverified
abstract: verified <expr>
current paths:
>	 ([0, 0, 0, 1, 0, 0, 1], <St.verified: 0>) <expr><'4'>

abstract paths: 1

```

The extracted minimal tree:


<div class="input_area" markdown="1">

```python
min_s
```

</div>




{:.output_data_text}
```
'((4))'
```



The abstract input


<div class="input_area" markdown="1">

```python
s
```

</div>




{:.output_data_text}
```
'((<expr>))'
```



The tree


<div class="input_area" markdown="1">

```python
dd_tree
```

</div>




{:.output_data_text}
```
('<start>',
 [('<expr>',
   [('<term>',
     [('<factor>',
       [('(', [], {'abstract': False}),
        ('<expr>',
         [('<term>',
           [('<factor>',
             [('(', [], {'abstract': False}),
              ('<expr>',
               [('<term>',
                 [('<factor>',
                   [('<integer>',
                     [('<digit>',
                       [('4', [], {'abstract': False})],
                       {'abstract': False})],
                     {'abstract': False})],
                   {'abstract': False})],
                 {'abstract': False})],
               {'abstract': True}),
              (')', [], {'abstract': False})],
             {'abstract': False})],
           {'abstract': False})],
         {'abstract': False}),
        (')', [], {'abstract': False})],
       {'abstract': False})],
     {'abstract': False})],
   {'abstract': False})],
 {'abstract': False})
```




<div class="input_area" markdown="1">

```python
assert general_str(dd_tree) == '((<expr>))'
```

</div>

### Fuzzing


<div class="input_area" markdown="1">

```python
zoom(display_tree(till_abstract(dd_tree)))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_162_0.png)




<div class="input_area" markdown="1">

```python

```

</div>


<div class="input_area" markdown="1">

```python
def find_covarying_paths(tree, path):
    name, children, *general_ = tree
    general = e_g(general_)
    v = tree_to_string(tree).strip()
    if name.startswith('<$'):
        v = name[2:-1]
        i = v.rindex('_')
        oname = "<%s>" % v[:i]
        if oname:
            return [(oname, name, path)]
        else:
            return []
    if not is_nt(name): return []
    if is_token(name): return []
    if general: return []
    paths = []
    for i,c in enumerate(children):
        p = find_covarying_paths(c, path + [i])
        paths.extend(p)
    return paths
```

</div>


<div class="input_area" markdown="1">

```python
def find_abstract_paths(tree, path):
    name, children, *general_ = tree
    general = e_g(general_)
    if not is_nt(name): return []
    if general: return [path]
    #if A.is_token(name): return []
    paths = []
    for i,c in enumerate(children):
        p = find_abstract_paths(c, path + [i])
        paths.extend(p)
    return paths
```

</div>


<div class="input_area" markdown="1">

```python
def fuzz_tree(mgrammar, tree):
    start = mgrammar['[start]']
    grammar = mgrammar['[grammar]']
    paths = find_abstract_paths(tree, [])
    cpaths = find_covarying_paths(tree, [])
    if len(paths + cpaths) == 0: return 'No abstract paths'
    print('# abstract paths', len(paths + cpaths))
    gf = LimitFuzzer(grammar)
    results = []
    for i in range(MAX_LIMIT):
        abs_path_ = random.choice(paths + cpaths)
        if isinstance(abs_path_, tuple):
            name, fname, abs_path = abs_path_
            #node = A.get_child(tree, abs_path)
            #_, children, *rest = node
            all_paths = [p for n,f,p in cpaths if f == fname]
            e = gf.fuzz(key=name)
            ntree = tree
            for p in all_paths:
                ntree = replace_path(ntree, p, (name, [(e, [])]))
            results.append(tree_to_string(ntree))
        else:
            abs_path = abs_path_
            node = get_child(tree, abs_path)
            name, children, *rest = node
            e = gf.fuzz(key=name)
            res = replace_path(tree, abs_path, (name, [(e, [])]))
            results.append(tree_to_string(res))
    return list(set(results))
```

</div>


<div class="input_area" markdown="1">

```python
fuzz_tree(EXPR_G, dd_tree)
```

</div>

{:.output_stream}
```
# abstract paths 1

```




{:.output_data_text}
```
['((+-8.9 * 57 * (01.7 * 404.602) * 5.9 / 9 * (-2.1 * 7.3) * -1.31 / (1.9) * -5.1 / 9 * 8.8 + 530.44 / (-(1 / 6.8) / (4 + 7.2 - 1.4) * ++8 * 4.3 * 6.7 / 6.0) / 1605 + (3677 / (0 * 7 + 3 + 3) * (0 + 8.5) / 5 / 6.1 + 4 * (1 + 6.4) - 18.6 + +0.5 - 1 * 9.9 - 5.3) + ((8.1 / 7 + 7 - 0.8) / (7.1 + 1)) / 71.107 / +6.6 - 30877 * 2 / (2.2 / 1.2) / -6 * 3 - 6 / 26.8 / +8.7))',
 '((+9 + 0.375))',
 '((-6.238 / 01044.0))',
 '((6.02 * -811 / +(-11.03 * ++2 / 2 + 33.92 * -1) * 61 * +((1)) * +(8) * 5 - 55047 - 6 / --((0.0) * 9.3 / 1.3) * +19.6 * 5 - -14))',
 '((977.8 * (++++0.5 / 924.68 * 036) * -(31.69 / 9.7 / 3.4 * 7.2 + (4.1 - 2.0) * (3.4) * 3.6 / 1 + 9 - 1 + 4 + 2.1) - -(-9 / 9 / +4.2 / +7.7 * 0 * 5.4 - 4 - 78 * 9 + +4 * 8.5 / 8.4 + 8.0 / 0.2 - 7 + 9.1) - (---+3) / 4 * +3))',
 '(((+9.96 * +-844 / +(5 / 7 - 2) - +2) * 5866 * 41446.47 - 230.68548 * (2544.4 - 549.42) / -5 * 4.6 / 41 / 2 + +-+(-9.3 / 3.9 / 4 - 1.9 + 1) / -+-+(2 - 9) / 5.91 / 8052 - -(91.75 + +4 * 0.3 - 5) * (++9 + 2 / 5.5 * 7.4 + 4) / 2 + -360 * 28.945 + ((3.1) + 4.0) - -94.45))',
 '((4275 / 7 + 77.159))',
 '((-18 * ++66.2 * +9))',
 '((1))',
 '((5.739 / 9 * +(+-1.7 / 4 / 9 / 7.2) / 00))',
 '((+-7.63 - +(9.3 / +-(1.1) + 032.7 / -+3 / (2.5) * 6) / --7544.6 * (904) / 1 / +5 * ++9 * 20 / +7.5 - 2 * +(-+9) * 816 * 4457 * 152 / 19 * -5 * 1 / 5.5))',
 '((86.1 * 0 + -+545.4 - +--(2 / 0 * 7)))',
 '((+(558 / ((8) * 8 / 2 + 1 / 6) - -(3.6 * 9 - 1.2 + 9.2) + 385 + --7 - 4.6 - 3.5 - 1 - 5) * -(2148) / 364 + 236.0 * 43.0 / 7.553 / +(-0 * 8.4 * 3.2 + 5 / 9) * 6668 * (9 / 5.0) + +(-75.9) / (9.5) * 78 * ((9.5)) + +3 + ++(0 - 5.0) * 1 * -+5.4 / -2.6 / 7 * 6.4 / 6.0 - 3 / -+6.9 + (3 - 1.3) / 38.1 * -3 * 1 / 5 - 1.3 / (2) / 2.5 / 4.9))',
 '((6 - --+(76.8 * 4 / 2.6 * 7 - 1.2 / 8 - 3.7 / 7.3) - (9.71 / +0.6 / +7.0 / +1 / 7 - +6.8 / -+3.0 * +4.0 * 9.3 / 1) * +-++23 * +(-5.0 / 2.3 / 3.0 - 8.8 / 0.0) * 2714 * 55.4 * 5.9 / 9.6 - (+1) + +((5.4)) / +-+-8.4 * (5 / 0.8 - 9) / -(6) + (9 / 1)))',
 '(((-+43 / +++--7 - (3 + 2 * 4.4) / (3.7 / 4.5 * 4 - 9.3 * 9 - 7 - 5) * (4 + 3 + 9.4) * (5) / -5.4) - 45647 + 24.9 * +(3 + (0)) / +2.3 - +((7 - 4) - 6.3 / 4 - 4) + 1 / +318.0 * ++0.6 + 35 + 53.7 + 73.4 + 8 * 2.5 - 4.4 / 6 - 7.8))',
 '((6.36 / 00233 * +6.990 * -++14 * -4742 * -2 / (3.8 / 2.0 + 8 + 4.3) / 9 / -7.5 + 1 * (06.6 / +69.95 - +(3 - 5.7) * +-0.1 * -6.3 / 7 * 1 + (0 - 5.6) * +1.4 / 2 / 0) + 6 * 06.8 * 2.5 / 31 / (4 + 0.9) - (+-8 * 2.84 / +6.2 / 7.4 * 2.8) * +77.8 * 69 / (8 / 7 - 2 - 8) + -9589.76 / +-(3) * 3.7 * -+3 * 0.6))',
 '(((083.9 * (+(0.5) * 3 / 4 / 7.6 + +0.5 / 6.5 + 6.5 - 3.2) + 392 / 91) * 15.51419 / +(7 - (8.0 + 7) * 5 * 7 / 1 + 6.0 * 6) - (66.6 - -536) * ++-02.32 * 920.377468))',
 '((+0 / -(-(6.1)) / 36.769 / 7))',
 '((-5 * +(--89.15 * 1.1 + 604.09 * -0 / 6 + --4 / 5.2 / 4.9 * 9 + -4 * 5.7 * 6.8 + 3.1 / 8 + 0 - 3) / +39402 / (466 * 06 * (1) * 1.7 * 3) * (-+9) / (9 / 0.3 * 0) / 03 * 3 * +4.8 * 1 / 9.6))',
 '((--81 + (2.08 + (4.3 * 1.3 - 9 + 3.5 + 6) / 26 * 10) - -6.6 / -+(-5 / 1 / 7 + 4.6 / 1) / 36))',
 '((+3 / 347656.632 / ++(7.3 + (7) + 5 / 7 - 2 + 3) - 9.8644928 * (-0 * +++8.0 - -4.9 * 86 / +0 * 9.1) / +8 - +-09.9 * -((5 + 7.7) / 2 - 3.8 * 6.0 / 4.9) * +60.5 / 9 / (6 / 4 - 7.5 + 9) * (6 - 3.3) / 7.3 - (19 / 4 / -8.2 * 0 * 6.7 - ++8 - -9.8 / 5.1 + 2.3) * --(1.0)))',
 '((1 / 57.96 * -+9350))',
 '(((93.0 / -4 + +8124.6 * 1 / 75.01 * 05 * +4.8 * 6 + -488.35 / -++6.5 * +(3) * 8 / 9.2 * 3.7) - +(((6.1) / 7.3 / 8.0 - 8 * 1 - 0.4 - 9) * 3.9 * --4.8) * 70.4))',
 '((+(++6 - 49.5 + +(4.8) / -2.1 * 1.0)))',
 '((8 * (6.09277 / 40 - (-2 - 1.0 * 3 - 7) / 1.13 - 6.3 * 94 / +8.4 * 5.4 / 0.3 + (2 - 7.6) / (1.7) / 5 / 7 - (2) / 4 - 3 / 4 - 7.7 + 1.5) + 239.4 * +--+1.408 * -(2 - 7 * 5.8 / 3 - 4.9 * 6 + 5.8 + 5.0) / --3 * (+5.2 + 0 * 5 + 0 - 8) - 019 * +(--9 - +0.7 / 4.9 / 3 + 9 + 7) * 2.8 / 6 / 951 * 82 + 45372 + (-9 + 6.2 / 4.0 + 7.8 / 0 + 7.8) / -376 - -(4 * 5)))',
 '((+39 / 4.3 - ++8.4 / (3336.8 / (2 * 4) * (0) + (8) - --8.5 / (6.8) * 8 * 5.6 - 7.6 * 2 - 2.6 * 6 + 2.0 - 5)))',
 '((((+(2 - 6.9) / 0 * -2 * 7 * 3.8) + (--5 / (9) / 0 - +7.4 / 3.8 * 6 + 5 / 4 + 0.3 + 5.5) * (4.6 * 9.7 / 6.9) + 63 * 143.6 - -2 * +(2.5) + 5.9 - +0 / 5.8 + 0 / 2 - 4 + 7.9)))',
 '((+(-(-4 / 9.5 / 6.2) + +(7 * 5.2 - 0.3 - 9) - 10) / (0418.293 / 82.8 * -(1.6 + 2) * 17) - 17066 + +8 * +2 / 5 * 2371 * 3))',
 '((+8 * -(-(7 / 5) / (8.9 / 4) * (1.5 - 9.7) + (7.8 * 6 + 0) * 5 * 9.2 / 1 * 6 + -3.8 / -8.8 + (8.3) / 8 - 0 + 9.0 - 8.5) - 768 / -30.92825 / 8))',
 '((--(9327.9228 / -05) / 01.20 * 5 - +313 / ++3 / -1.328 / (-(7.0)) - +--(7.9)))',
 '((-+(+951.7 * (8.4 / 8 + 2.1 + 8) + +1 * 2 + 31) / +8.9 * 9 * 8 + -+387))',
 '((57 / 9 - ---(+3 * 4.9 * 3 * 1.1 + (0.0) * 3 / 2 - 0.3 * 1 + 4.3 - 3.6) + +(1.02 / +-4.5 / 1.2 * 7 - (1 - 7.5)) * (-(1.6 - 7)) / 254 * 7.63 * 07 / 73 / (6) * 4 + -++25 / +0 * -015.303 + -5.86 * ----0.0 / 9 * (8.1) / 7 * 2 / 3.1 + (-4.9 + 3) * +++3 / (5) + +01 - +-5 / (7) * 5.8 * 0.2 + 7 - 8.8 / 8.8 + 2 - 8))',
 '((-(14.4 * 9.163 * -66.6) * 1 / 826 / (-+9 - ++9.9 / 1 * 5.8 + (5) / 9 / 1) / 2 * +-(8) * (7.7 + 7.8) / (6) * 5.0 * 3.5 / 0.2 - 62 * ++-522.796 * 203 + ++68835.450 / 72 / (+4 / +7 - -9.1 - 0 / 0.4 - 1 - 2)))',
 '((3014))',
 '(((7.6) * 18 - 746 * 8 / +-(-9 / 9.6 * 0) / +3 * 859.32 * 58 * (8.1 + 5) * 1.8 + 6.2 * -+5243.8 * 8 / 4.357 / (2 * 2) * 3.14 / -1 * 3.3))',
 '((3 / (4) + -4 * --3 * 84 / +0447.4 - -67 / 4.668598 * ((0.7 - 4)) / 4 / 279 * -+5 * 0.3 * 1.0 / 4 + +2.38 / ((7.1) - (7) * 2.2 * 8) / ((6) + 7 * 0 - 7.9 + 4) * -8.2 + +++41.3 / 9 * +75 - 22 - 83 * -+3 * +2 / 7.4 * 0.4))',
 '((--+67))',
 '((8209.02 * +-+-1.266 / (+5.144 * 3.64 * (5) * (7.9) / 3 * 1 + -+7.7 / 54.86)))',
 '((++(8 / -+(4) / +9 * -2.3 * 2.4 + (6.8 / 2)) / (--1 / (+4.6 / 6.8) / 61 * +(9) * 1.2 * 1 * 7.0 + (5) * 73.6 - ++7.5 / (6.9 - 8.6) - (7.4 - 0.2) * +2 * 3.1 / 6.7 - (4.0)) / +-3.7 / +542 * 5.0820 - +1923 - (+2.9 / -+-9 * 0.61 / (1.1) / 2.7 / 5) / -5968.4 * (-8.7 * +6.4 + +4.1 / 7.6 * 5.8 - 5 * 0 - 0.7 + 1) / 8 / (3 / 2 - 0.7 - 4.3) / -+0 * (8.4) * 1.7 * 3 + ++5069.7663 * 8.5 * -45.456 / (4 / 0 - 9) * 09))',
 '((+-+-6 * 9 * 388.32 * +(+0.1) - 9 * (+-5.8 / 606.6) / ((6 * 4.0 + 5 - 9.4)) * 32 / ((1.5) + 8.9 + 3.6 + 8) / +-+5.7 * ++2.3 / +8 * 2.9 / 4.7 - +640 / ++0.766 / 1 * +415.1 * 97 * 8 * 1 + -+3 / 3.0354 * 6.0 / +7 * (0 - 8) * 7 * 0.9 + +792 / 9 - (7.9 * 4 + 0 * 1.7 + 7 - 3.1) * 83.4 + -+(0.9) / (9 + 4.9) / 5 * 3))',
 '(((+7 / -775.0 * -08)))',
 '((--(-4 * +19.8 * (1) * -5.5 * 4.7 - (1.8 / 0.0) * 79 * -8 * 6.5 * 1.5 + (3.2 + 0)) / +0.1 * --9.1 / 9 * 6.7))',
 '((9.6))',
 '((+8016.3 - --0.52 * (2.1 * 2.974 / --7) / (5 * 29 * +8 + 7 + 4.2 - 6.0 / 8 - 6.5 - 4.2) / 3501 / (8 * 5 * 0.5 - 9 * 3.3 - 8.3 + 3.9) * +7.8))',
 '((9.39 + --740.063 - -+0 * 9 / 6 * (-9.4 * 0.6)))',
 '((((0 * 4) * 74266 * 2) / -(((4.7) * 5 * 3) - 5.146 * 49.3 * (7) / 2 / 2.7) + (7 * +3 / --(7.0) / --7 / -8 / 0.3 * 8 - -(1 * 7.6) - (8 + 7.9)) / 4110428 / 3.1 * (-0 * (4) - 2) - (-803 / ++(4) * (7 - 5.3) / (5.1) / 6.5 / 2.0 + 004 * +5 + +-1 + 7 * 0 / 8.5 + 7 * 6 - 9 - 7.6)))',
 '((40 * -9 / 90986 - 46.13572 * --9.6 - --80 + 51465.027))',
 '((((-3.6 / 2 - 70.45 * +1 / 6 * 7.1 - +0.3 / 5.2 * 2) / (+-4.8 * 6 * 2.3) / -(9 + 9) + +6531 * +22.6 + 7.9636 / +79 * (2) + (0 * 5) + -1.8)))',
 '((7.128331605 * --+61))',
 '(((-+-(0.7 * 0.3 - 0.8) * 761 / --+6 * 23 / +4 * +0 * 2 / 8.9 + ++(0.8 / 3.7 - 2.5 + 3.1) - 8 / ++(1.8) * -+8.5) / -6.53 + 0.310 / 048.8 / ++955 * 6.990 * (-9 * 9.2 * 0) * +8 - 38 * 6 * 0.6 - -91.17))',
 '((991 / 7 * -49 / 29.0 / +((8) / 0) + +1 * 16938.40 - 4061.3 / +59.9 / (6.6 / 6.1) * 8.0 / -0.14))',
 '(((+7.4224) / (-0.244 * -+8 - 4772 / 9.830 / +-2.4 + -57.9) * +2.6))',
 '(((62 * --+(8.7 + 9.0) * 30 * ++(1) - +6.1 / +7 / (0.6 * 8.8) / +5 * 5.6 * 1 / 2.6 + 3.3 * +++5.9 / 51 / -0 * 5) / ++-((7 - 9.2) * -0.4 + -7.3 * 6.7 / 8) * -+7220 / -1 * +-661.783 + (7) * +-9.3 * 21687.02 / 06003 + --4 - -2.6 - 9.6))',
 '((5.83290558 * 944 + -++7091.8 * +7357 * 8 - +++((8.0) / 9 * 1) + 402670.5 / (-0.8 * (2) - -8 * 7.9 / 2.4 + 6.4 * 3.8) / (+3) - +(-0.5 * 9 - 0.7 / 6 + 4.0 + 5.6)))',
 '((1.1))',
 '((88 * 09 + 66515847.5 * +74 * (5.1) / -39.2 * +(5) + (2320 / 1.7 / ++7.0 / 5 * 3.0 / 4) * 611813 - 93 - 26 / ((7.7) - 4 + 1.8 - 4) / -23 - 4 * -+-3.1 / -+8 / 4 - 85.7 - -5 - 9 + 1 * 5 + 1.5))',
 '((0 * 997 / (--06.7 * -++5.8) / (+(6 - 7.6)) * 8))',
 '((8 - -121614 / ++9 * +((4.3 - 8.2) + (0.9) / 7) * 3))',
 '((922750 / ((24 - 6 / 4 / 8 - 1.2 + 5.8 - 9)) / 1.7 * -75.9 - (-3 * (+9.7 * 2.7 / 6) / 9.062 * (5 + 0) / 5.6 / 2 + +967.303 + -++3 / +4.9 / -3 / 6 * 4.6 - +1.2)))',
 '((++-+9.52388 - +469.52830 - 0.7))',
 '((+(+8.517 * 6 * -69 * +-5 / 9 / 8 / 3)))',
 '((68.7 / +739400.5034 / +4454 - 36 / -(+72.80 - ++6 * (4.1) * 0.1 / 2 - 3 / 1 * 3) / ---20.042 + 02278.7 - -(+9 / -5 / 0 * 1 + (9) / 4.0 + 1 * 8 + 1.2 + 5) / (78 / -8 / 7.9 * 8) * --(0 + 8.8) / (7.9 / 9.4)))',
 '((1890684.1))',
 '((7 * -+----45 / -(71 - 00 / (8.6) / 4 / 4) * 821 + 3.00 / 47.63))',
 '(((0 * 9.1 / --3.05 / 77 / 73 * 6 / 3 / 8.9 + (+-1.5 * 3.9 / 7.9 * 1 + -5.1 / 3 * 9.0) / (+3) / -(9.1) * -(8.2) * (1) * 3.1 * 4) * 42))',
 '((56.1 * 048.2))',
 '(((-(--9.2 / (3.6) / 9 / 7.9 - 6.4 - 3.7 / 0.6 + 0.8 - 1) / -(2.7 * 9 * 8.3 + 4.8 * 9.8) * 28 * +96 * -+2.7 / -5.9 * 2 + 0 * +(8 * 9.5 + 9.2 - 6.1)) / 98 / ((6.7 / 1 - 2.4 / 2.6 + 8 - 8) / (0 + 2) - (5 / 1.5 + 8 + 8.9)) / 24 / 1))',
 '((-8.7))',
 '(((--9.5511) / +---++2 / ++-((6) - 0.5 / 1.6) * (73.48 - +-4 / 7 * 6.9 - (4.1) / 1 / 1.1 - 4.1 + 5.0 - 1) / -0270 - 9.8 / (-(3.5 * 7 + 9.1 + 9) - +--0 * 09.59 - (8 - 1) / +8 + -0 * 9.4 * 2 - 9 / 9.3) * 12.8 / 31.906 * +1))',
 '((--(+9.8 * 399 / -2.3 / -3.6 * 1 / 5.1 + +(0) / (3.6) / 0 - +2 * 4 / 3 * 9)))',
 '((+((62.32 + -2.8) + +303.77 * -87.81 - 492.000) / 9562 * 5 * -(62.59 / -9.8 / 0.4 * 6) / (--2.1 / 4.9 / 5 * 1) / 49.630 * 826 * 7.80 * 8.0 / 2.5))',
 '((-+7 / 4.7 - 9 * (4 * 679 - 3 * (9 - 0.1) * +7.2 * 7.9 * 9.5) - 588.44 * +-+--(5.2) * (1.02 * (4.9) + 3.7 * 8.6 + 4.2 * 5.0 - 1 + 7.0) - +8.117 + +8739 / ((1.9) * 6 * 4.8) + +0.25 - 7.983 * 2.97 + 38 - (1.1) + 4 * 2))',
 '((-+(-96.8 / (8 / 5 + 2) * 1.22 - -8 * ++5.5 / (5.8) - -7 * -2 / 3.3 / 7 - (5) / 6 * 0.9 - 5.5 * 1 - 1.4 - 5.4) * -+0.67 * (581 + 0.0 * 2.01 / +0.4 * 5 * 3.0) / 58.4 / 7))',
 '((--+3.911906))',
 '(((70756 * 9 / ((2))) / 60 / 5))',
 '(((((3.8 + 6 - 5) / (6) * (7.4) / 4 / 3.4 - -+4.1) * (52 * -1 / 9.3 / 6) * 001.0 / -5.19 - 5 + (4.7 + 8.6 - 6.7) / +4 - -2 * 08 * (8.0) * 6.6 * 7.8)))',
 '((---+((8.4) - -4 / 1 / 7) / 2.52 + 05 / (4 * -(4.4) / (7 - 8) / (6.6) * 7 / 8 + -(2.9 - 7.9) * 95 / +5.4 * 5 / 4.6 - -1 + -5 / 0.1 + 6.8 * 3.0 - 0 - 8.4) / ++++-+1.9 * 4.505 + -(-+8.9 / -(8.5) + +-8 * (9) / 3.9 - (9) / 7.8 / 2.4 - 9.4) / 1.81 / -3.8455 * 1.7 * 99 / (9 - 6) / +5 + ++--(7) * +433 / +06.3 * +2.66 - 4))',
 '((+-+(79 - 6.0 + -5 + 8.3)))',
 '((14 * -(6.61 - (8.6 * 6.9 - 1) / +1 * (5)) - 822.64 - -0 / 6 * -(9.6 * 7 / 4.0 + 2 / 6.6) / +(3 + 0.8) / 4.5 - -7 * ++21 * ((5.6)) / -+-8 / +-5 * +3 / 4.4))',
 '((+---5 * -6.797 / -+1.721 * (+53 * -4 / 8) / +-2.6 / +9 - +69 - +-(-4 / 1 / 2 - 8.8 * 2.4 * 3.2) / -+-(9 + 2) / 40 / --++6.7 / (1) / --1 / 3 * 8.1 / 3.0))',
 '((0.99))',
 '((-+265.5 * --(1.472 / +(5) * 6.1 * 7.2 * 9.8 - (3.8 - 1) - -9.4 + 1 + 2 - 0.1) / +3.0 / +37 * 9.3 / +++0 * -1.4 * +4.0 + +--4.9 * 96 - +--4.5 * -+9.2))',
 '((5.1 + 97478.98 * 97 * (41.3 + -7 / -2 / 2 / 2.4) + +34.319 * (+7.7 - +(2.6) + 9.5 / 6.5 * 1.5 + 5 / 2.4 - 3.2) / +75 / +-+-8.5 - ((5 * 4) * 7 / -3.2 * 3) - 24582.48 - 0.01 / (0 / 1 + 0.1 + 9.4) / 2.63 * +2.6 * 9.5 / 8 + -(7 + 5.5)))',
 '((++0.64 * 924 / +9667 * ((6.4 - 8.5 - 9) * 93.5 / +2.1 + +6 * -1 * 8 / 3) / +((7) + 8 / 7) / --46 / +-+4.0))',
 '((43 / 3.9 * -+608.64 * 6.7 * +07.2 + 08 * (--7.49 / 3 / +1 - (5 * 5 - 6 - 8.7) / 85 * 5.6 * 0.4 * 9.9 + -8 * +1 * 4) * 4721 - ---4462.6 * +0.1 * (++1.7 / 7.8 * 0.0 / 0) / 23.051 / +(5.3 + 6.9) * (3.1 - 0) - 8 / +(+6.0 * 4.8 * 8 - 7.3 + 6) / -7.941 - 4.0 / -+-6.8 * -8.0 / -(7.7) / +4 * 9.5 - 09 * +6 * 4.8 + -++4 + +-3.8 + +4.5 + 3.1 - 1.7 - 9.7))',
 '((7 * +--1.3 * 1 * 734442 * (--5.7 - +9.5 / 1 - 4 / 6) / 0308.794 / 5 / ++9.3 * 3 * 0 * 9.7))',
 '((-7 / ((89.2) * 74 * (5.3 + 5.0 + 4) * +-8 - (8.6 - 1.5)) / +-+45 / 9 / -+929))',
 '((971 / -7.9 * ((-2.9 - 8.4 / 0) / -+-7.8 + ---0.4 * (5 + 0.1) * +1.1 / 4.9 / 3.3 + +(4.6) * +4 / 1 - -7.5 * 2 * 8.0 + 5 * 9.1)))',
 '((+7 * --00573.7))',
 '(((+65.6227 + ++8 * 84 + (5.3 - 0 / 7) / +(9.8 + 4.6) - -8 / --6.0 / (9.0) / 8.3 * 8) * --(2) / 92.6 + 0 * 54.8009 * (1 / 30 / (7) + 1 / (2.6) / 4) * -+(3 / 5 - 1 + 0.4) * 0.1 - 791 - +(4 / -4.7 / 0.4) / +(-6 - 0.0 / 8.0) + 5 / 5431.838 / 166.234))',
 '((5.9 * 3.3 - ((45.7 / -8 / 3 / 4 + (7.4)) - -92 / 1.7 / +(9.4) / 9 + (6 - 3 - 1)) / (((6) * 1 * 6.7 - 7.4 - 3.1 + 4) * (7 * 0 - 9.2) / +(2.5) * 0.7 / 5 + -17 - -7.4 * 7 * 7.1 / 0.2) / -++(0.6 + 5.4) + 7.8))',
 '((0.2380 * -84.4 / -999.7 / 79.5 / 5 / 9 - 938.7 / 304 / (7.12 * -(4.0)) * ((0 - 5) * 5.1) / -+-(0) * (2 * 4.6 - 1.1 + 0) / (0 - 2) - 0 / 0 - 9.7 / (3 * +6 * 4 - 9 - 4.2 + 3) / 5.11 / 2 * (8 - 6.0) / 1))',
 '((-(1 - 0 / 26 - -+8.0 / -3 - --2 / 6.8 / 6.0) * 3.1052 / 6360.0 / 865213.79 * 3.277 / --+3.0))',
 '((598.4 + 488 * +08.78 / ++8 / (5.1 * (7) - (5.4) + 1.3 * 9 + 1 + 6) * -5.92 * 05 / +9 + -3 - 04.9 / +(-4 / 3.6 - 6.1 / 7.2 - 0) + (++3 + -1 / 0) * 14.6568 * 878.7 * 29 - -+(7 - 9.7) * (5 / 0 + 6 + 9) / -+8.6 + +--0 * 84 / -8 * 3.3 + (3)))',
 '((++2 / 46.4))',
 '((-8 / ((--7 - -6.2 / 9.6 / 2.1 - 7 / 3) * ++3 / 2 * (9.6 - 3)) * --6959 / (598.1 / 78 * (5.1) - 45.27 - -0 * 2.9) / ++846 - 0 / 91642.1 / --(-5.7 / 0.9 + 1 / 8.0) * 2568.9 / ++-(7) + +-+-(9.4 / 9.2 + 4) - +-+216 * +(+7.0 + 5.0)))',
 '((+++4.9 * -71 * 8 - 723.045))',
 '((8.9 / 7.2))',
 '(((5.93) * -+--26.1602 * 4.78 - 5.116 / 07 / +42773.153 * 9894.69 * +-+3 / 0 / --0.8 * (8.1) / 9 + 2.070 + +(-9) * ((5.0 + 7.2) * 8 + 4 + 4 - 3.9 - 7.1) - +7.0 / +++9.6 / (7.3 / 2 + 9 - 1.9)))',
 '(((028 - 5152 / (+6.6 * 4.5 * 8.8) / 8 / ++3 / (9) + -53) * 7 * 604 / (+91.87 / -1.7 / 8.0) - -076.057))',
 '((+0.05902 * ((-3) / (-8.0) / 5)))',
 '((69 * +(((7) * 7.8 * 7 + 0.2 / 5.3 - 8 + 3.5) / +77 + 707.42 + (2) * (5.2)) - ++-38 - 86 * 7.693))',
 '((((+22.58 / (2 + 4.1) - 48) / +-(2 - 2.8) / 5781.00 - --022.1 - 292.21 / 479.1 * (1)) / 0 - 867880.2 + -4.4 * ++7 * 7.7252 + (5.696 * +5 / 8.1) / +-5.9 * 9.4 / 9 * 5.67 - -+(8.1 - 5.7 - 2.3) / 54 * 6.320 * -(7.5) - +2 / ---9.4 - (7 * 5 + 2.3)))',
 '((+-6 / --7.37 - 8 / (27 / -(5.0 - 2.5) / 9 - --2 * -(0) - (6 - 0) + -2 / 9.3 / 0 + 8 * 2 + 6.0 - 8.5) * 9.8 / ++338.5))',
 '((-39))',
 '((+-3 + 1 / -18 - 5412.507509 * +---51.20))',
 '(((+-+-++0.4 + (++2 + (8)) / ++++7.3 * 60 - 6 + 645 * -8) * +---247 - 1.5 / (5069 - -87.96 * 23.45 * (3)) * -9.0))',
 '((-(--3 * -+-8.3 / (5.9 * 9.7 + 1 + 6) * 3.04) + 11 / -1.017 + (+10 / --7 - (3 - 1 + 2.7) + (1.3 + 5.7) / 9 + +1.1 - 9.6 / 8 - 7)))',
 '((-64 / +68 - 5.5683 + ((2 * 6 * 7 - 6.0 / 7 - 9 - 0) - 673 - (7) * +5.0 * 3.5 * 4.4) - -+(4 / 0.3 * 2.7 - 5 + 8 + 1.4) - (--8 / 0.0 / 1 / 1.2 - 6 / 5 - 7 - 1 + 1.1) + (7.8 / 7 * 8.1) / +3.71 * 4.58 / 5.2 - +63 * 8 / +4.7 / 2 / 9 + 4.88))',
 '((+154 / --203 * 0593395 - 20.62 / 3.69 * 88.9697 * ++(2 - 6.3 - 6) * -+3.4 * -37))',
 '((---(++(1.9) / -(7) * 2.2) * -(514.5 / ++8 * (7.5) * +2.4 - 462.84 - 09 * (5.6) / 0) + ((-8 + 0.8 * 6 * 1) / -+-4.2 / +-(2.9) - 02.7 * 3.7 * +-2.7 * 6.9 * 7.4 * 7 + 53 / +6.5 * 1 / 4 * 9.9 + +7)))',
 '((904 / +(0347.1) - -(-+(1.0 + 7) / -+-7 / (7)) / -6.0 / -4.71519 / +-05.87))',
 '((++8 * -69.23 * -++-+9.5 * 28646.0 + (-6.954 + ++-(2)) + +6875 + (43.5 * 3.20 * 9 + -0 - +2.4 / 7 / 3.0) * 0777 * +-6.3 + +3))',
 '((402.1 * 87.590 * +(2 * 9.8 * -7.5 - 12.79 * 9 + 3 * 0 / 5 + 5.5 - 0.9 - 8) / 101))',
 '(((975 * 56.80) - +61 / 4.6 + -(-8 * ++6 / +5.0 - 22.0 * +9 * 3 - -2 / 2.3 / 8.5 - 3.0 / 0) / 9.487781 / -+6 * --(2.4)))',
 '((111.2 * 0 / +84 / 4.91 / +(2 / 3.4 * 2.7 - 4.2 / 7.1 - 1.9 - 4) * +---3.7 * -7 / +-4))',
 '((031904 * 97328 * --6 * -6358.297 * ((2.4 + 3.0) * 5.4 + -4.4 * 2 / 2 - 6 / 9 + 7.4)))',
 '((0231.5 / -(3 / --+8 + (2 / 9.1 + 5.4) * -(2) - -1.2 + (1) / 2.5 + 7 / 3 - 1 - 5.8) * 9 / 12559.216 / ((3 - 7.1) * 8.6 + (3) / 8 * 5) - -+376.3 / (3.41 * 0 + 22.5 + --7 / -8 - (6) * 8.4 * 2 + 9 / 7 - 4 - 4) / -(65.0 * -2.3 + +4 / 2.8 * 8) - 5 - (160.7 * 2.20 * 9.8 * 2.8) / 93873 * -+-6 * (6 + 9) - -+9 * +(7.4) + 6912 + ++2.9 - +(7.4) / +6 + 1 * 4.3))',
 '((23 * ((--4 + (0) / 9.5 + 8.6 / 4.1)) * 147.7 + +(515 - 2 * --7.7 * +7 * 9.3 * 1.3)))',
 '((-++-792.921 / +-8.7 * 5 / -(+0.3 / +5 / 0 / 5 - 4 - 5.4 * 1 + 8 + 2.1) / +((5.6)) * (+4 / 6.5 / 2.0) / 68.5 / ++2 - ++0691 / -14.134))',
 '(((-8 * 2.1856 + +(+6.2 + 8.2 / 0.2) + 6151.1 + +54 / 6 / (9) / 3 * 6.1 - (5 + 9.3) / +9 / 6.4 / 8 - 8 / 3.3 * 6.1 - 7 * 4 - 0 - 7) * 300 * 89 + (+((7) * 6 * 2 - 9.6 * 5.7 - 3 - 9.9) + --++5 - 2 / (1.8) + 9.5 / (5.6) * 0.7 + -6.7 + 7 + 6) / +((5 / 2.4 - 2 - 1) / -2.9 / (8) / 3 / 4) / 717221 / 4 + (-9 / (0.5 / 4.0) * -1.7 + +7) + ((8.6 / 6 - 6.7 + 0) + 2 / 7.1 - +1 - 4.3 - 0.1) / 24648.07812 / 408 * ++(2) + 3 * -4 / 6.0 / -0 * (6.1) * 9 + -0 / (8 * 5) - (7 / 6 - 5 - 3.2) * (9.0 - 3)))',
 '(((083 * -+384.92 + +634.5526 / (+4 * 6.9 * 6 - 1 - 8.4)) / (0.72 / 675.4) / --+6.6075 / (+6 - -3.8 * -8 + 5 + 8.9 * 1 - 2 - 7.1) / 2.12 * -(4 - 9.6) / 13 / -+6.9))',
 '(((08 / -1.9 + -+(8 / 5 - 2.6) * 1.901 + 61.2 / +-(7)) - 5 * 31.5 * (852 - 0.5 / 5.8 * 7.9 * 8.7 + -6 / 2.1 * 6.1 - 3 + 6.7 - 8.6) / -43 * -(2 / 5) * 216 - 5.6 * 90 / (+-4.2 + 3 - 2 * 0 - 4) - 168796.9 * 60))',
 '(((+1 + (5 * 4.0 * 0.4))))',
 '(((91) / +(814 / +(4) + -++8.5) + -1100.8))',
 '((0.1 / +4))',
 '((-(4.1302 / ---+9.2 * 2 + +347 * 82.238 * +7 / +8.8 - 0.629 * 57 * (6) * 0 * 2 + +(9.5) / -0 * 6 / 6.9 + 4) * -0 + ++++8721.9 * (62.5680 * 3.37 * 11.56 * 3.8 - 68 / 37.63 * -1.1 * 3 * 8) + -++0863.5 / +7 / (+-2.8 - 2.4 - 0 / 8) * ((8) / 6.5 + 0 * 2.5 + 2.4 + 3) + 42.0 * 50695.7 + --81.1 * 5689.0 * (9.9 / 3 - 2 + 9.2) * 1.76 * (2.6) * 9.4 / 4 - +6 / 1 / (6)))',
 '((--((+3.6 * 0 / 5.6 - 3 - 5.6 - 1.0) + +56.4 / 4.0 * -2.2 - (6.9) / 4 / 6 / 2 + 1.6 / 4.6 - 9.0 - 6 - 6) - 635))',
 '((2344.4 / (+(+6) * (-0 + 8.8 * 0.2) / 92 / +-6 / 3 / 5) * -13.784 + 03 * 0.5))',
 '(((0 / +0.7 * 5.7 / -++9.8) / 5 / +((9 + 8.7 + 0) + 52.85 * +4 * 4)))',
 '((-(-4 * +023.5 * 42.3 / --8 * (2)) / 264 + -++(-1 / 6 - 2.4 / 3 + 5) * (836) / +66.1 / -178 * -(8.7 - 6.9 - 9.9) - (-+39.12) / -+--+2.0 + 02))',
 '(((3.89 * (28.8 / 9) / 1.4 * 79 - (--5.9 - 6 + 4.1 / 4.8 + 9.0 + 5.8) * 4 * ++-3 / (0) * +4) + +86.5 + (4.84 / 1 * -+6.5 - 03 / 5.5 - 3 / 1 / 5.0 - -5 * 9 * 7 - 7 + 3 - 9) * 663.1514 / 3 / ---4 * (7.8 * 3 - 5.9 - 1) / +2.5 - (4 / --5.3 - +1.9 / +5.1 / 6 - (0.2) * 5 / 5.9 - 6 / 2 - 4.9 - 3.7) * 0006.0 / 87.79 * +8 * 0.03 * 8.9 * 1 + (+(3.2) + -3 * 6.0 / 2.4) * +(1 / 7 - 5.4)))',
 '((-(11.040) + +66.3 / 7.97))',
 '(((3) * 4.313 * (+++8.8 / 94.573 * -(4) / (9) / 1.8 * 9.1 + 0 * 1 / 5) - 83.094 * 0 / +831.2 * -2.0 * (4 + 8.4 / 7.7 + 5) + -+45 / +1.09))',
 '((+1 + +-((4.4 / 7.4 - 4 + 8.7) * 3 * -9.8 - +7.9 - -3.3 / 9 * 1 + 8.5 * 3 + 3 - 2) * 9.2))',
 '((5 / 371 - -3 + (-+28.4 / (9.1 + 5.1 - 6.5) * +7.8 - -+-2.6 / 9) / +7.1 * (--2 / +2 * 8) / (+5.2 / 7.1 / 8.3) * -+6.0 + +(-+4.9 / 3 / 5.9 / 7)))',
 '((1.85 + (8 - +(6 * 6.9 + 3 + 3.9)) * +71.439 / (691.5) / -(0.5 + 4 / 9 - 0.3)))',
 '((-8.0901029))',
 '((-2 / (5880.5 / 3 / (9.6 - 0 + 8) * 3.1) * +((1 / 1.2 - 5.1) / 94.42 * +0 - 1.65 - -2.3) / 6 + 1.6 * --75 - 1.37 / -(--2.2 / (6) + (6) / 0.7 * 2.9 + 1 / 1.8 - 2.7) - ((7 / 1.4 - 5.1 - 4.8)) + -0 + +(1 / 8.0 + 5 - 2.2) * +15 * 3.42 * 5))',
 '((+-++9 * 90.29 / (+23 * (0.1) / (0.3 - 9.4) + +(5.5 - 9) * 6 - ++5.5 * (4) / 0) * 4 * 5.2))',
 '((-3.0 / (2 / 9.9 * +7 / 7.37 / 5.0 + ((3) * 0 * 7.2 + 9.4 / 5.5 - 7) * +--2) / 6207 - -98.2))',
 '((-740 + -++780 + +---287.2 * +7 + +-++01.0 - +1))',
 '((4 / 27 - -96.29872 - +--7805 / +413.57 / -(9 * 2 * 3.7) / +-(9 + 8) / 16 * 00 * 5 * 2.3))',
 '((4 / 8 * (((8) + 8.0 + 5 - 3)) / (--3 * +8 * 4 / 8.1) * +6047.3 * +22))',
 '(((-(-6 / 8 * 0 / 0 + -2 + 0.1 * 8.8 + 1)) / 9.0655 / 94.46 - -(7.7 - (9 - 6.3 - 8) * 3 + -8 * -7) * +((7.6 * 6.8 - 0.0) / 7.16 - (3 - 9.0) / 2.1 * 0.3 * 9 - -2 - 0.3 - 2) / 9.3))',
 '((28058.1 / --6769))',
 '((7.2 / ++--(-2.1 / 5 * 0.6 - 1 * 7.0) / ++73.525 * (1.77) * -(7.8 * 4.3 * 5) * -5 + --++89 / 4439.7 * +201 / +-1 * -5.57 * +--0 * (3 + 1.8) / (9) / 3.3 - (1456.9583 - (7 - 5.2 - 7.1) * -+3.4) - ++9.244 * -++-3 * +(7 + 8.4) * 2 / 98 * 7.1 * 9.3 * 3.7))',
 '((++-+9))',
 '((5.84 + --558.206 * 9 * +++(6.3 / 0.7 - 0 - 1) - ((+9 * 1.6 - 2.4 * 6 - 3.0 - 7.4) * -(6 + 4) * 30 + ++5) - -(67 / (0.9) * 6.5 * 9 + (8.8) / 7.0 / 7 - 2.6 / 5.2 + 8.8 - 9.5) * +(-3 / 6 / 1 - 1.9 * 5) * 22.6 - ((0 - 3) * +8.9 + +8.3)))',
 '((+5 / 99.91))',
 '(((41.179 / 2 - 950.6 * (1) + +989.7 / +(0.3 + 0)) / +8845770.8801 / 5.66 * 07 / (-+3 * +4.5 * 5.3) / +-0.12 / 542 / (0 + 4.2)))',
 '((732 * 08797 / (45.6 / 9.7 * (7 - 8.8) * 5.5) * 351 / 435.65 / +91.78 * 6.1 * +6.8 * +2.9 * 1.4 / 8))',
 '(((-6) - -(+(6 - 3)) * +++-(9.2 + 9.7 + 4)))',
 '((+(2577.6 / +2.53 / 30)))',
 '((++(1 / -+3.0 / 24 / 7.3 / 5.2 * 2.6 + ++7 / -1.4 / +4.8 * 2 * 5 + (8 - 7) * (2.5) * 3.8 + +1.5 / 5.9 + 1.4) / 58.89 / (-717) * 8.9 + 1))',
 '((0.069 * 3 * -50.41 * 4.8 * 9 - 97.0 / +((2.9 * 1 + 6 - 1.0) - +8.1 * +3.2 * 8 * 4 - -4 / 6 / 3.5 + 6 - 9 + 9) + (5 * -3 * (7 - 4) - 99 * (9) / +0.5 / 5.2 / 1 + (6.2 - 2) / -0 / 8) * +(+3 * +7.4 / 3.7 / 7.0 - 4 * 8) + (-(1 - 7) * (4.5 + 9.2) - 1.7 / 4.3 / 2) * 6 / 6 * 39 * -5.8))',
 '((-+(4 * 5 / (9) - (5 / 0.0 - 6.7 - 4.5) + -1.6) * +(+8 * (8 * 3 - 0.7 - 8.5) * 50 / 4.8 - -+8 / --0 + --4.4 - 3 + 8.7 + 2.7 + 0) * 9 - (+(-9.6 - 4 * 9) * 4851.8905 / 6.118 / +3 * +1 * 5.7 / 1 + 0 * (8 * 9.3 - 8.0 + 8) * (9) * 6.6) * ++-7963 * +(67.54) / --8.1 / ((3.3) + 7 - 5.4 - 1.7) / +++1.9 + (+(9 / 5) * -+2.8 / 8 / -9 / 8) - -+03.4 / -+1 * (4 / 2.2 / 1.7)))',
 '((8 / (-3.2 + 7367.7 * 142 * +-5.4 / -7.5 * 2 + (0 * 8.5) * 2 + (7.8) * 2 / 3 + +3.9 / 0 / 4.0 + 3 - 1 + 0.1) / 77991.03 / 672))',
 '((-----+++3.2 + -(3 / -(5) * 93 + 652.27) * (9.7 / --9 - 9.4 * (7 - 6) * 8 * 9.7 / 9.3) / -45 / 3 * -5 / 32 + (+(9.4 / 3 - 4) / (3.4 + 7.9 + 9.5) / -7.2 / (7.4)) + (+92 / 7 * 2.7 * 0 - (7.9 - 5)) / +9231 * (3 / 8.0 / 6) + 27.5 * ++(8.4 - 8) + 2))',
 '((7.9 + +(-7.311) / 782 - +6 * -(7) / 0.1 / 8 / 6 * --0 * 8 * 6 / 3.8 + -0 + +-(1.9 * 3.6) * -(8.4 + 7 - 1) / 61.56 / -+1 - +(3 * 8.5 + 8) + 737 / +2 + -5 - 0))',
 '(((-0.284 * 7 * --54.84 / 42 * -0) - 7 / ((8.6) / +71 * +-4.8 + +15 + +7 + 4 / 5.8 + 9.9 / 1 - 8.1) * 3 / 26.7))',
 '((496 * +080.1751 * ((-2 / 0 + 9 + 5 + 5.1) + 0.0 + 52.1 * +1) * 12 / 2 * 13.58 * (1.1 / 6 - 3 + 7.6)))',
 '((544 / (-0.1 / (2.5 * 8.7 * 2.8) / -+(4.8) / 72 / 5.7 * 4 - (-4 + 9.5 * 1.0 - 6.9) - -+-8) + +(++44 / 821.23 * 8.4 * -5.4 / 0.0 + --+3 / +(9.9) * 6.4 * 6 / 2.7) / -(+-+5 / 30 * -3 / 3.3) / (1.94 + (2) / 0 / 6.0) * 2 + (2 * 7.3 / (0.5) + 09.695 + 37.52 + 2 - 1 - 0 - 1) / 163.3 * (+(9.7) * 8 - +3.0 / 7 / 8 + 1 * 1.5)))',
 '((+16))',
 '((4 / (-84 / 9 / 931.7 * (5.3) + -4.301 / (8 / 8.6) + 83 / -7.5 / +5 - 6 + +9.6 * 3.1 * 9) * 66991 + 7 + 0 / (-++5.8 - -(9) - -3 / 1 / 8 - 7.8) * 21.94 / 6.37))',
 '((0 - -83 - 09 / (+-+4.2 / (0 + 3) * 8.5 / 0 - -6 * -9.4 * 7.6 * 5.0 + 6.2 / 7 * 4.5 - 9.9 / 6.7 + 4.7 - 1) * (--0.3 * +5 * 4 + -5.8 * 1 - 2.0 * 0.8) / (6.5 * 2.8 / 8.7) / ++(5.1) / 9 - +1.6 - 3.6774 / (-8 + 5.3 / 6) * -0.86))',
 '((11 + 01.81 * 36 * 383 + 08))',
 '((++6 - -(2 * 1.1 * -(7) / 5.7 + (4 + 7 + 2) - (3.4 + 7) / +2 + -4 + 6 - 5) * 1.7))',
 '((-2 * 6.26665 + -+5.53 / 0 * 5 * 48061 * +7 / -7 / -(4) * -9.5 / 3 / 4.1 + 4.7 - -(+-2 / (2) * 7 / 5.0 + +3 / 7 - 1 * 9.1 + 8.8 - 9) * (01.5 * +7 / 6.7 - -9.2 / 2 * 3.8) / +7 * 0.1 / 94.39 - 6.6 + 8 * +(4.3) / 4.90))',
 '((5 * ((33 * +9 / 9 / 6 - +6.1 + 5 - 9 - 0.3) + +76.3 - ++(5.3) - -(4) / 0 + +1.7 / 6.7 + 6 / 3.5 - 1.5 - 7.4) - -6.3 / 3.81 * 0963 / -(-7 / 5 * 8.0) / 78.4 * +-(6) / 4 / +4 - (-(7.0 / 6) + 83) * -+(-3 + 1.8 / 2) * (7.46) * -(8.2 / 4.5) / 34.4 + +++9.697 / 8778 * -(8.9 + 9)))',
 '((35.193 + +6.113 / -90.890 / -+5 / (4) / 94.4 + (8896 / 00 / +(9.3) * +5.3 / 4.8) - (15 / -1.0 / 0 * 0 * 8.8) * (-+3 * (5)) + --99 / +862.9 / 9 * (7 + 3)))',
 '((0 * +(+7 * 819.95 * -+4 + 736 * +0.4 / 1.8 - 9 * 8.1 / 6.6 / 6 - +2.5 * 9.6 * 3.5) * 92 - (+2052 / -+(7)) * (5991 / 0.76) * +63.9 / (89.10 * 3 / 5.0 * 1.3 + 9.2 / 6.0 * 3)))',
 '((+--6 - 7 * 40.79))',
 '((-+++19 / 0.7 * (((2.8) * 7) / (4.3 * 9.7 - 3.1 - 9) / --1 + 5.83) * -+9.26 - 6 * (705.68 * +-(1) - -(4) / 8.98 - +1.2 - 8) + +(427.1 - 66 + (2) - 4.3 / 5 + 0.4 + 9.0) / -49602 + (++(0.6) / 8.3 * 8 / 3.6 - (9 + 4.2) / 1.0 * 6 / 9) / 0385.90888 / 7 * 28 / -4))',
 '((((-2 * 50 + -(4.8)) / 11 * -++-0.0 * --6.3 / --3) * 5.886 * 8 - +(+-76.94 * 313 / +4.8 / 2.9 / 9.9 - 8 / +5.6 / +8.5 / 5.7 / 8 - (8 + 1) - 6.2 / 8.9 / 9.1 - 8.0 + 6.8 + 6) * 9 / +-1.6 * 946.61 - 1066.9533766 / 1 + (-++1.4 + 4.92 * 6.5 * 5 / 7 - -2 * 5.1 / 5.5 + 8 / 7 + 0 + 1) / -(6 * 6.1 / 0.3 - 3.8 * 5.5 - 5.2 + 3.5) - +-7.698 * -9.8 + 26.5027 * (7 / 7)))',
 '(((49644.88 * +59.5 + (+(5) / -0 + -7 / 1.0) / 2 / -03 + (+3) / 2 / (7.7 - 0.0) * 1 - 4.47 / +-6.8 + 47.03 / -7 * 7.1 + 8.7 * 4 + 7.7 * 0 - 1.9) + 3.6 / 66 / (+-(1) + (9 - 2.1) * 4.3 / 2) * 0.29 / 07.7340 * (1.4 * 1 - 6 + 2) + ++99.80615 / 8 * (-+3.3 / +3.7 * 6.8 / 3 + +4.6 / 7.3 + 7 * 8 - 0 - 3.7) * (2) + 64.4 - 3 + (+0.3 - 1 + 9.6 + 9.1) / 6 / --1 - +(3) / (3.6 - 4) / +4.5 + --0.2 * -3.9 / 0.7 / 2))',
 '((+7))',
 '((-(5 * 2350 + +-0.64 * 3 / (0.8) + +82 / 89.8 + (1.2 - 7) / -9.7 * 3.5 * 5.5) / +-(09.3 / 3 / -9.9 / 0.0 / 8) / 6.2883065 / ++-(9.3 + 0 + 8) * (7.5 * +8 / 6.5 * 6.8 - 9.8 * 4 + 7.8 / 6.2 - 9 + 7) / -(0.2 * 1)))',
 '((31))',
 '((+-200.29 / -3))',
 '((08.4 / -((-2.0 + 9.6 / 0) - -+-9 + -(2) * +1 + (6.1) / 8 * 0 - 0 / 8.9 + 5.1)))',
 '((3 - --706))',
 '((----((7.7) / 9 * 5.0 - 2.8 + 7.9 + 9.3 - 0.6) * -+(+-9) * (-(3.5 / 9.2 + 7 - 8) * 742.4 / +(2.7) - 77.071 * --8 / -4.2 - +4.1 - 0 / 0.3 * 8 + 0 - 7 - 7.7) * (4 * 5.26 - (4) / 7 - 8.5) - +2.26))',
 '((--(0867.6 * +7 * -+0 * 2 + 979 - 1.86) / 736.195 / 8 / -2 * 303.2 + (-312.16 * +(4.1 + 4) / 6 / 63.1 - -(9 / 5) - 3 + 59.35) - +28.24764 * 3 - --((4) * 2.7 / 9.8 - 7.8 - 4.0) / 196 * (6 * 1 * 1.8) + (0 / +2 * 9.0 - 0 / 5.6) * --7 / 1 * +-6 / 1 * 9.3 - ((1) * 0 + 8.0 * 1 - 9.7 + 4) / 7.058 * +-8.0 + (2 / 3 + 6.9 + 2) - 63.02 - -1.2 / 7 - 3 + 3))',
 '((4 * (+((9) / 1.6 * 3 + 0 * 0.7 + 1) * ++-5 - (9.6 / 2) / +9.0 / -9 + -38.8 / (1.2 - 2.1) / 8.0 / 2.5 / 5 - (2 - 5.9) * (4.7) + (6)) - 01 * +-6 * +(++7 / -7 * 1.9 / 4.6) * -(+6 / 5.6 * 0.8 - 6.4) / +++(9) + 26 - -(-(1) / -8 * 5.9 - 5.5 / 9 * 4.4 + 4.8 - 9.2 - 2.7) / -15.5 / (+8.7 / 5.2 / 3.8 + 9) * 8 * -4.4 + (+0.9)))',
 '(((++-+(1.7 + 4.7) + +5 * (7.5 * 5.9) - (-3.2 + 1 - 2) + 69.833 + -2 / (6) * 6) / 4 * 17 * -9.05 * -+(7 * 5.7) * (-0.8 + 7.2 * 4) * 7.7 * 5 * -3 / 7.1))',
 '((39 / ((2 - (2) / 2.9 / 5 + 7.3 / 1 + 5 - 5)) + (-6 + (9.0 + 0 / 8.8) + -+(1) * +2 * +1 / 5.7 - (6) * (9) * 5 - +0 / 2.8 - 4 / 3 - 2.1 - 9.5) * 3.3681 * ---(5.5 / 7.1 - 7.2 + 1.6)))',
 '(((+81) * 76.6 * (-3 * -(3) * (7.5 - 6) / (3) + (6.8 + 2 + 2) * (7.5 - 8) / 1.4 + +(3.2) - -0.1 * 1 / 4.5 - 0.7 * 7.3) / 1.77 + 882 + 250))',
 '((((+8 / (9.7) / 3.8 / 5)) * ((20.7 / +5 + +5.8 + 6 / 8 - 3 + 5.9) * (-9.6 / 3 * 6 - 5 * 8.8 - 2.3) * (8 / 1.9 - 5.6 - 2.4) / -7 * 6.5 - -+-(6.4)) * -711.1 * 18.2 / 28.3 / (6.1) / (1.8 / 5.1 - 8 - 2) / +5 / 7.8))',
 '((-+75363 * +-+-6.994))',
 '(((34.2385 * --+41.62 - -395 + 3601) * 2 + (-8 / ++-+8.5 - 2.3 * +--5.1 / 3.1 / -3.9 / 0 * 8 + (1 * 8.0 - 0.1 - 5.2) * 76) * (+---2 / (3.6 + 1 + 0) - ---6 * 5 / (4) * 1.8 * 7 - 9.02 - (1) * 0.5 * 9.7) / -(-0.6 + +7 / 3 - 3 * 4.3 + 4.4 - 4.9) * 06507.34 + 9 * ((8.1 * 5 - 2.2)) + -(-0.5 / +9.7 - 5 / 7.4 / 7.8 + 7.8 / 2) / +916 * 85.6455 / ++9 / +4))',
 '((++(+++(2.3) * 26 * +4 / -5 + ---7 / -(5.1) + 14 / -4.2 - (7.6)) / ++-9 / 6 / 17.252 - (+(-5.7) + ((4.7) * 6.3 / 0) - +(2.3) * +-9.2 * (2) / 9 * 8 + 1.28 - (3.6) * 0)))',
 '((+7 - ((+6.7) - 41.11 * --5 * -+3 + 72.2 * 4 * -6 * 4 * 6.9 + +-7.1 * -3 * 1.9 * 1 - +0.7 - 1 / 8.3) - ++81813 + (+(1 + 3) + (5.9 + 8.3) / 2 / 4)))',
 '((-(+-706 / 08 - 037.834 / (3 + 5) / (5 - 2.6) * -3 / 4 / 7 + -(9.4 - 0) / +-9 / +4 / 8.9 * 5.9) * -6 * 122 + 75.07 - 070.945 / (-88 / 7.6 / -4.0 + (7 + 9) + -5 / 9.7 / 7) * +24 * -(4.1 * 5 + 8.9)))',
 '((((+6 * (5.4 - 2.3) - 2.03 / 5.5 - +0.0 / 6 * 3) / (-3.6 / 7.4 * 8 - +8 / 2 * 9) + --(5 + 7.1) / +3 / +38 + ((4) / 2.4 + 7.2) / +(3.3 - 7.8) / -8 / +5 / 8 / 7 - 1 / (5 + 8) - (7.5) / +5 / 5.9 * 1.9) * 3 / 4 * 143746.05 + (+618 * 459.4327 * (1.4 / 2.6 - 4.9) * 1 * +1.1 / 6 - +1.43 / -86.38 + 018.52 - (7.0 - 0.2)) * 0 + 56.9 * -70.5 / (5.7 / 0 / 9.8 / 8.7 + (8.1) * 2 * 2 - 8.2) / 0.4636 - -90591 * ---1.3 - ((0.1 - 5.6) * 8.0 / 4 * 3.4 + 4.6 / 4.8 / 3) * -+8.13 * 3.553 / --5 / 6.4 * 1 - 3366 / (5.5) * (3)))',
 '((636 - 6 * 489 * 6 / +-1 * -(0)))',
 '(((5 / 4192.0 + +3542.62 / (+3 * 4 / 9.5 - 8 / 6.4 - 7 + 2) / -(5) / 1.1 / 1 * 9 / 0.4 + (+3.7 * 8.5) * (5 * 6.5) * -+9) + 23068.2 * -94.2091 / (++(4) * 49 - (4 + 1.1) + (6) / 7.8 * 9 + 1) - 8.930 / (+0 * +(2) / +4.1 + -(8) * 3.9 + (2.9) * 9 * 6 - 8 / 0) * 7 / (+8 * 5.8 * 9.4) + 1 / -+--5.7))',
 '((5 / -3 - +(13 + +(1.1 + 3.3) + +4.1 / +5 / 9.1 * 4) - --+9 * (++7 * 3.84 + 84.03 * 6.0 * 3.6 * 7 + -9.0 / 0.0 - 7 * 5 + 5.8 - 6) - -9 / -(-3.5) - 46 + ++84.7 * +-2 / 5.64))',
 '((-+38 / --(-3.9 / (4.3 - 6.2)) / +++(+7 * 6.9 * 0 + 2.7 / 5.6) * -+4.9 / 5 - (+-+2) * 35.26 * +75 + 515.6 * (+--5.4 * 31 / +1.7 + 9) * ((7.1 - 8) / +5 * 3.9 * 1 - 0.7 * 0 * 8 + 9) / (-7.1 * 1.3 / 6.7) / +-1 * 7.9 * 6 + -+--9.67 * (83.3 + 4.2 - 5) / +2.41 - ++6 / +-97.4 * 771 * -6 * (1.8)))',
 '((--(-+--2.0 + ++(5) / (5.7) * 4.4 - 06.7 * +6.7 * 2.5)))',
 '((-87 / (3.1)))',
 '((-+(((7) * 6.2 / 2.4 + 5 - 6 - 3) - 5 + --4 / 5 + (5.0) - 4.4 / 2 + 2.3 + 7)))',
 '(((-+96 + ++++2.1 / ++(5)) / -6 / ++((4)) / 247.228 * 76 / (6.0 * 0 * 9.6) + -(+(8 * 6) * 06 * +8.8 * 2 - (6.7 + 6 - 6.4) * (6) * 2.8 / 7 / 4) / -+-1 - 0.4 * ++-+-(0) * 95.0848 * 4.3241 / 6.30 * ++0.2 / (4.4) / 6 / 0.7 + +11.55 / +-+(9.3) / -+(3)))',
 '((41.9 - 56.2 * 2290 * 97 / -(2 * 4.8 * 3.6 - 3 * 1 + 3) - -+-+337.6 * 8 / -6.4 * --2.1 + (00.88 * (2 - 4.1) / 1 - 30 - 6.2 / 8.0 * 9 - 6 / 1 + 9.0) / (11 * +6.4 * 6.1 - -7.3 / 8 - 3 / 2 - 3.3 + 4.1) * +-7 * -9 * (2.3) * 9 / 0 * 2 + -2.2547 + (+1.5) / 1.367 * (3 - 6) / 3.2 / 9.8 / 6.0 - 568))',
 '((4.064 / 819 / ++--(5.5 * 8.9) + 638847.45 / (-++(3.2) / (2.8 / 1 - 4 - 6) / +-5 + 22 + 17.43 * (4.2) / 4 / 8 + 4 - 3 * 5.5) + (++-(7) / 5.6 / -8 * 9 * 7.2) * -(-+0.4 / (1.9) / 3.5 - +0 * 6.2 * 7) - 3.76))',
 '((-++-(-6.5 * (1) * 6 / 2.9 + (5.7) * 1.2 + 1) - 5))',
 '((--(86.842) * 54.79597 * 1 + 54348))',
 '((((+--4 / 9.17) * +4034.8 / (+5.2 / 5 / 8) / 88.3 - 528 - +13.34 * 20 * 58 / +4.2 * 8.0 + 596) - 4.2 * -1 / (+--2.1 + 0 * 1.2 - 2 * 0 + 5.9 * 2 + 5.7) / --3.7))',
 '((46.8 / +9.890964 * -+9 - -+0.6))',
 '((005064004.7 * (-+7.6 * 7875.0517) / (1948.318 - 43.3 / 94 / 0 / 2.7 * 8.9) + 6.36 * -(2) * +-5 * 41.4 / (2.2 * 1.1 - 9 - 0 + 2.3) * -+9.6 / (5 - 1.9) / 7 * 6.5 - (09 / +4 - (7.2 / 4 + 9.0 - 2.8) - (8) + -8.2 + 0.4 + 2.1 + 5) / +(0 * -0 / 6.8 * 1.0 - (4) * 1.6 * 3 + 0.0 / 6.8 + 7.9 + 1.5) * 9 / 77 * (3) / 33))',
 '((701.2 + 1 * -(2 - (7 - 0) / 2 - 1 + 0 + 7) + (+-(3) * +(8.2 + 3) * 2 * -6.3 + 42.6 * (1.1) * (3.1) - +4.6 / (5.6) / 2.8)))',
 '((92683.978 + 258 - (--57 * -(5 + 2) * -+7) / +++(2.6 * 7.8 - 4.1) / 0 / (2.6 * 6 * 8 - 2 * 8 + 1) * ++(1)))',
 '((1.5 - +++2 * --82011 * 18 + (100 * 62 * 36.0 / +2 / 8 / 7 - 27 * 21.57) / 529 / 6.099 * +(6.8 * 0.2 + 3)))',
 '((0 / (6 - -(9 - 9.7 - 4.7) * -6 - -04) - 6.1))',
 '((-5.60 / ++8 * +325 / 02.759 * ++(8.4 - 1 - 3.0) - 2834 / 31.5 * +3 / +-+-0.0))',
 '((65.623 + +24 / (+2) / 0.9))',
 '((-+46))',
 '((-5095 + 4.0 / (+(2.0 * 3) / ++-6 / (4.6) * (7) - 614)))',
 '((-+(8.6926 * 0 / (1) * 0 + (2 - 2) * 8 - 9 * -9 - 8.8 * 6.5)))',
 '(((64694 / +2 * -+(9 - 8.4) * 842.81 + -4 / -5.557 * +(7 - 6.5) / 40 / 5 + 9456 + -(5 + 3) * (8.7 + 8.0) / +1.4 * 7 * 4 - 72.78 / (1.9) - 2 / 2 / 3.0 - 5 * 6.6 - 6.3 - 4.2) / +(+(3 * 8.9) * -3 * (5.6) * 3 + (3.2) * (1.2 - 1) - 05.30 - (9) / 9 * 1) - --066.72 / +2.9))',
 '((1 / +((5 * 9) / 249.66 + 72) * +86.5381 * 309.6 + (-10) * +0.01 * 40.49 * +32.08 * 7.3 + (+62.7)))',
 '((13.5 * (--(8.2 * 6.9)) * 7 + 7.2 / ++-9 / (9 - ++9 * +4 + -4.0) + 82.667 * 4 + 78.08 * 88.9 / +-(9.3 - 2.1) - 1 * 7.8 * -29.6))',
 '((58 * (-((5) * 2 / 3) / -614 - (9.6 / 3 - 1 * 1.1 - 7 - 1.6) / +6 + (2.8 / 7 + 2 - 6.7) * --0 * -7.6 / 1.0 * 5.4 + (8 + 7) * -2 / 8 * 2) * 00.6 / --7))',
 '(((4547.1 / (--9) + 25681 + -2.7 * (9.1 - 8.2 - 4) / 61 / -7.6 - 1.64 / -6.8 * (5.4) * 2.0 * 5.0 - --3.2 * (2.6) * 2.3 - (5.2) * 6 * 5 - 3.0 * 0 + 0) * ((+(7.8) / 2.0 / 5.5 * 9 - +9.1 * 5.6 / 6.7 - 6.2 * 8 - 9.2) + -6 * -5 * 9 / -9.6) * ++96.53717 * 247 * (+(0) + (0) * 2 * 6 - 0 / 9.8 - 4.6)))',
 '((911 - 75 * ++92 + (-+6.2 * 61.8 / 0 / (6) / 3.3 * 2.1) * -+-(0.1 / 8.3) / 450.25 / +0 - +-+5 * (57 * -0.9 / 5.9 / 5.1) / 5 * 2 + 9 * ---0.8 / (6 / 9) / +5.1 / (0.4) / 7 - (+4.3 / 2 * 5.9 - 3.3 / 2.0 + 7.1) + 47.145))',
 '((42))',
 '((-++-62 + 721 / 89 / 8.6 + +4 / -100 / ++760.32 / 517.1 / ++(2.3) / --1 / +0 / 6.7 * 7.1 + (198.479 / (5.1) - +6 * (2.1) * 8 * 6.8) * +5))',
 '((805.7 / ++(+07.50 * 03 - +8) * -7725.0650 * -9.1482 / (52 - +7.9 / 2 * 1 + 4 * 7) * -02 / (9.3 + 9) + +498742.64959 + ((8.1 - 3.5 * 5.5 + 4.5 - 6.8) * 9.1 * +(5) * 0 / 8 * 5 + 005 / ++7 + 0) / -63.4 - +-5344.8 * -+(2 * 9 - 7.9 + 6.4) * (9 / 5 * 7.0 + 3.6 * 7.3 + 1 - 2.8) / -5 * -9))',
 '((-(+2.380 * ((6) - 4.4 * 0 + 0.2 - 2) + (8 - 4 * 3.8) * 502.19 / 4.3 * +3 / 4.0 / 7.9) / 0.3 / 92089.3))',
 '((+(-++(1 + 7) * ((7.4) * 8.3 * 4 + 0.3 * 9 + 8 + 3.3) / 0.7 / --4 * 5 * 8 - +3 / 0 * 31 - (9.3) / -2.4 + +(2) / (0) + +1.1 / 0.3 + 8.9 / 2) / (2.3 * 5 - +1 * 02.4 / +4.0 * 6 / 5.6 / 8.5 + 209 / -1.1 + 63.96 / 8 / 7.2 * 5 + +9 / 7) * +(+55.3 + (8.0)) / +((4.3 + 3) + 9.1 - 3.3 * 0 - 7.5) - +(-(2 / 4.7 - 3.0 + 0) / ---7.1) - 72 * -6 / -8295.5))',
 '((-(376.83592 / +-0.8 * 4.1 * +-6 / (1)) / 6.1 + 4 * 273 / (+(9 - 5) * 54 / 6.0 * 0 * 8 + 10 + (4.9) * 5.5 * 0 + 5 / 0.5)))',
 '((+--+(-+2 / 3.8 * 5.9 - +1.6 / 1.1 + 9 / 3 + 1 + 4.7) - +-2 * +(84.5) + ++44 / -(++2.4 * (8) - (9) / 3) / +347.150 / (-1 / 7.2 / 9 - 3) + 88.8 / --(1 * 3 + 6.3 - 6) - 64 + +(2.9) / (7) * ++8.3 / (6) / 0))',
 '((9 * ++339.0 - -0))',
 '((517 + (-+--(8) - ++(3.3 - 2.1) * +(9 + 2.5) * -+5.7 / 4.6 / 8.8 + +91) + -+1.3 / ++-9.541 / -(-8.8 * 6 / 2 - 7 / 4.8 + 2.3 + 7.4) / (1.2 / 5 - 3 * 5.5)))',
 '(((05 / (50.21 * +5.0 * 3.4 / 4) * +(5 / 6) / -(1 - 0.1) + 4 / 42.6156 + -(7 / 8 - 1.0 + 0.0) / 7 / --6)))',
 '((152 + (-(5.1 / 6 + 5) * (-8.6 - 8 / 8.1 - 4 - 7.8) / -(1) / (4.3)) - 40 * +3 / ((4 + 8) - 1.7 * 9 / 9 + 4.4) + 5))',
 '((5.4 * 03.0 + 0 - +49 / (6.167) + +7 * (26.3 - +9.8 * 6 - 9 * 2 + 6 - 6.0)))',
 '((9272.28 - +81.332746))',
 '((8320201.2 * (++(3 * 4.1) * ++71 + 30.6051 / +(9) * 56 / (0) / 0) / 8 + -2 + 833 * 88 - 0 / ((5.2 + 1) * 9.6 * 3.6 * 6 - +1.7) * +88.140 / 5 / 52 / (4) * 1 / 3.1 - +449.47 / +597.4 * +-5 * (8.7 + 7.2) - 0.7 * 6.91 + 7 / -(7) / 4 / 1 * 0 - -+6.8 / (4) * 6 + -8 * 9.8 / 8 - 0.6 - 4.1 + 8.5))',
 '(((+430.27962 - -+6.5 * -(4 * 1.8) + 0.24 + 05.0 / 1.0 * 2 / 4.1 / 1.9 + -6.0 * -7 + +2.8)))',
 '((+5.93 / (-9.3 / 40.28) / -(36.2) / --((3) / 7.5 - 7 + 3.5)))',
 '((+--(+++1 / (9.2)) * 51 * 0.7 * --+8.024 * 366.4 / (+5.8 * 3.6 * 3.0 + 5) / -71.7 / (0.3 - 7) / (2) * 3.6 / 0))',
 '((+06.1 * 5.99 / 9.40 / 8 - 0.9 / +---+65 / 847010.3 / 1 * ++8.6 * (4) / --2.2 / -5.3 - 248 / (+54.1 + 02 * +2.2 - 7.5 * 6 / 7.0)))',
 '((-8.7 * 3657))',
 '(((---++(1.0) * +-766) / 6.9))',
 '((816.2 * 4554.424917 - +3.3 * 50.9 * 85 + 01352.5 + (++-6.9 / ++8.4 * +6 + (4.4 - 4) / 2.8 + (6.7) * 3)))',
 '((-19.6 / +-+2 * +((0.3 - 7.6 + 9)) * 072 * -++7.0 + +(-(5 + 2.3 + 8) + 5 * (9) - +-3.9 * 4.2 / 2.2 - -0.4 * 2) + -617 / +2.16637))',
 '((+1791.9169 / -((0 + 0.7 / 0) / 6.7 * (5.1) * (0) * 3.7 / 6 - +(8 - 4) / 51 * +6 * 9.6 - (4.9 + 3.0) * (9.3) * 2.5 / 9.9) - -90 * +-84.88 * 248.5 - -+9.73 * +84.413 * 507.849))',
 '((762.2 * 3.7 / (-+++9 / 5.8 / --5.3 * 9.8 + +0.3 / 4) + +6 - 1.1 * +(54 / (2) - (2.0) - 2 * 3 - 8.9) * 8 * +3 * (4.0 / 7 + 3 - 4) * (4.3) + +88.04 / (+(0) * 0.3 + +6.4 / 5 / 7.6) / (-5.5 + 4.9 * 5) * -(3) / -6.1 * 0 - +-3 - (+1 / 4.1 * 6.4) * (9 * 2 + 8 + 9) * 12 * 1 - -+-1 / 4 / +6.4 * 1.5))',
 '((7349 / 4 * 381 / -22.7 * ((3.5 + 2.1))))',
 '(((79.2 - +19.0) / 36 / (896.1307 * +-7.6 * 2 * -4.0 * 1.1 * 5 + +5.53 * 6 / +5.0 / 4.9 - (9.7 - 9.8) * 5 + +2.6 / 2.2 * 7) * (++(0.1) + -4.5 / -3.2 * 7.6 / 0 + 6 / 5.9 / 4.1 + 6)))',
 '((47.04 / 94 / --9.5 - 8 * 4 + 0.3 + -+-8.7 - +97 * 2.7 + (+2 * 3 + 9 * 5.7 - 7) * -56 / 3 / 4))',
 '((10 * ++--7 / 144 - 8.80 - 0709575 - 2.34245 * -((7.3) * 0.7 / 2 + 1.3 * 4.5 + 9 + 7.8) - 3 * (-2.1 + 9 * 8.0)))',
 '(((-95.33793 / (16.3 / -7 * 4 * 9.8 - (0.6) / 6.9 - 9 - 2.2 - 2) / (7 / 0.6 / 4.7 - 6.2 / 1.2) * +++7.9) * 64.1 * -+2.4 - (-(-4.8 * 8.0 / 1.9 + 1.6 * 7.3 + 9 + 8.1) - +-7.63 - 9) / 1 / (1.566 / 92.08 - 44) / +(+5.5 / 6.6 * 7 + 5 / 8.6 + 6.9 - 0) / (-3.6 / 5.9 * 3.5 - 3) * +25 * +-3 / 5 * 1.1 - 918 * (+1.67 - ++7.8) + 4 * 1.53 - +8 * ++(3) * +(4 + 1.1) - (9.3 + 3.3 / 8.1 - 3.0 - 0) * 6 + ++(7) - 2 + -9 * 8.8))',
 '((831 * 152.547 / 1 / +312 * 82.3 * 7.1813))',
 '((1.188 / 514 + +(00) / +++2 * 3 + 17.9 * 3 * 5 / --(7) + (0.7 + (1.4 - 7) / (3) / 4.2 * 7.5 + -2 + 0 - 7.8) * 457 * -705.46))',
 '((6.86 * +76 - (87 / -+14 / (7.6 / 9.7 + 3.4 - 0) * 4) / 4.73 + --66.6 * -1007 + 1.9 / (8.85 * -0 - +3 * 6.3 / 0) - 5.9 / 61 / +-1 / (9.6 + 8) / 8.6 / 8.2 * 9.7))',
 '((+-+4 / 7.62 / 6465 * +(06 * -9.7) / 7.3 * 6712 - 172 / 248 * 1.0 - +1558 - 717 / (96.65 * +5.7 + +5 * 3.4 / 9) / 6.5124 + 9.8194 * (1 * 7.9 / 7) * +48))',
 '((+(((9 + 3.9)) / +23 * 9.0 - 4 / -95 + ++4.8 / (5.4 - 7) / 7.1) / -3.3948 / +3.2))',
 '((-8.2 - 99728 - 2 + 34.3 * 2.735 - -80.991 / 44 / 9.6))',
 '((-32 / -4 + 803 / -5.432 * (9.34 / 02.3 / 9.1 - (2 - 9) / -1 / 4) / 6.1 * ((7) * 1.8 + 7.6 * 8) / -4.4 / ++5.9 / (8.8) / 8 + +8 / 69187.5 * (+(0) / 6.0 * 6.2 / 6 - -6.1) / 124.8330 - (-82.26 + 0 / +3 * 4 + 0 / 2.9)))',
 '(((+-0.3 + -(5.3) / (2.5 * 0 / 2 + 7 * 5 - 5) * 5.46 * ++4.0 / (6.5) * 8 * 6) - -(8 / 2 - 6) / -4))',
 '((-+5.3840001 * 0.4 / ++((9) / +9.1 * 0.1 - 0 + 0.8 * 2.4 + 2 + 8)))',
 '((1.9127892 * +-9.48 / 72.33 * (2.1 * 14 * 5.3 * 3 * 6.6 + 04.45 + +6.0 * 2.3 * 7 + 1.8) / 6 / (-8.4 + 6.6 * 9 + 8) - ++--(6.2 * 2.8)))',
 '((-75 / -2.0 / 08 - (30 / (+6.3 - 3.0 - 6.0 + 6.0) / 6.29 * (3.3 - 6.8) * (0) * 8 * 5.2 + -08.651 * -0.03 / +6.5) / 34 * ((2.1 + 2) * (5.0 + 8.4) * +6.2) * ++(8.1 / 5 + 3.7 + 2) * 2 / +(4.4)))',
 '((+-(((2) / 3.5 / 7) * 3) / +1.4))',
 '((((500 * 44 / (4.7) - (3.8 - 5.7) / +9 * 7.6 * 9.9 - (8.0) / 4.4 * 2.6 - 8.8 * 8.1 - 4) / +((6.6) / 9.6 / 5.5 + 6.7 * 7.8 + 3 - 6.3) / (-7 / 1 * 4.9 - 2.4 * 6) * 3.2 + 69.85 / 5.58 * -(0 + 4) - -+-(7) + +(8.1 + 6.2) - (4 + 7) * 1 * 2.8 / 0 - +3 - 6 / 5.0 - 2 + 0) / 4 - +(1096 * 3 * 9 + -32.23 / -+6.3 * -2.2 / 1.6 / 2.9 - (2) - 2 - 9.4 + 6.0 - 1.6) * +--(4.1) + -028.8 / (+9 / (7.2 + 6.5) + (9.6 - 2.7) / 3.5 / 1 / 1 - (5) + 2.2 * 8.6 + 7 + 2) / -(8 + 0 - 9 - 3.3) / 75.9 * +(6.9 + 0.6) * +1.9 * +1.5 * 4.0 + -(++8.6 / 2.9 * 7.6 * 9.6)))',
 '((549.4 - ++46.7 * --+8))',
 '((1 / 2 / 96.44195 / -++(9.0 + 5 - 8.8) / ---6 / +(6 * 0.6 - 4.1) / +16.5 - -64 / 49930 / -+-0 - 562.192 / -0057.2 + +03.9))',
 '(((12083.998 + 65) / -+2.3816 - -+016629.9 * -+(+6.6 / 5 - 4.1 * 6 / 9 + 5.6 / 2.4 - 5) * +(24.6 - (4.0) + 1.4 * 7 - 8.1 + 2) + +(72.22) / 048.9 + ((7 * 5.1 + 5) * 3 / (9.1) + 26.21 + 2 * 6.2 * 4) / 8 / +07 + 2 / 304 * (8 - 9)))',
 '((-067501 / 2 * +-42966 / 28 / ++(7 * 2 - 0) * (5.4 / 1 / 4 - 5.0 / 7 - 9.2 - 0.8) / 8 / 0.61))',
 '((((+3 * -+8 * +3.1 * 5 + 7.57 * -7.1 * 4.2 / 6.6 - 3 * 1.3 / 5) / -(+8 * 8.1 / 7 - 1 / 3) / +447.2 * -4 + 47.9 * (-7 / 9.4 - 2.3 / 7.9)) * -+-7.563 / 1.30289 - (+67 - (8.5 + 1 * 1) + 198.88 * 9.2 - 3.6 * (5)) * -(726.466 / 8 * -6.7 * 3.4 - +(5) / 2.4 * 0 / 1 - (7.9) * 7.0 - 1.0) * 88.5 / 1 / (5 * 1 * 8.0) * 5.8 / (5.1) * 1 * 0.2 / 3.5 + 2.1 + ((7.9 / 4 - 7.6 + 6.1) * 59 + 8.49 * (9) - -1 / 6.8) / +9 / (8 * 4 * 8.4) * --(0.5) * +-4 / -2 * 8 + 70 - 0625 * -11.7 / ++8 / 8.1 * 7.4 * 7))',
 '((+-3))',
 '((4.8842216 + (47 - --(7 + 5) / 6.2)))',
 '((-860.5 * -375 + 5.570))',
 '(((+-+--(9.6) * 8 - ++1.5) + 1.7 / (3 * -66 - (5.4 / 8.2 - 6.2 - 7.0) * 5 * +5 / 9 / 1.1 - 71 + (6.4) * 1 - 9.1 + 0.5 - 2)))',
 '((1466297 - +(+-+4 * -01 / (5.0 + 4.9) / 9.7 / 6) * (48 * (8.0 / 0 + 0.9))))',
 '((-92 * ++(--(8) / 6.48 / 0.8 * 2 + 8) / 9.3 * (9 / (8 + 3.3) / 1.6 * 1.1 / 5 - ++7 - 4 / 6 / 9 - 0.1 * 6 - 6 + 5.0) * (++0.5) / 27 * 01.02 * (8 - 9) * 0 / 5 / 8.9 + (03630.0714 * (-1.0 / 7.1 / 1 - 8.5 * 9 - 5.5 - 1.5) / 2 / 87.39 * 0.0 / 6.8 + (+3.2 / 3 / 2 - 9.7 * 4 - 2.4 - 6.6) - +5.0 / 13 / 1 * 2.3) / +0.0 * +-8.3 / 01 / +5.1 * 328))',
 '(((-+126 * -3540.6 * -+(2.2) - +73.00 - 129 * ++-7.0 * 4.31 / +9.4 * 0.6) * -+(3.208 / (2) / -2 * 1.0 / 8 - (3.5) - +9.1 / 1.9 * 0.1 + 4.9 * 4.9) - +4 / ++-9 / 6.3 * +(+0) / (+7 * 7 / 0) / 72 * +3.0 * 0.3 / 5 + (((4) - 3.0 / 6.8 - 0.6 - 8.0) / +(9.9 + 8) * 89 / +6.5) * +-4.5 * (7 / 4 - 1.5 * 4.8 * 7 - 0 / 9) / +2.4 - -((5.7 - 7) + +9.5) * +269 / +-++3.7 * 6 / 7 + -060.2 * 3.918 / +5 * (9 + 0.0) / -6 + 8286 * +++1 * 8.49 - (2 * 7 - 0 - 2) + +-3 * (8) / 8.0 / 3.0))',
 '((0 / 51 - +-+9 * -602.1 / +(+-9.5 / -9.2 * 6.7 / 2.1) * +-+-+1 + 0 * 9214.0))',
 '((9.8 * 84 + (+-+4.9 / 7327) / 8.19 / 7.6 * -+(5.9 / 4) * -1 * +(2 + 7.8) / (0.5 + 8) / (4.8) / 2 - +-846.4 * 1 / 43 / ((4)) + +--++-3.9 / 8.01520 / 0.17))',
 '((4.239 * 5 * 0.4051 / ++((1) / 1 * 5 - 0 / 3.5) + 7 / 3 - +7 / +(++2.0 - (0) / 6.0 * 2.9 + 5 * 9 + 5) / ++-+-6 / 1 * 85))',
 '((+59.4 + +582 - +8.6034 * 87.3 - 068.7 / 412 + +9.8 / ((1.4) + 2.7 * 6 + 2.8)))',
 '((+00 / -(66.03 - --(5.4) / 0 / +6.5 / 8.3 / 6.3 + 5 / 2 / 4.6 * 3.4) / 8))',
 '((6.7 / ((+-9 * 4.9 / 0 * 7) / 3 * (8.1 / 3 - 5.3 + 9.1) / --5.6 / 9.4 * 2.9 * 5.7 - -++-2.6) + +08.6 - 0))',
 '((+33 / (+--(6.1) * ((8) / 6.6 * 7 - 1 + 6 - 7.5) * ++-7.6 / (1 + 1) - 4.041 * (5.3 - 7.2) / 5.0 * -7.5 * 3) - (138.6 + 9405.478 / -7.14 / -(6) * (2) / 6.3 + 234 * 3 + 8 + 7 - 4.0 - 6 - 1)))',
 '((4 * --9 - ((8.19 * 7.3 * 9 - +0.1 * 1 + 6 * 4 + 7 + 0.6) / 1.0 / 1 / +(6) / 6.7 / 9 / 6) + 2 - 047 / (13 * +1.4 / 6 / 6) * (2 - 6 / 2 + 1 - 7) * 036.5 * 52 / -1 * 2 / 5.5 - 8.5 * (7 / 7.4 * 8.1 + 2) * +(3.1) - -3.8 - 10.999 / -(1) * 1.0 * 0 + +-6 * +5.0 / 8 - 4 * 7 + 4 / 6.9 - 0 + 5))',
 '((+-6))',
 '(((--+863 + 6 + 4 * -23 * 2 / +6 + +(2.5)) * 7.2 / 61.4 * +--637.15 * (47.1 * 8.3) * +-6.4))',
 '((503676759))',
 '(((-16 * (-7.8 * 6.5 * 7.4 + +5 / 3 / 7.1 + 7.6 + 2.7) + -(-5.6 * 3.3 * 8.8 - 6 / 9 - 6.5 - 8.6)) + 4 / (6.43 - -5.7 * (2.4 - 2) / 7 * 7 + (0 - 3.9) / 9.1 + (4.5))))',
 '(((+(86 / +2 + +7 * 4.5 / 0.3)) - 71 / 0.5))',
 '((+(+((4.5) / 0 * 1.6 + 4 + 4.4) * +(5.1 / 8.4 + 1.0) + 93.14) * 2.1 * 7.0 + -0.223 / 0.2 / -32))',
 '(((+-6.2 / 88.8 + ((7 + 4.5) * (6) + 0.9 - 6.6 + 2.8 - 1)) * +-8.2834 / 1 - 5087 * -12 * 53.3 * -6 / -7.3 * -(4.2) * -(4) * +2.7 / 5.8 / 7.1))',
 '(((+0028.84 / (7 / 9 * 8.7 - +4.1 + 9 * 9 + 3.2 - 9.4) - 767.1 - (0 / 8) + (8.4) / 0 + 36.7 / -8 * 6.8 * 9) * (-++72 / (+7) + 4 + (8 * 3.2 - 4 + 1.5) + -0 * +0 / 5 / 6) + -51.8))',
 '((9 * (0 * (6.1 + 5.9 / 0 - 2) * -80 * +(6) / -5 / 5 / 9.4 + 5.208) - -(4 / +45.11 / ++5 / 6.1 / 0.4) * (1 - (0 / 6.8 - 4) * 5.9 / -4.3) / 312.209 * (2.43 * +9 + -0) * 9 + (3.9 / +(5) - -+1.3 / --8.0) / 0.897))',
 '((+(83021.85 * -1 * (7.3 * 9.0 - 1.9) * 4.55 * 5.7 + (-2 - 7.4 - 0.3 + 4.1) * 560.501 + +34 * (3.1 + 9.5) + 84 * 7 - +0 * 1.6) - 1.2912 - 6.9 * +(6 * +4.1 * 9 * 2 + -4.8 + 2 * 8 + 8.3 + 2) * 8 * (+2.4 - 9 + 3) * 4 / +1.7 + 5))',
 '((85.041965 * 241.071 + 48702.56 / +(-86.0 / -(1)) - -+(+2.2 * -9 - (5) + 6 / 3 - 5 + 3) / ++067 + +--297 / -++24 + -(5 - 0 * 0.4 + 3.1 + 1) * 148 + -149.527 + 3 / 43 * 3 / 8.2 * 5.2))',
 '((6691 - +((5 + 8.8 / 3 + 3 + 1) * 037.6 / -+4.5 / (6)) / 81.161 + 1 / (5 * 77 * 9.3 * 3.3 - 98.63 * -4.1 * 8 / 6 - 7.5 + 9 + 7 - 5) / +4 * 1.3670 * 8.73 + 321.0 * +8 * 8 / 2.27 / (4.1) * +9))',
 '((7 - 3))',
 '((+55740 * (-+(6 * 6.7 + 8.4 - 3.7) * 47.2662 * 8 * (4 - 6.8) / +0 / 9 * 8 - (3 * 2.6 * 3.5) / --5 + -3.32 * 5.3 / 3 * 0.5) / 351 / -4.5 + 90.485 * (-8.93 * +(5 + 8.9) / 45 / +3 / 8 / 9.5 - -+3.4 / +3 * (9) / 2 / 7.0)))',
 '((-++5 * -05.029 * +-(47.9 * 2.5) - 122 / (+8.06 * 75.6 + 85.4 / (0 - 7.3) - -(4) / 6 * 8 * 2.5 + 7 * 6) - 7))',
 '((-((+9) / +9.8 / 83.0 / +(1) * 7) / -((+8.3 + 9.5 / 0.7 - 5.7) / 2 / 15 * (6.1) * 5 * 1.8 - -21 * --4 * 0 * 1.5) * +0 - 7 / (339 - (6.7 / 3.5 - 3.2 + 2.5) / +2.0 * (2.5))))',
 '((59.4 + ((0 + 9 + 6 / 0 - 6.9 + 8) + --+0.8 + (0.4 * 9.7) / (5.4 - 5.9) * +4.8 + --2.3 / -8.8 * 6 + (7) / 7 - 5.4 * 7.5) * -8448.0 / 58.4 / 4.53 / -3 * 7.0 * +-1.2 / 8 / 0 / 5.3 + -40424 + (62 * 44 * 4.4 / 2 * 0.7 - -9 / (0) * 9 + -2 * 6 / 0) - +8 / 5690 / -+(6.9) * ++7 / 0 + 0 / 1 / (3 + 0.2) / (3) - +34.4 * (6.2 + 0.8) * (1)))',
 '((-+7.5 - --((1.8 * 9 + 1.4 - 2) / +-7 * -9.8 * 5.9 / 6.1 - 55 - (3) / 9) * 08.25 + ((-9.7) / 2.82 - -6 * 7.61 - 77.4 * -2) / 4 * 3 * (5.2 * 6.6 / 2.5 + 3 + 8 + 6.4) * +++1 / (8) / 7 * 1 / 6))',
 '((9 * ((11.8 * -7.0 * 3.2 / 4 + -9 - 9 * 6.6 - 8) - 3.1 - -9.9 + 9.1 / 5.1 / 8.3 + 5.8 * 7.7 / 0) / -+--(7 + 9.3) - ((09 / -6.3 * 0.8 / 4.4) * 87) / +((6.7 + 0 - 1) / (7) * 1 * 2.6) * 0408.6 * 7 / 270 - +-2.45 / 1 / 4 * (1 - 4.7 / 2 + 1 - 4.9) / 407.68 - 24.7 - (+(3.1) / +2.2 * 4.0 / 0) - (-0.4 * 3.5 / 6.9 + 9 * 4 - 5.3) * (0.5 + 0.1 - 3) * -+9 / (9.4) - 0.6 / +2.0 * +3.0 * 6.8 / 8.9 - +9.2 / +9.5 + (3.0) + 2.2 * 1 - 8.5 - 4))',
 '((-1.3 - (57987 + 1560 - +57.06 * 5 * 1.7 * 0 + 09.91 / 3.1) * ++(37 - 2) - 5 * ++74 * 71400.3 * +(3.0 * 7) / +(3) * -1.6 / (3) / 4.3 / 7 - +-(7.9 * 4 * 1.9 - 9 / 7)))',
 '((+(-+09.092 * --7.70 - 70 / 00 * --4.6 * 4) / 0.59 + +23 + ++(--8 * 4.1 + 7 * 5 * 7.4) / 8.2 * (8.90 * (5)) + ++-1 + ++580 - +++4.0 / (4 * 4 + 8 - 1.8) * (1 + 3.5) * 8.0 * 1 / 4 - -(0.7 + 2) / 81 / (1) / 9 / 0 + -5.0))',
 '((-((-5.4 + +5.9 + 4 / 3) * 66.1 / (4.4 + 0.5) * +6.8 * 5.9 * 7 * 8) * -(8 / 777 - 405 / (4.6)) * 9.296 - 9))',
 '((0534 * (-3 * (-7.8) - 5 - (6.3 + 0 + 5) / 1.9 - 33 * 1)))',
 '(((+-+05.91 * ++++1.4 * (4 * 8.7) * -2 / 9.12) + ++681.80 * 37.828 - 9.7))',
 '((+1))',
 '((40.3 / +84.8 - (-0180 - 1 * +0.99 + -6 + +-7 / +9.2 / 0.9 / 9.9) * -1.430 / -+4253.5472 * -((4.1) / 3.9 - 6 - 6.3) + -4 - 2.6 - 4 * -8.95 / 71.43 * 5 - +-41.65 / -(7 - 9.7) * 5.21 * (1.8) * 3.3))',
 '((--(+5 / (5.7 - 6.2 + 9) + 416 * 20.2) * 13 - +-(4 / 6.6 + +7.4 * -2 + +3 - 0 * 8 - 6.8) + 688))',
 '(((-7 - 7.26 * --(9 + 6.7) / +-(1.5) * +8) * ((0 - -7 + 6 / 1.1 - 6.9) + -++6) * 5.829 / ++58.35 - (+--(2.6 + 1) + -89 / 7.406 / (2.9) * 3.4 - 0 * (6 + 1)) * +4 * ((2.9 / 8 - 9 + 7)) * 9.15 * 07.68 / 40 / -+1 / +4 + (2.32 * (0.3 / 6 + 6))))',
 '((++8.00 * +8.23 / 1857785.2 - -+2.978 * 0 - (+-(1 + 7) + (7.4 * 6.7 - 0.2) * 78 * (5.6) * 2.3 * 8.6)))',
 '((79 * 4.541))',
 '((2 + 739 * +--0 * -+(8.8 / 3 / 9)))',
 '((5838))',
 '((10 / (+6 * 2556 + +7.66 * 5.8 * +(6) + 5.5 * 51 + (9.8 + 3.5) * 4.2 / 1 * 3 + 1.3 - 3.8 / 5.7 - 6.3 - 9.8) * -++825.0799 * (-6 * 3 / 8.1 / 4 * 3.8 - (1.2 + 2.6) + 9 * 1 - 3 - 8.5 - 5.8) + 667 / 2.8 * +-+6.9 - (3.0438 * 4.359) * ((2.9) - 2.5 * -4.9 * 2 + 0 + 6.2 * 1 + 6) * 8 + 33.82 * --41 / 67))',
 '((+--28 * 38384 * 0 / ((4 * 1.6 - 6) * 7.7 / 1 / 9 / 5.0 - 03 * (8.3) + +1 - 3 * 3.4 - 6.5 - 0.5) - 6 / -((6.7 - 0.9 + 2.1) * 2 / +4.6 / 0.1 - -7.3 / (4) * 0) / (140.798 * ++4.9 - +(9.7) / 0.5 / 9 / 2.1 - +7.2 * 6.9 * 6 + 0.7 / 9)))',
 '((((0 * (9.4 + 0) + -+2 / +4.3 / 6.6 * 6 + 3.2 / 4.6 + 4.3 * 8) * +0.2007 / 9 - 9 * (-5.2 / 0 + 7.6 * 9.2) / 8.6 - 0.0 / (0.3 / 4.2 - 7)) - -+036.3 / 252.6 / +7.00 / +++(5 - 7.5) / (3 / 6 + 9.3 / 0.1 - 5) / 7 * 79.11 * 3.9 / 1.1 * 2 - 41.3 - 4 / -+1.79 / -(2.7 / 2) + --+(7.9 + 6) - +(6 + 1 - 4.0) / 8 * (8.4)))',
 '((+((+-8 / 4.3 + 4.9 / 9 / 5.9) / 27.2 + ++8.84 / 78 - +(0.9 + 2.9) / 1.57 / (9.5) / 6 * 8) + --7348.726 * +38675.7))',
 '((+30073796.6 / +0 * 8.1 * (4 * 60 + 8 + -2.3 * 1.1) / -7.3 / 8 - 1.93 / (15 + +(4.4) / 35 / (3) - 4.2) + 81.0202 * 1424 + 1 + 30 - -482 / (7.7 * 7.1 - 1 + 4) * -+4 + (0 + 8.1)))',
 '((+0 / +41 + 6.047 / ---((4.5) / 4 * 1.8) - 56.76 / 1747 - 0 * 0.294 / -8 - (18.33 * -5 * 0 + -3 / 0.0 * 5 + 1 * 5) * +(2 - 6 + 6) / +3 / ++2.1 + 809 / (0 / 9 + 7.3 - 6.1) / (6.9 + 5) / +9 / 9.5))',
 '((+-+(4.7 * (1.9 - 3) * 5 * 2.2 * 7 - 74.4) * -1 - -7 / 9 / 1 * 3 / +-(5 - 3.7) * (4 / 5) * 24 + (2.9 - --+2 * (0.6 - 4.2) - -6 / (6) - (9) * 6.0 * 3.2 - 6 * 2 - 5 - 0.3) - 8.5 / 973.96))',
 '((90062403.985787 * 8574 + --425.5 + 108.1 / -((7.2 - 8) * -0.4 * 9 / 1.1 + 4.5 / 3 / 9.0 - 2.0 * 5.0 - 6 + 6) / (63.3 * 4)))',
 '((30 / (-((5)) + 6.4 + (1 * 3.8 - 4) * 49.1 / -1 * 7.5 / 2) * -86.7 * +329.3 * (49.00 / 6 * 7 / 1.3 - +1 + 7 * 9 + 5.7 + 0.3) * 1 / 4.83 / (1) / -9.2 * 3.0 * 4.2 + -5583 / (-421.39) - --+692 * 50.95 * 646.2 / (+4 / 9 * 5.4 - 7.0 * 7.2 + 0.5 - 5) / -(9 + 4) * -4 / +8.6 * 7.1 / 3))',
 '((--6 * +5 - --1.6))',
 '((+1 * (88 + (+7 / 9 + 9) - 89.0 / +(4) / (1) / 2 + 15.03 / -6 * 5.7 * 5.7 - (4) / 3 - 5 * 3) * 2.311374 / +6.71791 * -0.4 * 551.9751 * (5.9 * 0 + 2.2 - 9.3) / +7 / 0 / 0.9 + --+6452 + (-+3.3 + 7) * 4 * 94 - (3.4) - +-7.9 * ((1.1) / 6 / 8) * 7.9 / (4.3 + 2.3) * +8 * 6.5 / 6))',
 '((+(828 - 2.34 * 13.9 * (3 + 0) - +(9.4 + 8) / +4 * (9.5) * 6 * 6.4) / +-((5 / 3.0 + 8 + 5) / (9.4 - 7) + +(4.1) * +7 / 6.9)))',
 '((5 + +++925.190 * 241.0 / ++803.8 / ++88 / +991 / 2))',
 '((-(2.7 * -(0 * 5 + 6 - 0.5) * 64.947 * (0 - 8.1) + 823)))',
 '(((99.928876) * +9.64 + -2910 - +-+-2 / +69923 * 9 * (-2.6 + 9.4 * 3 + 0 - 4) / 97.9 + (8 * +-8.9 / (1) * 5.8 + +-4 + +4.2 / 3.2 / 3.9) / +1577 / 81.78))',
 '((4))',
 '((53660.3))',
 '((-((65.5 * 9.6 - -8 * 2 * 1.6 - 5 / 9.6) / (-1.0 * 3 / 1.1 - 7.3 * 7.6 - 8.2 - 8.8))))',
 '((750 * +4 + 8))',
 '((7.675 + 0 * -(-(4 - 5.3) / 41.8 / (9.3)) / -1.5 / -+-(9) / -54 / 7.530 + --4))',
 '((168.971))',
 '((+4 * 8 / (955 / 2 / 37) / 9.5 / 33017 / (8.1 / 9.1 + 8 + 8.4 - 0.4) * 9.3))',
 '((318 * 02 - (+256.015 - -347.0 * 5.483 - 3.998 * 44.7) * 23 / -48.0945 * (++4.6 / (3.5) * 1.4 / 6) * +1 / 0 / -2 * 6.0 - 2 / (15 / 7 / 9.1 / 5.5 * 9.2 + (6 + 6.8) + 4.6 / 2.8 - 2 / 2 - 6.1 - 9.4) - 4.60 / -6.3 - +028 / -3 / 251.2 * 6.09 / 6.3 * 1 / 3))',
 '((2 * +6 - (8 / 8251.5 - +123.1 * +94.1 / 0.54 - (5 * 9) + (2 + 8.6) / (5) * 6.8 - +9 * 3 / 0.2 + 4 / 4)))',
 '((+1 + +(6.5280 * 93.29 - +(5 - 8.4) * --8.2) + (-+-+1.4 * 13 / +3 * (9.2) * 2 / 8.5 - -60.6 * 6.7 * +0 * 1.1 / 2) - +((9.9 - 6) / 6 * 4 * 8.2 + -8.8 * 4 + 9 * 7.4) * -26 / -(2 * 8.3) + +1 * +(9.2 - 0 + 6.1) / ++9.2 + 79 * -+7.6 * -7.1 / (0.7) * 9 + (9.9 - 4.3 + 2) + 29.62 / 4.1 + -2 + 4 / 2 + 3.0 + 2))',
 '((+0 / (64136 * (3.4 / 4.3) / 17 + (-7 / 8 / 2 - 0 / 0 - 8) / ++8.8 / (5 + 7) - 3.92 / 84 / +0 / 6 * 4 - +5.4 / 3.5 / 7.6 / 3.7) - 52460.0 / -+-39 * ++5.0463 - (+-(1) / 8 / -1.0 * (2.0) / 8.9 * 1 - (1.8 + 4 + 1) * -9 * -7.8 * 0.3 * 0.7 + ++8 * (7.9) * 7.5 * 7.2 + +7.9 / 6.0 / 3.9) / (-(5 + 5.2) * (8.8 - 2.0) * -8.8 / 4.4 - 1.5)))',
 '(((46.43311) / -((-9 * 6.2 * 2 - 0.1 / 6 - 5.0 - 3.9) / -+(3.2) + -+4 * (7.5 + 7.6) - (5.5 - 1.0) / 2.5 * 8 * 8.8) / ((4 * 5 - 1.6 / 9 + 0) / +11.24 / (8.9) / -9.1 * 7.1 / 6.0 - 683.0 - +5 / +8.7 / 0.4 * 4 + +6.0 / 5 * 0 + 8.0 * 6.3 - 6 - 7) / +6.0342 / +((1.5) / 5.7 / 2.3)))',
 '((07.0 * (2.862 / (3.0 * 9) - +15.9 + (7 + 2) + 65 + 7 * 8.2)))',
 '((9 * +34 - 31924.3 / (5 * +-4 + (6 * 2.9 - 1.3))))',
 '((-1 * 5.8 - (+24.8) - 651 - 23 * +5 + 3 * 5.2))',
 '((109.379690 * 71 + ((++4.6 / (6) / 6 + -1.0 - 1.1) - 473 - +46.2 - 48 / 8 / 9 * 2.7 + 0 * 8.4 / 1.7 + 3.2 * 9 + 8.0)))',
 '((5 * +(++2.5 * -+-3 / +0 * 4.4 * 8 - 0.41 * 9 / 0.1 / 2) * (--59 / +5 / -(2.5) / 9 * 8.7 / 7.0 - (0 * 8 - 7 - 1.4) + -6 / +4.5 / 8) * 48.60 * (+(4.2) * -5 + +3.5) + --(6 / 4.65 - 91.7 / 2 / 6 - -7.0 / 8 / 0 + 5.2 / 7.5) - 91 * +43 / -409 - 2.5762))',
 '(((+3.6 * 3 / ---(6) * -0.76 / 04.40 * (5) + 6 / 3173 - 18.767 * (4 * 4) / (4.2)) / 6.0 - 4 - 5132.56 * (6 * (3) * +5.4 * 6 - -(6.9) * -3.0 / 8.7 - +4.3) + +1 / 8.04 * +4 * (5 - 7.2)))',
 '((55.27 / (77.6 / 6 * 621.1) / 9.1 / +9 * --4.6 / 5388 / (0 / 8.5 + 3) * -(6) + 2476.455 + ++-+(1 * 5 - 3.7) / (-+4 / 10 - ++4.3 + 9.2 * 7.2 * 2 - 4 * 8.6 + 0) / +((0) - 5.3 * 1.8) - 59 / -2 * 04.2 / 4 * (3 - 1)))',
 '((+(+++4.5 * -65 / 1 - +50.8 - (9 * 0) - 6 * +1.2)))',
 '((3.4305 * 1.08 * ((7.3) * 6) * ----(2) - (-668.7 * ((1.2) / 2.6 / 1)) - 9.306 / 56.232 - 1833.4 * ((8) / 1 * 5.0 * 2.4 + 9 * 6.0 / 8.8 - 7.8 * 3 - 0.3) * +481.6 * 14.5 / 6.63 * (4.5) * 0 * 5.8 + 93889.76 * 4.78 * +0.62 + 5 / (2.1 * 8.1 - 1.1 + 9.3) / -(6) + 15.85 + -8.2 * -2 / 5 * 1))',
 '((+++16.80846 * 90754.1 * 165.560))',
 '((+-+2.40 / -+0 - ((-(8) / +0.0 * 4 * 2 + 9 * 7.5) / (-1 / 9.8) / -1.73 * (2 + 1.1) + 6951 - 7.9) * 7.043 / 9 * ((6) - -1 * 1 + 1 * 1.3 - 3) + 5.86 * 7.5535 / 75 - 344.392 + 2.92 / 9 / 12 / -+0.8 + +175.21 + (3.2 / 1.4 + 1.5 - 6.1) * 1 / (7) / 1.9 * 5 - 82.0 * 6 / 3))',
 '((+3.9 / 2 / -4 * -719.1 * (83.5 + 9 * 2 * 2.6 - 8.2 * 1)))',
 '((((526 / 43 + (0.7) / -1.8 / 4.8 / 0.1) + 9 - 52 * 1 / 12.3 * +7 + +28.3 / +-8) / -+(629.3) / -+82.2 * -6.9 / -46 * 68 / +46.20 * (8 - 7.5) - +3840 * 160 * +-(-8 * 1.8 * 2.4 - 4.1 + 7) + 263790 * 27.584 * -+2 * ((2.2) / 6.4 / 1) + (6.977 + -(7.7) - 4 * 0.8 * 9.5 + 0 * 0.5 - 5 - 2) / (++9 - (9) * 6)))',
 '((29435.5 * ++(99 / +(0) / 5.0 - (9.0 + 9) / +0 * 8.6 / 2 - -7 + 6 * 5.4) / ++88 / 4.46))',
 '(((9 * +-4.57 / 819 + ++2 * (+6.6 + 1.0 / 8) * -(8.1 + 8) / 30.97 + +++5 / +(5.9) / 5.5 + -9 * +0 + +5 * (7.5) * 5 / 5 + -9 * 3.6 / 0 + 7 * 1.2 - 0.2 + 3.1) - -5.3 - 00 * -+(+2 * 7 / 5 + 1.4 * 7 + 8.0 + 3.9) - 8540 * 7 / 7 - (90.44 * (5.6) + -0.8 / 7) / +02))',
 '(((17.4 + -(+9 - 8) / 3879 / (5 * 1 + 0.9) * (1 + 6) * 0 + +2.325 - -(9 - 0) / +-4 * 9.2 - +(0.0) / +5.9 / 8.9 / 1.9 - (4.6)) - (-1.83 * 5.62 * (4 * 2 + 8.7 - 6) + ++65.30) / +458 / +2 / -718.2213 * (+4 + 0 * 6 - 4.9 + 2) * +41.0 * +(9.8) - -6 / 315 / 1.3 * (-8.0) - +(+3.3 * +5.0 * 0.3 / 5 - (1.3) + 5 * 9.6 + 9.2 - 9) + +1.2006 * (2 * 7.2 * 2.1 + 0 - 8 + 4.9) * +-+7.1 - (-2.7 / 4.5 + 4.4 - 4.2 + 0) / 8 / 6 / 0 / 4.5 * 0 - 07.7 * 2 / 3 / 4.4 - 3 / (9) / 1 * 9 + 5))',
 '((93.93 / 872615 / ++4312.5))',
 '((5 * 92 * ++0))',
 '((12.12 / -+44 / 7.2 / 5.7))',
 '(((+((8.5 - 7) / (9) / 1.3 / 4 + (5) * 6.2 - 0 - 7 - 8)) / (1.84 / 135) * +25 / ---0 / 1 / +(1.7 / 6 - 5.8) * -+-2 / -(5.8)))',
 '((+++6.39 + (990 * 4 * 670 - (2 - 9 * 1 + 5 + 2) / +(0)) * +25011.9))',
 '((6867 * 05.6 * 8636))',
 '((+-585 / (72.3 + ---+7.2 * --2.8 / -5 * (5) * 5.7 * 5.6) / 2 - +-06.50 / 46716 * 4 / ((6 - 8.6) * +1.3 / 7.9 * 9.0) - ((-7.8 / 4.8 * 2.3 + 9.8 * 7 + 0 - 9) * -82.26 * (5.0 - 4) + 72.36 / -2) / +34))',
 '((28 / 4 * +8.8))',
 '((+-(-09 * -5 / --0 * 8 * 3 / 7) / -+0.358 / +-8974 / (5 * 53 - 2 - +6.1 / 6) * 5 - (((2.0 + 4) / (8.0) / 1.4 * 0.0 - -5) * -20.4 / +(9 + 4.5) / 8.51 / 0 / 2.6 / 6 - (9.4 * 3.0 / 7 - 5.4 * 0) * 368 + --(8) + -1 / 0.4 / 4.2 / 7 - 7.7 + 6.2 * 6 + 5.0) * +-+2.598 - -+324.84143 * +-+-+-5 + 4.6 / +6050.0 + 4 - (+8.1 / 3.0 / 5.6 + 5 / 0) / 5.9 / 3 / 0 + +0.77 * ++4.5 / (6) / 7.3 - 7 * 4.7 * 4.6 - -1 * 2 / 6.3 - 9.9 / 9.2 - 2))',
 '((+970 * ((8.27 / -1 / 0.4 / 0) + 7455.4 * -(6.2) - (9 / 6.8 + 8.9 + 8.7) * (3 + 4.2) * 8 + -1) / ---+558.4 + 06))',
 '((+(332 * 2.9 * 172 / (5.9) + ((0.5) / 4 / 2.4 + 1 - 7 + 1.9) * -++0 / --3.0 / +8.0 * 7.7 - 01.8 * -4.6 * -7.8 + +(5.0) * +5 / 1) / 4))',
 '((43871 / (-92.8 * -220 / 96.7) / 722 * 66.99 * -159 - ---++++6 / 1.7 - ((+7.7) / (7.8) + 0 / 1 * 2.6 * 0 * 1) * +0.2 / (++2) / 7.6 * -75 / +5 * 7.2 + -((1.5 + 6) - +8.3 * 4.5 / 2.2) / 7 - +93 / 1.30 / 7 * --5.5 / -4 * 2 / 6.2))',
 '((1 * 4 / (+-(9 + 9.1) / +-4.8 + -4 * 0.5 * +2.7 - -(7) / -9.8 - (9) / 3 * 2.2 - 8 + 6.8 + 7.1) / 459680 + --+7 + 182.7 / -++59.823 * +54.7183 - ++5.6766 * +(-0.6 / 0.9 + 6.8 / 5 + 7.5) * 6 + +3.0055 - +89 / --(5.0) / (1 - 4) / (8.8) * 9.5 * 5 + 41.405 * ++7.4 / +1 + -2 - 0.4 * 1 / 3.5 - 9 / 2.0))',
 '(((+-((3.8) - 5 / 1.2 + 8 + 8) / 4.5 * 29) - +(7333.3) * ++01.87 / +828))',
 '((9.94 / 1.7 - 43.8 / 6 * (6 + +-4 - +1 * 6 / 6.9 - 1.1 / 8)))',
 '((4.125 * (4 * ++8 * (0.4 + 3 + 8.6)) + +4 / -(-(1.6)) / (36 / +8.3 * (1) * 3 * 1) - 52.1 - 127 + (16 / -9.1) * 3 - (4.8 * 2.5 * 8 + 4) / (2 * 9.8 - 3) * (2 + 7.2) / 4 / 6.5 / 4.3 + +4 / -9.5 / +0.9 * 2.0 * 3 + 53 * (3.7) / 8 - -9 * 3 / 2.8 + 7.2 * 1))',
 '((33.93 / (2 / (3 * 0) * ++5.4 + --(1.9) / 90 / 9 / 5.8 + (7.1 / 3.0 + 3.5 + 6.0) - (7.9) * 1.0 - (6) - 0.2 / 4) / +6 - ((4) / 6906 * 6.7 / (7.1 + 6)) * 1.6 + +2 * -+(-0.3) * 80080.97 / 9 * 88.2 * -0.6 - --(+3 + 5.4 * 8)))',
 '((4037 - (44 + ((3) * 1 / 7.6))))',
 '((-5 * +--+2.8 * (---4.8 / (3 - 1 + 2) * -(1.2) * +8.1) / +-(4.6 - 8.7 * 3.8 + 6.6 + 6) / 398 * (-3 / 9 * 8.0) * 62.419 * 9 / (3) * 1.3 / 6 + +3 / 42.914 + 335))',
 '((1 * 87.58 / -9 * (---3 * 00 * +2.8 + 6.8 / 2 / 2.7 / 2)))',
 '((0.7 / 2 / 561 / (6.553 / 92 * 4 + --9.6 / (6.8) / 7.0 * 6 - 4 * 7.4 + 9.5 / 0) / +6.8524 / (+5.3 * 6.1 - 6.2 / 4.3 - 1.8 - 5) - 6 + -867.423201 * 1.0 * (5 / 3.4 - +0.4 * 2.6 / 7.3 + 5.1 + 4 + 7) + 6 + +-947.16 - 965.1 - 72.2))',
 '((13.6 * 2 * +(-2 / 0.6 / -4.3 / 8.7 - 88) - -((-4 - 8.1 * 0.0 - 0 + 1) / (4.6) / (0.6) - 3 * (0) / 5 * 6 * 9) / (+731.2 / -04 * 7 + ++7.3 * 41 / 1 / 8.1 * 2) * 8.77807 * 06 + ((+1.3 + 4) / +(9.3) / -+3.4 / 1 / 6.4) / +-(3.7 - 4.3 - 3.8) * 44422.67 * 211 * -8 * +0.2 / 2 / 6 - ++(-8 + 7 / 6.2 + 3.5 - 4) * +((3.8) * 0 / 0.7) - (+2 * 6.0 / 9.9 + 5 * 6 * 3) / -7.430 - -913.3 - 90))',
 '((-9 / -(--(0 - 8) / 2 / 1.42 - -+(1.8)) / ++10035 / +(-5 / -3 * 5.7 * 2.2 - 4.7) / ((0 - 8)) / 7124.416 / -+(8) * 92))',
 '((-++-++1.95 * +(5 - 9) / (5.6 - (9 / 7) / (3 - 2) * +1 / 1 + 41.9 + 4.8 + 7.4 * 8 - 7 + 1.5)))',
 '((4.6 / -7.2 / +--5 / 5 * 0 - -5 - ---((4.8) * 5) / (-1.6 / -3.8 * +8 + 0 / +8.6 / 8.3 * 1 + (3) * 2.0 * 3) * (+4 * +8.7 * 3.6 + 8 / 2 * 2.3) * (8 * 5 * 2 + 4.2)))',
 '((++((-6 / 2.7 * 3) + 1 - (6 - 1.1) + 8 * 3 - 3 - 6.9) - 5.3 / 656103.7 - +9734.60 * 36.00 * ((1.3 - 5) / 9 * 1.1 - +2 / 8 * 1.2 + 4 + 8) + +(99 + (3) * 1.8 / 1) + 0 / -+--3.7 * +9.86 / +4 + 63 / --8.0 * +5.4 / +0.3 / 4.1 / 6.3 + --6 * 3.89 * 6.0 / 6 * 0.2 - -7.1 / -8.8 / 4.7 / 4.7 - 3 / 2 / 8 - 2.6 / 0.1))',
 '(((+(--4.3 - +3 * 2) / +(7) * -+94 * 4.7 / (8 + 8) / +9.3) / 4 / +-((1.2 - 1.5) * -8 + +3 / 1.9 / 9 + 0 - 6.4) + (+-++-9.0 * (4.1 * 8.8 * 0)) * 0.19 + -261 - +(+4.4) / (+-0.9 * 6 / 9) + 7.41 - +-(9.4 - 6.0) / -(8) + -42 - 67.0 * 9))',
 '(((02490 / 3238.1 * (3.7) / 4.8 * (2 - 3.8) * 6 / 7.7 * 6.0) * -1))',
 '((((343 / 9 - 6.51 * (3)) * 32892.3 / +(9.5 / 6) * 6 - ++-(8 - 5.5) - 5 * (4.2 - 2 + 5) / --3 / 7) / +7 / -6.415415 * 64.7 * 07432 / 0.4 * (6 * 2.1) - +4.74 * +14 / (904.5) + 0.2506908 * ---5.198 - 40 * ++2.8 * 6 * 8 * 2.1 + 1.4 / 675 / 11.750 * (6)))',
 '((+((+9.7 * 8 * 0.8) / +-6 * 6 / 7) / 0635.42 * (((1.0) / 1.6 + 0.9 / 9 + 4.9 - 2.6) / 873) - 5 + -1 + (2.601 * 68 / -1 * 2 * 0.8 + 85.63 + (7.2) * 1) * ((1 - 3.3) / (6.0) - (7.7) * 3.7 * 9.2 - 7 * 1.3 - 5 - 7.7) + -+(6 - 8.3 + 5.2) * (9.2 / 9 * 5 + 2.0 - 4 + 7.2) / 124 / ++4))',
 '((+91 + -8.8 / --(47.3 / 1.8 * 2) / 45))',
 '((-+1905 / (28.479 / 37) / 5 / 2))',
 '(((33) / -(((3) - 9.0 - 5 - 7.6) * +(5.4 - 1) * 9.5 / 7.2 * 0 / 9.9 - -2.3 / (9.7 + 2) / 5 * 9 * 1 + -0 + 9.3 / 1.5) * +-39 * 86 / 94 / +(0.3 / 2) + -759.18 + +8.9 + -+(7 * 9 * 3.1 + 9 / 0 + 8)))',
 '((+-(7.7 / (3 * 3.9 - 0 - 5) * 54.2 / 0.8 - 621 - -(2.7) / -1.6 * 8.8 / 0.6 + (8) / 0 + 2.0 / 1 - 6) * --1 - -06 * 8.39 * (9.5 / -7 - 7.03 * (5) * 8 + 4 / 6.2 - 0 - 8.5) / (-3 + 1.9 * 4 - 6.7 / 3 - 6 + 0) / 6500 - -18841 - +-2037 / +19 * 3.5 / +(6 - 8) * (4.2) / +4 * 2 - (--5) * 4.858 * +(5) / 7.80 / 3 + 5 / +32 / 6.13 * -8.0 - +(6 + 4) / 74.51 / +0 * 7 * 8.4 + 3.9 + -6.6 * 7.1 - 5 / 2))',
 '((-(--+-6.8 * --4 - (9 + 1.3 / 0.4 - 5 + 9) * 28.2 - 4.18 - --2.0 * 1 / 4) * (--7 / (1 * 9.0 * 6 + 9 * 0 + 5) + 0.1 / 5.39 * 48 / +0.6 - 9) / 855.7205 / 1.2 - -(+-56.9 * 147 / 24.6 - -74 * -+9.8 / 9 * 4 * 8.5 - (3.3 + 1) * -0.2 - +9.3 / 8 / 3.9 + 2.7 * 7.9 - 7.6 - 7.9) * 73322 / (+02 * 0.6 / 5.4 / 8 / 5.9) + --+83.20))',
 '((+70 / ((+5 / 6.4 * 6 - -2 * 8 * 8.6 - 7 * 4.8 - 3) * ++(6.2 + 7) * 3 * 1.35 + +(6.1) - 7.829) / 0 / 0 * ((6 + 7) - -9.8 / 0.5 * 0.6 - 8.7 * 4.5) / 2.1 * -(6.6) * 7 - -0 + 9.5939))',
 '((1 * -(29 * 3 / (0 - 9.6) - +(4 + 4.3) / (8.4) * +5 * 7.6 / 8.3) * 646330.113 * -3.901 * ++(7 - 7.7) * 1.0 * +53 - (-9.6 * -(0) + 8 / -+(2) / 05.26 / (7.7) * 7 / 5) * -4 * (1 / (2.0) * 6.7 + 62) / -076.37 / (4.8 + 8 * 3)))',
 '((+8))',
 '(((+4201.44 * ++1.2 + 7.9 / (6.4 / 8 + 8 / 2) / 3 - 0 * -+5.3 / (8) + 2 / -+3.5 / (5) / 9.3) - --+51.3 * 0 + -9.351 * 71.3 / (0 * -0 / 3.5 / 5) * -7 - 1.672 / +6.022 / +0.7 * -(4.4 - 7.4) - (35.4 * 3.2) * (0 - 9 * 2.6) / 0))',
 '((((920.89 * (6.2) / +0) * 55.8) - (1 * -0.27) / 3.8 * (2.0 / 91.4 + 69.25 / -2 / 0 / 7 + -9.0 / 3 * 3.5 - 2 + 1 - 8) + -(97.080 + 6.6) / 18240 + (4 / (6) - +(9) + (1) / 5 * 4) / -(1 * 9.3 - 6.6 / 8) - ++5.6 * -5 / (5.5 / 8.3)))',
 '((17 / -02.8 / +0.94050 - 8 + +608903 / +24 * -08.9982 * -+-(0) / (1.4 / 7 + 9 + 7) / (9 + 4.3) / 5.1 / 2.3 + 2.4 * ((7.1 + 9.5) / -2 * 2.9 + +8 - 4 + 2.0) / 3 * ++(7.2) + 773 + (+5) + +1.6 / +(6.3) * (1) / 9.7 * 5 - -+6 * 3))',
 '((((302 / (0.0 - 9) * (7.5) * 2.7 * 5 - 6.88 * (3.5) + -0.7 + 7 / 1.3 + 7.3 - 8.5) / 2 * +(7.2 - 7.7) * 598.372 / 76 + 5 * -0 / (7 * 3 - 9 + 6) - +5.862 * 1 + ++8 + +-8.9 + 7.4 / 8 * 7.8) * ---9.390 / +2.9 / ---(2.3 * 9.0 + 4 - 3) * -+309.026 * -(2 / 8 - 3.2 - 5.1) / 9 / (9 - 7) * 6.0 / 9.7 / 4))',
 '((59 * (-2 / (+7.4 - 5.2 / 6.0 - 1) / -(4 - 6) * (1 - 7) * 7 + 2963.40 / --(6.7) * 0.5 * 8 * 4.1) / (+-(9.0 - 4.4)) + (--34.587 + 4.5) - -6 * -55 + 4645.4 / 5.7 * 52.7848 * +3 + 239 * +(2.6 / 8.3 + 4.9)))',
 '((4 * 5.57971 * 61.3 * --+4 * (38 * (1) * 9.0 + -5 * 7) + ((-+4) + +497.9 / 241.633 - (3.7) + +7 / +1.8 / 2.3) + 55.922 - (++0 * +(3.8) / +1.7 * 3.2 * 9 + +(4) * (9) * 5.2 / 4.0 + +1.8 - 1 * 3.7 + 7.2 + 4) / 7.3 / (-4.9 * 6 / 7.5 - 3.9 * 1.3 - 5.8) + ++6 / 5 / +++0 * 4 * 2 / 4.7 - --(3 + 2) - -(3 + 8) / -2 / 4.9))',
 '((---(-77 / 49.1 * 1 / 4 * 3) * -3.6 / +++2428.1112 / 0 * 75.5 / ((3.6) / 0 / 1.8 + 4.6 * 6.8 - 2.0 - 9.6) / --1 / 7.62 / 8 + +50.344 * 28 + -42.7))',
 '(((((4.9 / 7) + -+5.6 * +0.1 * 4.6 + +3 - 3.9 / 7) / 5.25 + -5684.946 / +(5.4 / 2.2 - 1.6 + 7.3) * -+8 * (5 + 8.4) * -2) / 808 / -541.11 / 2 + 9.9 * 06746.91 * 2850 - 3.68))',
 '(((++3.5 / -(9 + 0.0 * 0.6 + 2.7 - 9.3) * (4 + 5.0 - 1.9) * +(5.8 + 4.5) * 1 * (2) / 7 / 3.3) - 39 + ++-7))',
 '((+++3.3 / (+0.3 * +-79 + -750 / +-(5) - --+8 / 65 - -1 - +0.1 * 7 / 8 + 5 + 8.9 - 5) * +(+7 * -2 + 97 / 3 - 1.6 / 1.6 + 2.6 / 2) - 2.68))',
 '((7))',
 '((-(+(6.8 * 1.7 / 6.9 + 5 / 4.9) + --10.89 + -+-5.2 + 42.4 * 0.0 * 6 / 6.2 + -4.5 - 3.7 * 9 + 8.5 - 5) - +((+3.3 * 2 * 7.8) * 416 / +6 / -7.0 / 6.4 * 3 + 29.139 + -+4 / +3.0 / 1.0 / 9.5 - 6 - 4 * 7.6) / 372829.4 / ++7 * +(-4.0 * 8 * 1) / 8 * 96 / 0.05 * 8 + (05.9903 / (1 / 1 - 6.8) * -+0) + +9 * (+(7.3) * +6.9 * 0.0 * 4.3 + -8.5 / 7 * 1 - 2 * 4 + 5 - 2.2) + ((1.4 - 7) * 8.8 * 4.5 * 2 + (4) * 1 + 2.8 / 9.2 + 1 - 0) / (+0.0 * 8.4 + 1.1) - 1.571 - (1.3 / 1 + 5.4 + 2) * -+4.5 - 62.6 - (5) * 7.8 / 9 - 2.2 / 3.0))',
 '(((9 * 8 / +1.9 * +-6) / 3 * 3710.80 / 35 * -1053.0582 - ((58.11 / +5 / 4 / 7 - (5.1) * 7.9 / 8 - 2 / 2.5 - 1.5 + 1) * +645 * (1 + 3.7 + 4.5) * (5 - 8) / (2) / 9 - 8 / -+-1.6 / +2 + --7 * +9.6 + 25.4 + (0) / 3 + 9 / 1 + 9.5) * 4881 * 7 / +9 * (+7.7 / 9 / 6 - 6.2 / 5 - 5.8) - -963.4))',
 '((-67.0 / ---(+6 - -6.4 / 6.3 + 5 + 5 + 8) / 1.259 / ---8.943))',
 '((3.8188716 / -++-++-+7 * (((7.1) / 2 - 2 * 5) * 6.495 / 90 * 5) / (807 / -4.3 / (4.5) + 4.99 - -5.8 / 9.7)))',
 '((06.55 * +(-+(2 - 1.8) - +57.4 + +1.8 / +4 * 0.1 + (2) / 9 - 0 / 7) + -(++-5 / 8.9 * (3.9) * -7.8 * 3 / 7 - 650.242 * 83.4 * -4.6 + 5 - (1) * 6 / 4 + 0.0 * 7 - 0) / 74.48))',
 '((34.9 / ((41.9) - 3 + 8.1 * 3 / 4.5 * 5 + 08.1 / +9.4 * 0.4) + 7 / -+((2 - 3.4) * (0.7) / 0.5) / -+02 * -+5 * +538.7 / (4.4 / 1.4 - 7 - 4.1) * ++5.2 * 0.4 + (+(9.5 + 5 - 8) / -+(2) / +1.3 * +1.5 / 6.5 + -9.24 - +7 * (3) * 6 * 1 + (6) / 4 / 6.3 + 9 / 3.6 - 1 - 9.2) * (+(9.3) + 52.63) / (-(2.5)) * 74.35))',
 '(((320.2) * 8 * -7.16 / 4 * 329 - +4381 - -+(4.4 / -5.4) / 6 / 79 * -(5.2 - 9.8 + 7.2)))',
 '(((54.9 * +-+2 / (9 * 2.7 / 3) * (6.4 / 4 - 2 - 0) / 6 + --+(1.5 + 9.8) * -9.3 / +--7.9 * +9.3 - 6 + +92.11 / 12 - +2 / +4 * 9.8 * 6) + 0.00156801 / (38.6 * 26.055 + 00.451 / -1 * 0 / 2.9 + 9.60 / (4) - 1 * 9 + 1 - 2) / -+841 * 04.01330 * (-3 / 3.5 - 9.5 / 9 + 0 - 4.9) / -(0.7 - 7) - 6))',
 '((2.3 * (0.79 * +1.3 * 0.98 - (+5 / 7.6 / 5) / -87.53 / 48 - 18.836) * 385.0 * 42 / ((3 + 5.8) / +3.6 * 5.9 / 6.3 + +5 * 6 / 8.2 + 0.1 / 7.8 - 0.2) + +(-+-3.2 + +8.8 * (2.9 + 7.8) + -(8.8) / +1 + 9) * 1935 * ((1.0 * 0 + 8.0) / 3.1 * +4 * 5 / 2.2 - (3.0 + 8) * 9) / -9.2 + 7.4 - +-2.7578 + (+(4.4) + 4 / 8 / 6.2 - 7 * 3.2 + 4 - 0.7) * +(1.0 * 5.7 + 6) / 4 * -6 / -0 * 7.7 * 8.4 + (0.3 / 3.5 - 8 * 9.8 + 7.5 - 8.8) * +59 / (4)))',
 '((+1.12 / 8.4 * -3.6 * 93.65 * 0 * ++20 * 9 * -+8 * +4 * 5.8 * 9))',
 '((((-(4 - 8.8) / 28.53 / 7)) - 275 * -((9.0 * 5.2 - 7) * 3 - +(2.2) / +2.3 / 4.9) / 9265))',
 '((51.7 + +6 + ((+0.8 * 4 * 8.7 + 4.6) / 34 + ++(8.1) * +-9.8 * -4.5 * 5.6 + (5.6 - 0) / (6))))',
 '((--+5.48 * +4.895 / +21.3 * -764 - -5.4 * ((-4.2 / 5.4 - 4.8 / 1.2) / --+4.4 * (7 + 2) * +3) / 9728 / 8.63 / (4.7 * 7 * 1.9 + 8.3 + 4 + 5.2) + +9.4 * 859.776))',
 '((-(26.589 * (+2 / 0.5 * 1 + 0.8 * 4.1) / 302 * -(0.3) * +7.3 + -482.1 + -84.6 + (4.1 - 2.5) * 9.7 / 6 - -6) / 380.990 * 94))',
 '((-(+(3) * -2.3 * -6.2) / -7.9 * (92 - 877 + 8.43 * 2 + +0.3) + (94286 - +9.260 * 7 / +5 / (7) / 5 * 1.7) - 4.389 - 7180 * (9.34 + (7) / 1 / 8.4 + 8.9 / 2.3) / -2 * 946 * 2.2 * -1.8 / 2.8 - +75.79 + 3 * +0.3 * 09.1 * 9 * 6.1 - (1.1 + 0) * 4.77 + (0) * (6) + 5 / 9.0 - 2 / 9 - 5 + 0.2))',
 '((-3))',
 '((7 / -23 * (4 / 3.814 / -+5) / +(+2 / -8 - 1.3 * 0 / 5)))',
 '((6857.0 / (-7.2 / +-0.0 / 7 + ---+6 * 5.0 + -25) / 2.1 / 0 + 6))',
 '((1 + 2.59 + 3.5 - (++-4 + --0.7 + 1 / 1.5 * 4) * (-+7 * -2 + 7) / 8.5492 / -4.3 - 4.8 / 6722 - +(6.0 - 0.7) * 34.29 * +8 / -2.4 + (0 - 9) * 8 / +7 * 8 / 8.2))',
 '((0.1 * 8982 * +-1.5))',
 '((--657.02))',
 '(((+-0.6 + -7 / -8 * 0 / -+6.8 / 0 / 7.4 * 6.1 - +706 / 6.27 / (6.7 - 3) / +2 + (4.0 * 2) + 9.7 - 0 * 8.4 / 9.2 - 1 / 3) + 9 / 65407.7 * +37.8 / (-9.0 / -4 - (0.6) * 2 + 8 - 2.2 - 1.0) * 150.56 - -41))',
 '(((+(01.02 - 7.7) - -(0.0 - 1 * 2.1 + 2.6) / --18) * (+-+-+9.7 + +--+6.1 / 3 + 884) / -2.057))',
 '(((---48 * +4.2 / 3.1 / (2.8 * 0 + 0.7 - 7) / -+9.9 / 1.4 * 4) * 0.38 / (--5.1 * --(4)) * 92 * +((6) / 9 / 6.6) - -(--19 * (8 / 5 + 3.6) / 45.7 * 1.1 / 1.3 * 9.1 + -(8 - 6) - +(8) * (9.8) * 8 * 8.6)))',
 '((-7.8))',
 '(((59.21 / (56 * 0.7) / (3 - 0.8 + 0 + 2) / 97.974 * 3.7 / +9 / 7.8 + 9.2 + --0 / (7 * 4.0 - 8) / 50 + (5 * 0) / 6.36 / 4 + 0.5) * (01.2 / -2 / -01.5 * -(3) / 6.8 * 8.2 * 3 - 6 * 0.684) / +++4 - +7 / ((+1 / 1.1 + 0 / 9) * -(0.6) * 00 / -3 / 3 - ---9 * +-3 / +0.1 / 8.4 * 6 + 9 - -7 * 0 / 8 + 6 / 8 + 2.5 - 9.1)))',
 '(((--+(5 - 4 - 3.7) / -(+8 / 1.8 / 4) - +-+(2.8 + 4) / 17 / 2 - -(0.1) * (7 / 7 + 0) * 17 / 3 / 9 / 6.7)))',
 '((2.14519 + (103 * (6 / 6 / 6 - 8.4)) / 8 / +4081.4 / +01 / 226.8963 * -(8.5 - 6.6)))',
 '(((--+(5 * 6 - 0.8 + 1) * 34.1 / -+4 / 8.97) / (-43 + 878.0 - (4.4 / 2 + 4 - 1) + +-0.2 * +9 - 2 / 7.3 * 5 - 4 / 5.3 - 8 - 5) / 7 * (94 * 06 * +7.4 / 3 / 8.7 + (3.7) / +3 / 0.7 - 2.3 * 8 / 0.6) / ++276 - 0 / -2 * 002.29 / (72 + (2) - 6 * 5 + 8.8)))',
 '((-1.2 * -667 * 8 + (++89.9 / +7 + -+1 * +-+1.9 + 87.5 / (1.6 + 5.8) / 1.4) - -3 / 83.3 + ((4) * 34 * -9 / 5.6 * 7)))',
 '((09 / +(+(0.9 + 1 + 6.0) * -35.15 / 5.9 / -5 - -58 / 48.8 * +8.1 * 9.0 * 9 - ++5 / 8 * 6.6) * 8 / 166.90 * 8))',
 '((25 - (-+788.86 / 46.8 - (3 - 3 * 3) * 9.68 * (0.1) * +4.5 * 8.7 * 4.7) * 3.0 * +-6 - 3 * (+(3 + 7) * -0 / -8.0 * 7.0 * 8 + +7 - 4.7) * 99.39 - 0.244526 / 1.506))',
 '((-+(835.7 * -8.1 + -8.6 * 56.5 * (0) / 1.2 * 7.5 + ++7.5 - -0 * 4 + 5 * 1 + 0.6 + 5) * -4 - -5.4 / +-(1 / -1 / 4.3 - 4.8 * 5 * 8 + 9.7 * 5) * +(90 * 1) / +-6.132 - +0.55 * 663.99 * -(+9.3 * 4.9 + 7 * 6 - 6 - 1.1) - (-(3 - 8) / -+2 * 1 / 1.3 / 3.6)))',
 '(((51.147 * (+5 / +2.0 * 0.9 * 4.2 + (5) + 4 + 0.3) * 9.95 - 7 / -1 * 36 * 29.8 / 2 / 8.2) / 72.773 * 1.7 / 11.11 * +1 / (2.6 / 7 / 8 - 4.9 * 4.6 + 4.3) * -(3 - 0) / --5.7 - -6.6 / +19 / +(35.3) * -(0.2 + 9.9 - 7.0 + 9) + +76 + 2.63 * 0 / +72 / 651.92 / (5.1 - 0) * -6.3 - -((4.1) / 3.2 + 9 * 8 - 9 - 0.2) * 04.721 / 387 / 5 / 9.6))',
 '((--+145 + -920258.2 * -(4.8) * 1 / (33 - +7 * 1.4 / 4) / 56 - 09.596 - +-651))',
 '((0.2 / -+(135.85 - -9.9 / -8.7 - +1.9 / 9.8 * 4.6) / +642))',
 '(((19 * 57.7222 + -(0 * 5 / 8) / +--(9.4) * 613.34 * -4 / +3.5 - --(2.5 - 8) * 5.8 * -(9) * (0.5) / 9.3 * 8.7) / --((7 * 3.2 + 7 + 8.3)) / 87.357 * (++5 / (4.8 + 1)) * -9))',
 '((51.1 * 6.0 * +-+1636.4059 / 4.7 - -529 * 2919 * -44 * 71352 / 6.8619 * 5.9 + (+231.4 + +5.15 / -6 / 4.2 + 8 / 1.9 - +9 * 2.8 + 0 - 9.9 - 3.7) / +(++4 / +0.2) / +((0.4) / 7 / 9 + 3 / 2 + 7 - 9.6) * ++-7 * 6.5 / (5 - 9.1) / 0.5 * 1.1 - -+(9.6) / 7.3 + (+-6 * +3 * 0.6 / 6 - 9 * 7.2 * 1 - 9 + 0) * -81.664 * 6.7 * 95.2 / 2.8 + 4 / 309 * (4.1 + 5.4) / 8.6 / 7 * 5 + ++3 / 5.1 / +9 / 4.0 + 86 / (9.2) - -7.7))',
 '((-7.96 * +-2))',
 '((((4.2 + 10.6 * +3 / 4 * 7.2 - 4 / 7 - 0.0 / 8 + 2.7 + 3.7) * -7846 / ((3.1) - 5.6) / 6.8 + 94.303 / 7304.6 / +-3 / -7 - ---(5.0) * (0.4 / 2) / +1 / -1 * 5.8 * 3.1 - 47 / +4.2 / 7.4) * +8.5 / 53 / 550.7 + ++9.48 + -9.578 / +-21.87 + -(1.57 / (3) * 8.1 * 4)))',
 '((29.8 / (-9637.5 * 57 / 02.7) - -+---49))',
 '((320182 - -7 * -58.98 * +3.642))',
 '((+(-7 * -12 + 9996 / --(5) * (5)) * ((8.1 / +9 * 8)) * 42.5 / +-4 + 909.47221 / 2.8 / 5351.693 + (+7.475 / ++-1.7 * ++2 / +3.4 * 6.6 * 6.5) + 861.27))',
 '((+(-2.1798 / 32.8 * (4.0) + +(1.7 - 8 + 7) + 7.2 * 5 / 2.7) / 4.28 - 144 * 43.3 / (3.405 + 0 * 9.3 - (4.6) + 2 - 8 + 9.8) - -(-+(0) * 8.1 / +0.2 / 1.2 * 9.0 - 47 / -9 - -4 / 0.0 * 6.0 - 5 * 0 - 0 + 3) / 24 * 9.4 / ++09.20 / (3 / 4) / +(1) - (-3.19 * ++7 * (1) - (3) * 5 / 9 / 1.5 - -0 / 1.6 / 8.9 - 1 - 1 + 8.2) * -((3.9) / 5 - 6) * --1 * +57.9 / 4 + -(-2 / 7.5 * 6) / --1.23 / ++-9 - -9))',
 '((750 * 4 * (45)))',
 '((-5 / 5 - -777 - 98.2 / -408.34 * ((2.0 - 9)) - ((8.5 + 4.5 + 7) + 94 + +6 * 7) * 2 / 2 / --+9 * +2.5 / -0 + 6.3 * ++16 / 5 / +0 / (7.1) - (9.0 / 1.0 / 3 + 7 / 2 + 8.2 + 1) * 63 - +77.7 / 76.55 * 6 - ++0 * +4 - +6 * 1.0 * 3.0 + 3.3 + 9 - 6))',
 '((5.8 - 96.3 - +(+(3.8 - 1.7) * +(5) - +9.1 + (9) * 9.3) / 23 - 9.5 / ((3.5) / +8 * 7.0 / 3 - 7.9 / 1) / -1 / +-0 * 0 * -4.9 / 9.8 - 50.8))',
 '((2.97 * -++(-6.1 / (4) + +1 / 6.7 * 1.2 - 3.1 / 5 + 9 - 7) / (+(8.5 + 4 - 8.5)) * (-+0.3 / (8.7 + 3.7) / -2.1 * 2 * 5 - -+2 / 6.7 * 7 / 2) / 637 / 37 * -4 + -(3.5 / ---4 * -6 * 2.9 * 8.4 * 7.7) - 2.2 * -4.9 / ((2) * -2.3 - (9) / 6.3) * 50))',
 '((+8 - +-+90.1 * (7.6 * -4.2 - +4.97 + 5 * (1) / 1.6 * 0.2 + 4.7 * 3.4 / 7 - 5.1 / 8.3 - 9.9 - 4) + 3 / 7.751 / 3 / -(2 * 2.2 - 0.3 + 9) / -+6))',
 '((0 * -06.13 * (90 / -21.70) / 2.4050 - 2 + +077 * (8 * 9 * 2.0 / 2.6 / 8.7 + (1) * (8) * 9.2 / 5.5) - 2 / 29 * 4.7 * (5 * 9 - 2 + 3) * 3 - 73.4 + 7.695 / (4 / 1.5 - 6.7 + 2) * 37.1 / 5))',
 '((1 - 6 / 7.2 - 0 + 24.68379 - --+--5.6))',
 '((((+-(5) / 7 * -0.4 + +(9) * (6.0) * 7.8 / 6) * ((9 + 0.4) - -0.5 * 3)) / 3.8 * ((9)) / 6 - ++5 / ++(57 / -0.5 / 0 / 5) * -7 / +(+8.8 - 8.2 * 8.6) * -32 / --+1.5 * +7.9 / -0.4 / 3 + 422 + (29.5 - +-9 * 6 / 0 * 9.4)))',
 '((-075 - (9.5) / 81368.78 / (7 - 4.0 + 0 - 0.9 * 5.2 - 8 + 2) / 17.4 - 18.88 + 8.0 / +4.2642 * 1.3 + (60.7 * 7 * 6 - (1.2) / 9 + 0) / 6.71 / -(5.3 - 6.6) * +4.6 - +143 * -88.35 + 2 / -(6) - 97 * -3 * 2 / 8.0 - 0.1))',
 '((21.51))',
 '(((9 / 7 * 86.4187) / 2.1130 / 7 - 7.0 - --8.6 + 233 * (+1.0 + 9 * 5 / 5 + 0 - 9.2 + 4.3) + (49 / +3.3) + 5.5 + 189.629 / +-4 / -8 / 7.2 + 9.01))',
 '((+(17321.6)))',
 '((91386.72 * (+-++(4) * ---(4.0) / 02.251 * 3.85 / +0 * 2.6 - +-+6.0 - 56.4 / -(6.4) - 3.28 / +0.4 + 1 / 5.0 / 6) * +9 * 2.934 + 5 - -+++-+-9.4 / 7 * -64.6 * ++1.7 * 792 - ++---+3 + (-0 * (7) / 0 / 9)))',
 '(((2.5) * (+-++(2.2) - 2556 + 37.8 / 74.9 / +8 / 6 * 4.4 + +9.4) / 29.1214413 / +(1.0 * 7 + (8) * 6.0 + 9.8 * 6.4 + 2.1 - 4) / 9.044 / +(9.8 * 6) / -(3.3 + 9.8) + --8.8 * -57 + 8 / (+1 / 8 * (8.7) + ++4.4 + -3.2 * 3.0 / 6 - 1 - 0.2) / +4.69 / 3))',
 '((66.7 + -+99 - (-(4.3 + 0 - 4.2) / 4.880 / -+0 / (8) * 4.3 / 2.2 - 642.9 / 2.1 / -7.0 / 9.5 / 1.3) * 802 / 5 / (+9.6 / 0 / 1 - 2.3)))',
 '((52.2 * 63 * (++2.53 / 264.8 + 330 / 6.09 / (5) / 9.5 * 1.0 - 02 / (9)) + +054 * +--(+4.9 - 7) / 6.9 / --093 * 2.9 - 2237236.7 / (7 - 94 / 2.3 + -5.1 * 1.0 / 2) * 89 / 9 - (-(0.7 - 2) - -(1.3) + 4 - 5 + 8 - 5)))',
 '((-4.3 - ---++(5.8 / 5.2 - 7.2 + 7.4) * -+((8.6 + 3) / +8 / 8.7 * 7 - 0 * 4.4 * 7.4 - 1 * 2 - 1 - 8)))',
 '((++--5.36 + 559 * 81.0 / 6.58 / 0 / -(5.8 / 4 + 5.0) - 8 + 70))',
 '((930 * 35086 * 44 + --+4527 + +095.40 / 5 * 35676.9 / --(5) + 35 + 726.2 / --(7.1 + 6.6) + 4.3 * 173 / -+9 * +4 * 6 * 9))',
 '((((---1.6 - +6 / (4.4)) - 36 * (-8.1 / 6 / 7.4 + 8 * 1.8) + +-+-1.5) * --(-4.9 / +7 / (0.1))))',
 '((+91 * 332.6 / (-+0 * (6.0 / 9 + 3 + 0.2) * 9 * 9.6 / 8 / 4.1 + 853 * 81.24 * +8.3 + 4.63 + (0.5) * 6.8 / 1.6 + 4.8 - 9) - -47.93 * +98877 - -((6.4 * 7) * -+1 / 8 * 1.8 / 5 + (4.5 + 8) / +6.1 * 3 * 8.4 + 0.7 / 9) - -43 / 1.9 / ++(6 + 2.4) - -(5 * 8 * 2 + 9 / 1.5) + -4 / 71.6 / (6.4 - 2.7) * (5.6) * 4.1 / 7))',
 '((-(-8 / +(9 * 0.5) * 3) * +72 * (67.466) / +(+3) * +2372.11 / 90.152 / +61.98 - 0.3 / -0.7 * 6 / -1423))',
 '((((055 / +-2.1 * 8 * 9 * 1 - 2 * (1.0) / 7.0 * 0.2 + 0 - 3 + 2.5 - 1.8) / --4) / 3 / +(++(4) * 3) / (+-(1) * +9 * 0.0 - (3.3 + 3.9) + -5.1 / 6 + 8.6 + 3) * (48 * -7.5 - (0) / 4 * 6.8 - 4) / 71.34 + +(7681.5564 / (6 / 8.7) / +2.9 / -6 + 0.77 / +(1) / 2 - -+2.0 / 6 - (0.3)) / 2 - +-94614 + 2 * (3.86 - (9) / 7 / 2 + 3.8 / 2 + 5.8 + 3) / ((3) / 8.1 - 7.7 / 6.5 - 5.6 - 5.4) / 9.4 / 4.82 * 2.3 / 0 / 9 - 1.4 * (-4 * 6.9 / 4) * (4 / 3 - 3.8) - +-15.9 / (8.1 / 6.1 - 5 - 2.4) * (8.7 + 4) + -++3.3 * +-0 * +0 * 0 - (5.2) / 3.7))',
 '((+8.938 + (9 / 0 + (7 / 7.2 / 2) - 5)))',
 '((--+-((3 - 5) * 8 * 5 * 3.1 - (5) / 5.7 / 3.0 - 6 + 8) * +6 / 2.55 - 7.48 * 26.1 * -((0 - 3.5) / -5.3 - (6) * 0.9 / 0) / 2 + ++(+(4) * (2) / 5)))',
 '((8.3 + (4.4 - 5 / +(4.2 + 6) / 3.06 - 2.317 - +-2.1 - 4) * 69 + 3))',
 '((1.6 / 3.3 * (78.745 * -05.08 * (1) + --(9.1) / 39 + -+3.2) / 173.8 / ++(2 + 4 + 3.2) / -02))',
 '((9.45 + +-3003.19 * 40 / 89.1 * -62.2 / 11 * -(0.8)))',
 '(((+(-+9 * (0.3) + (8) / 4.0 * 3.1 - 8 / 7.6 - 3.7 - 9) / 0.5 / 23.8225 + 83 * 7 * 8.343 - 1.91 - -+-7.1 / 3 + --5 / -8.6 / 1 * 1 + (7) * 7.8 / 4 - 2) / ((99) + (+0.3) * -8) / (((7.6) + 3.0 / 5) - (3 / 2.1 + 7.6 - 7) + +-1.1 / 3.9 * 2.1 * 3 - +7.9 + 5.5 - 4) * (604.81) + -(2.99 / +-(1) / +4 + 8) * 226 + (100 + ++-9 * +3 / 5 * 7 * 9) * -95.08 * 7 - 6))',
 '(((+(+-1 / +2.2 + 1 * 7 * 7 - 1.9 * 3 + 4) / (+5.7) * 29 / 91.742) * 227 * +---+5.8 + -(+-+6.6 / 27.60 - (4 * 2 - 4.3 + 1.7) / (6.1 + 7) / 8.8 / 3 / 3.4 + +(7) / +0) * 87 + 1 - 0.9 / 999.1 * 8 * 104.5 / -+5))',
 '((196.7 / (--(0.3) / (0 - 8) * 4 * +(3) * -9) * (993.1 * 05 / 7) / -+4.17 - 958 * 8 / 6.8 / --+6.7 * (-9) * +5 / (8.0 + 8.1) / (6) * 8.1 * 6))',
 '((-34 / 27 / -0.4 - --(6 + 00 * (9.6) + (7) + 8 * 1 - 9) / 0.5 + 3865921.5))',
 '((0344.7 / -50.50 / 7 / -14.89))',
 '((+072.465 / -++(7.7 * (5.0) * 2 * 3.4 - (6.6) / 0 / 8.6) / -+372))',
 '((69021491.30 * +++--9 / 99 / 56))',
 '((13418 * 8.4 - +8 - +1897.13 * 5661.2 + +631.11572 * (75 - 5.8 / 1 / 0 + 4.5 * 0.3 - 7.9) * 09 + 5 * ((8) * 6 * 0.7 + 7) / (6.8 / 3.9 - 3 + 3) * 6 * 5 + 02.0407 * (8 / 7 + 9 + 7) + 6.8 / -(3) * 4.4 + 6.1))',
 '((+97675238 - (08.3) + 434 - -9.32 / (1 * +4.9 * 3 / 3 + 1 / 1.2 * 6.7) - +-0 * 0173.98))',
 '((-1.16 * 4 * -425 / 61 / ((2 - 4) + -2 * 7 / 3 + 6.5 - 7 + 4.0) + +++(47.0 * 9 * 0 + -1 / 4.0 * 2.4)))',
 '((06.04648))',
 '(((-(-7.5 / -6)) * 7 * 8.1))',
 '((07 / -+(291.4 / 7.9 * +8 * 1.0 / 4.3) * 7 / +-(1.3 * 7 * 1.5)))',
 '((--(---2 / --2)))',
 '((((43.7 / 25 / +1.2 + 33.8 + -4 / 7) / 0.75133 * -5 / (9.9 / 2.3 + 6.5 + 4) / 09.70 * 2 * 4) / 93 + 0.731 / 64 / ++1.0))',
 '((55.89 / 99.2 * 538648 * 39 * (94 - 5 - 4.1 + 5) - 0 + +1.3 * +++289.15 * 7 * 0743.58 * ++6 / +6))',
 '(((7 * 6 / ++12.1 / 25 * ++9 - 82.5799 * (-5.8 / 4.9) + --(6 - 4.5) + +-+5 + 7.4) * -8 / -8 * 1943.48 * ++-(2 - 1) * 9.7 * +99.83 - 74.4 / +12))',
 '(((3.50 - ++(2.9) * +434.28) / +-494.6335 / (23.2 * 9 * --1 / 3.5 * 2 * 8.2 + 566.70 / 9) * 822.9 / 5.889 + +(5813.549 * 228 / 0.9 / 3 * 2 / 5 - 3 - +(3.6) * 2.7 / 8.5 * 1.4) / (5 / +22 - 83.55 * --6 + +(1) / (8) * 9 + (9) * 7 / 4.7 + 0.8 - 6.1 - 7.3) + --7.70847 * --(9.4 * 5 - 9.8 * 3 - 3 - 9)))',
 '(((444.85 * (14 * 1.2 / 2.7 + (8) * 1 * 2.2 - 4 / 7.6) * 9 + +3)))',
 '((+72 / +10.93 / -+256.9 - (1.67 + --51 * 2.405 / 8.1 + -(4 + 2.0) / -9.7 - (3.0 + 8) + +0) * 8 / 29.9 - +-+(0.5 * 7 - 4.9)))',
 '(((+++7) / 68.127 / (866 * (9) * 1 * 4 * 0.5 * 2 - -65 * -7 - (4 + 3) * 5) * 52 - 11549.10 / -16.4 * -92 / -1 / 68.53 / (1 * 0) - ---(+5.8 * 0.0 / 0.8) / 6 / -5898.52 / 08.6985 * 54.1 + ---03.824))',
 '((0.4 * 9.9 / 6))',
 '((-242 / 175.19 / (67 / +-+9 / +2.6 / +4 / 3.0 * 0)))',
 '((--1797.1 + 4 * -521514 / ((4.1 / 9 - 5) * (0.8) * 8.5 / 1 / 0 + 86)))',
 '((3 * +++-+078.27 * ((-2.5 * 1.5 + 1 * 1) + (7 * 4) / -2.0 - 07 / 5 * 7 / 8 + -8 / 6 * 5) / ++1.4 - 27347 + -7.5 * 6 + ((7 * 9.8 + 5.2) * 02) / (72)))',
 '((+2.345 - 38.40 * (-471 + 2 - 1 + +7.6) * -1.06 + 4 * 7.677 * -+--2))',
 '((+-+9.3 / 78 * -((3 * 0.9) * ++7.3 / 2.0 * 7.8 / 4.1) * +1.2 / -3 / -+(0 + 8.8) * +37 - 811.795 * (-++(2) * --9 * +-5.6 + +--0.5 / +1.3 / -5 / 5) / 293.3 * -(+0.8 + 5.4 - 0.3 + 3.6) * -001 * +4.69 + 1))',
 '((-+11 * 3.5 / 0218 / ++-+(7)))',
 '((38.926 / +(-+-+3 / 380 * ++2.2 / 8.0 * 8.6 / 7.4) / +++2.7911 - 5 / --40923.702 - +(543.1 - (7 - 2.3) / 0.2 * 3.3 / 6 - -5.8 * 5 / 3) + +93122.0 / +9.9525 / -(1.4 / 5 + 0 + 3) * 019 / (4 - 5.6) * 4 / 1.3 * 2.8 - -((3.4) / 3 * 7) + (7 - 7.5 / 3 + 3 + 8) / 87.5 - -9 / --1 / 2 + 52.5 / 9 * 4.0 / 3.8 - 6 * 9.9 / 1.9 + 7.8))',
 '((6))',
 '((-64757 / 21 / -(+90.66 - -(4.7) / +7) * 853.35 / 234 - 356.40 + 1.10 * 118 + -4256 / +(+7 * 1 + 6 - 5.0 + 4) * (9 * 8 - 9.1 + 8.9 + 4) - (+0 - -6 + 4 / 6.7 + 4 + 0.1) - -(2) - -+7 - -3.6 + -8.9))',
 '((6.054 / -(4.54 * (0.0 - 9 + 5) * (6 - 8.9) / 5.7 * 9.5 / 3.7 + -(8.0) / 5 * -9.3 + 40.1) + ++++36 / -+--+7 / 8))',
 '((90.80 * -+(6 - +0.7) + 4 / 66.08 / 5.75 / 92.190 * 1 * +++3.3 / 7.9 - -3 / 0.5 * 1.2))',
 '((7 / +-560.426211 * (+7 * 093 / 5 + 499 * (4 - 5) - 96.38 + 8 - 2 * 6.2 - 5) / -6.0 * ++-+-1.1 / -(7.7 / 6.5 - 4.8) * 9.383 + 3.16 * +++-2.5 * ((4.2 * 5 - 8.6) / 5.87 / 2 / 9 / 3 - -8.8 * +5 * 2 - (1) * 3.5 / 8 + 6 * 3.0 - 1 + 2)))',
 '(((9.54979 * 6 * +0 * 14 / -7.2 / 6 * 7.3 + 2 / 3 * (0 + 8 - 2.9)) * +-+((3.4 - 1) * (4) + 3.8 / 6 * 7) * -76 - (9 * 21 / 006.7)))',
 '((-++-(1.24 + +8.8 / 8 + 8 * 1.7)))',
 '((610 * (----3)))',
 '((3 + (+-+(7 - 0) * +(0 * 0 - 8) * +-4.3 / (7.7 + 7) * 7) + 6 / 6.5 * -+2 * -++(7.9) - 02 / 6.935 + -92.1 / +(0 / 7 + 3.3 - 0.4) * 6.26 * -(1.9) / +1.8 * 0.1))',
 '((-(-(-5.4 + 8.5 * 9.2 + 3 + 3) - 029.2) * +65096 * 6.660 - 3.8083835 * 20 / 870 * (+6 * +5 + -3.3 + 5.0 * 7.3 - 2) / (2.1 / 1.7 / 0.0 - 8 / 3 + 1.9) / 6 * +(8) + +-85332.6 / (8 - -+7 + 1 * 2 / 5.0) / ++72 + 316.4 * ((7) + 7.0 * 2) * 4 / (8.4 / 2.6 + 2 - 8) * 15 * +3))',
 '((-++-0 / 34 + ++--4 / 0 * +71.0 * (--3.5 * 6.4 * 5 + (7.0) / 9.7 * 8.5 + 6.0 / 9) * ++-7 / -43.2 * 03 * -5 * 5 + --91.4))',
 '((-+-+(4 * 3.9 * 6.0 * 5.4 + -1.5 / 1) * -8 * 7 * (6.828) / +-05.9 / 0 + (+-(8) * 41.3879 / +(3 + 2.3) + 9 * 7.3 + +10.40 * -5.7 * 0 * 3.9 - 87.3 * 6.3 * 2 - +2.9 / 9 / 5.7) * -+--93.2 / ((7.9 - 9 + 1) / (9) * (5.6) * 8 * 8.1)))',
 '((-+6 * ++(+-+5 - +-9.2 * (9) * 6.7 * 5) / -++-66))',
 '((0.8 * 7261.0))',
 '((9 / 806 + 0))',
 '((++(2198.7498 * 1 * -6) / +6.9 * 72 / -(7) + ++-(-3 * 7 / 5) - (((9) * 2.7 / 5) / (1.5 + 2 - 0) * -6 / (6) / 9 / 8.5 + 61.0 / 73.86 * 8 / 5.6 * 0 - (4.4) / -3.8 / 5) - -(-+4 * +6.4 / 7 * 6 + (8) - 8 - 7.9) / 8 * --+9.3 - (31 / (4.2) * 8.6 * 0.0) + +5 + +--4.6 * +-6.1 / 6 / 1.0))',
 '(((753 / 02652.56832 - -+6) / -6 / -97.84 + (-++0.0 / -083.00 + 4 * 5 * 6 / (7.2) / 6.0 / 2 + ++(0.0) + -5.6 / (2.8) + 5 * 2) - (-(1.1 * 0 + 1.2) / 9 + (6 / 3.2 + 1.8) / -(0) / 8 - ++8 - 8.6 * 2 / 9.6 + 6 - 6 + 0) * 6.4592 / 472 * +5.14 + ++((7.8) / 0.5 + 7 * 5.1) / ++8 * +9.2 * (5 * 8 + 3 - 2.8)))',
 '((+(0.19 / +5 / 7 / 3.15 + 1.9 * +-0.2) * 00 / 38 / ++(-0 * 5 * 2 - 0 + 0.0) * 4 * 0 * 197))',
 '((1 - -(26 + 109.7) * +(+04.18 - ++6 - +1.9 / 7.6 / 4.7 + 0 / 9.2 + 6.9 - 2.9) * (62 - 20.4 + 1) * -3.5380 / 011 / 8))',
 '((319.8 / --7 / (-(5.2 * 8 - 9) * 2 / (5.1 - 1.8) * +7) * (++3.2) / -9644 / -749.780 / (6.7 * 8 - 3.3 + 3.5) / -5.0 / 2 * 2 * 4 + (++-13) / 1.7 - (+(3.0) / 33.2) / +(4.4 * -4 - (5) * 4 - 7 + 9 - 4) * +1))',
 '((+((++9.8 + +9.6 - 9.1 - 2.4 + 5) / +2.796 + 6.7) * +9591 * 07 * +5))',
 '((+-(4 * +23.8 * +-7.4 + +90) - (-+(5 / 8.2) * ((0.1) / 6.5 * 0 + 6 / 9.0 + 2 + 8.5) * -(9.0) * (0.1)) / +-2 * (-5)))',
 '((-+((+2 * 4 + 8 * 5 + 9 - 5) - -4.96 / 81.41 / 5.9 / 8.7 - --3 * 2.8 + 1 / 7.5 * 9.5 + 1.4 * 1.3) / 1 / 81 / -+0 * (95 * +6.4 - -9.3 * 3.1) * ((8) * 6 * 8 - 7 / 7 - 9.2) * 77.108))',
 '((34 * 4 / (57 * -74) / (--9.4 * --0.5 + -+5.4) * 2 * -977.4 * 2 + (6.31 / -++7.6 * (1.6 + 7) / 1 * +6.8 / 1 * 0.6) / 0.24 - 1.7 * (990 * 46.9 - 3.73 / 0 - -7.1 * 2 * 6.2) * 4.1 / 8.71 - (--+0.0 * (9.9 + 5) * -1.8 - 9 * (7.3) * 5.5 / 8 + +3.8 / 4.7 * 1.0) / (-+8 / +1.1 * 3.5 - 1.8 - 2 * 2)))',
 '(((++--(5 - 4) * 3) + +5.8 / 9.30282 / 112.2 - (54 * 1 * ++1 / 0.3 + -+4 / +5.7 / 7.2 * 6 * 4.6 - 22 + 9.4) / +88921.47 / 4.6 / ((4.4) * 8 * 7.8 + 4.2 * 3) - -6 / -1155 * -740.088 * -++5.8 * --4.3 * 4 * 3 / 0))',
 '(((((2.3) * +(4.9) / -5 * 1.9 * 8 - 7.4 / (4) - -3 / 5.0 + 4.8 / 9.4) * -5 / +5 / -(8 + 7) * 5 * 0 * 4 * 0.6) * 3.402 * 5 / +-0890.36 * +87 / +-+(9) - 9.2))',
 '((269.6 + (-++(1 + 3) + -4.19 * ---7 / +3 + 61 / 7 + 29.8 / 1.5 / 5 * 9.8) * +-2.57 / 4.0 * 913.269 * +461.8 / (2.7 * 8 + 0.5) / +1 * (2.8)))',
 '((+-41 * 87 + 27 / -+((8.5 + 6) * 8.2 * 2.6 * 3 + -7.7 * 5.5 * 9 - 4.8 / 0.5 - 5 + 4.2) + +1.0 * ++6.19))',
 '((+-((6.0 * 3.1 + 3.7 - 6 - 1.5) / +-1 + --5) + +001 / (((8) - 8.2 * 4.8) / -(2.4 + 1) - 7.03) * 8 + 22 / +(-3.9 * -7.7 / 1.2 / 6.2 + 7 / 3 / 7.9) * 31.0 - +9.3 + 8 - -+0 / +4.19 / (4.7 - 8) / -4.6 - 9.3 * 86.8))',
 '((-((68.10 * 9 + (2.5) / 5.4) / +-(6 - 3.6) - ---7 / 5.2 * --3.3 / 6.1 / 5 - 646.51 - (9 + 4) / (1) / 0 * 4.9) / (14 * +7 / (8.6 - 3.3) / -5 / 4.9 * 1.8 / 6.9) / 3 * +-8 / 4 / 4.85 / (3)))',
 '(((9.50112 * --8.6 * 9 / +++1 * (6.2) * 7 * 2.2 * 0 + 949.6 * 187.9 / 423 * -+1 * (8))))',
 '((70 / 46.2717 / -(98 + ++6.1 - +3 * 7.1 / 9 + 0.2 * 0.1 - 9.8) * 3.88))',
 '((-36 - 4 - (+481 / (2 / 8 + 6 + 3) - -(8 + 8.0) * +2 * 4.1 * 7 * 7 + +(3) * +6.3 * 1.8 / 7.3 + -4 / 2.4 - 3 - 2.4 - 1) / ((0.3 - 7.1 + 5.2) + -1.1 * (4.4) / 3.5 + 5 / 5.3 + 5 + 7) * --+8.16 * +-75.74 / --(3) / 68.51))',
 '((((91.404) + 1.00 * 544 / 45.0 / -5.3 / 5 / 8.1 - -105 * +-4.8 * 9.5) / 8 + (--6 / (1 * 6.9 - 2 * 9) * 066.65) * (+-+7 * +6 * ++0.8 / 1.3 * 2 / 8.5) * (--(8) * 2.77 / -7.2 * 2 - (7.6 - 0) * 7.4 * 5.2 / 7 - -5 / 1 / 3.1 + 6.9 + 5.7) * +900 * 45 * (3.7 * 7.2 + 1.6 - 1) * 48.20 - --+8.90 - 3 / 3))',
 '((27.668 * 664 - 8.51 / +(472.6) / 452961 / 17 + 5 + -(-6.4 / (3.3) / 4 * 3.0) / 6.3 + (-2.3 / -4 + -7.4 - 8 * 8 - 0 - 7.1) + 42.8 * +16 * -+5.3))',
 '((70737.326))',
 '((-05367.1 / 8.178866 / (5.898 / 52 * 19) + 6 * 65))',
 '((+1 * (12 / +6.5 * 43 * 11 / +6 / 4.0 - -4.7 * 1 / ++9.5 + (6 * 8.0 + 8.6) * 0 * (1) - --8 + 2.2 / 1 + 2.4 * 2.7 + 6) / -+7 - ((9.4 * 7.8 / 3.6 * 2 + -7 / 5.4 / 5 - 5 / 4 - 1 - 3.5) + 8.2978 * +8.9 * 27.9 / 4.2 * 0.6 - (2 - 5 + 2.4) * 1 / 8.2 / 5.5 * 9 + -+4 / (9) / 0.3 - 0 * 0 * 0 - 7 / 2)))',
 '((+6))',
 '(((+++380.06 - -+827.409 * -581 / 0.23 / +-0.4 / (6.7) / 4.1 + -4 * (5.5 - 1 + 4) + -05 + (4.5) - -6) * 1 + +9.4 - (08 * (9 * 1) / 35.76) * 4.7 / (+9.8 / 7 / 0 * 8.0 + 8 * 6.9 * 2) - 03 * ((6.3 + 7) / -3 * 6 / 0 + (8) * 8 / 5) * 7))',
 '((+8 * (5) * --53))',
 '((-+-+-27 - +29 + 7.4 / +-+6.5 / (2 / 7 * 7) / 46 * --+8 / (9.1) / (3) * 6 / 1 + +((3.5 - 6.0) * +1 / 5.4 + 1 * 9.4 / 8.0 - 3 * 0 + 4) / 5))',
 '((-(+8 * (-4 / 7.1 / 9.4) + 2 + (1)) - 414 / (9.67 * +73.21 - 803 + 3.1 + (8.6) / 1 / 9.4 - 3.5 + 7 - 1) / +8.8 * ---1 * --3.04 * 1 * (6 - 7.2) * +6.0 / 3 / 5 - 56 / (3.8 * +9 - (9.5 - 4.7) * +5.9 - +1 / 0.9 / 5 - 5 - 9.5 - 5) + +++313.2 * --(4 / 8.6 + 8 + 0.8) + (13.30 * 7.2 / 7 - 2 / 3.6) / -9 * ++8.3))',
 '((1.6 * 7))',
 '((+2.4 / 3 / 2 / +45 * 3.6 * ++-4 / -70 / +7 - 81 / +100 / (-(7 - 4) + 15.8 + (1.2) / 0.4 / 1) - 03 / 9.035 * 64 * 2 - -(78) * 54 + 4 / -634.2 * 985 / (3 - 3.8) * 6))',
 '(((-9) + +2.2 * +328955 / 07))',
 '((54.8 / (+-0 + -+63 / (5 / 1) * 93 - +--5.5) * 88049 / (+3 + -(8) / (0) / 6 * 9 + +5 - 9 * 8.5 - 0.9 - 4.5) / 63.5 * -+3 * 5.212 * +(0.6) * (5.1) * 4 - (-+20 * +05.2 / -0 * -5 / -0.7 + --0.4 * 5.52 + 448 + 88.76 * +1) / 1996.925147 * +9.1 * 23738 * 25.1 - +552.663 + 9 * 95.1 + +57.90 / 3402 * 847.9 * 4.7))',
 '((+5.24 / -16))',
 '((4.1 + -+0 / 1.1 + 83829.42988 / 0.360 / +5.27 * 75.0 * +-1.6))',
 '((01 / ((0 / 7 + -2 / 3 * 9) * 66.98 / --+6.5 + -++-3 / 8.705 * 5 / (5) * 4.6) / +-28.080 * 412 / 1.4 * (1 / 6.0 - 7.2) - +-++((9) * 5.0 - 6) * -+-+-+7.3 - (((7.7) + 0 * 9 - 6) / (7.5 * 0) / 76 * +1 * 7 / 4 - 3.74 - +-7 * 3.1) - 85 * ++-(5.3) * 6.0 * (1 * 0) / 5 / -5.2 * 8 / 5.7 + -0 - +(1.8 / 2.3 + 9.2 + 0.6) * --4.9))',
 '((50 * --3 * 47523 * +--(3.3) + -2 * 6 * -((6) * (0.9) * 5.2) / -+651))',
 '((83705.1 * ((-(6) / -8) * 6.8 * +8.4 * 65 * 8) / 1.8 - --+(-7.4 * 9.1 * 9.6 * 3 + 8.8 / 0.2 - 8 / 6.8) * 1 - 9337 * 414 - 425.9019 + +7.9087 + +0.9 * 612 / -9.8 * 2.3 / 9 / 7.5))',
 '((+-+8.7))',
 '((++9 + +4.1311 - 4 * 9 + 2.9 / 46.84 / ((9.8) / 7 / 4 + 2.6 / 5) * 4.3))',
 '((((-0.91 - +-1.7 / +1.9)) * -9 / 09 / ---3 + +-9 * (94 * 094 + --(7.1) / 4 / (2.2) / 7.9 - (7 + 7.2) - +0.3 / 6.0 / 6 - 7 * 8.1 + 5.1 - 7.4) + -8.9 / 02.0 / -606 * 5277.3 - +3.1 / 794.3573))',
 '(((4 / 295.14 / -+8 * -77.13 / -+3 / 7.8 * 4.3 * 4.7 - +((0) / 1.0 - 9.9 + 2.7) * 246 / (5) + (+4.1 + 4.4 * 5.9)) / 7 + -6.655 - 9 * (+(0.1 + 0) / (8 + 2.0) * -3 / 4 - -1.7 * -5 * 2 / 1 - 1 * 8) * ((2 - 9) / -1.4 + 1.6 * 4 / 5.0 + 7 / 8.3 + 5.8 - 1) - +--(6 - 8.9 - 4) + (+5) * 3 / (2 + 2 + 6) + (-6.4 * 6 * 2 + 7.8 / 9) + 7 * --3.3 * -5.6 * 2.3 * 7.2 + 0 * +0.9))',
 '((0.185 * 5 * -46.8 / 73.6 * +17.4 * 2.6 - 01.5 * ((0 * 3 * 2.5 - 3.8 + 8.8) / +07.93 * (3) * 2 * 8 * 4 - 4) * +593.69 / +-3.40 / +-9 * +(0 + 4.1) / -9.4 + 7.1 - +92.80 / 8 / (-7.5 * 7.8 * 7 - 8.3) / 63.933 * ++0))',
 '((18.4 * --43))',
 '((9 * +966.1 * ((+6.2 + 8)) - +-00889.01 * +0.457708 * (+(7) * (3) * +9 * 9 * 8) - -+2.963 * 225.7 * ((2.7) * (3) / 0.8 * 4.3) * 5.65 / +7 / +5 - 12))',
 '((8 / -(-2.3 / 8) * (48 / -(0 - 8.3) / +-5 / 2 - 950.433 / 05) / +8.53 / (69 / (3.9) / 3 * 3.9) * 015 * 03.2 + 0.43 * ((-1 * 4 * 1.1 + 1 - 9.8 - 1.3) * (1.1 * 2.4 - 7) * (6) + --8.1 / 0)))',
 '(((++264.102 * 0 * (7 + 8 * 0 + 5.8 - 5) * 2.9 + (01 * (2.1) / 7 / 4.3 - -5.6 / 1.3 * 2) + 4.6 * 58.80 / -5 / +9.7 / 4 + ++3.0 - (7) / 0 - (3.7) * 4 + 2.9 * 6 + 0) / 3 - (-2118.0 + 88 - (7 / 3) * 7.00) - (6.8 / 3.6 / +(6.6) / 9 * 9.0 * 5 - (9 * 7) * (8)) / +90 - +((9.4) * +5 * 0.7 - -5 * 1 * 3 + 2 / 1 - 3 + 9.3) + -0546.152))',
 '((146.23 + (5.425 / --12 / 3 / 10) * 699818 / 792824 * ++-6 * --53 * +-(7.1) / 53.76 * 3 * 9.7 + ((+3.2 + 5 - 1.4 - 8.2) + 863.25 * +-8.4 * 4 - (2.0) / -1.0 * 7.2 / 4 - -6) + -(2.76 * 9.7) * --6 - 65.6 / 0.93 / --(1.3) / -1 * 3.0 / 8.0 * 9.1))',
 '((2 / 704032.6 - (+9) - -3.22 * 57 * 3 + --7087.1 * ++++9 / -(1 * 3 - 6.2 + 2.1)))',
 '((+-3.4470 * 84 / 9.3 - ---+21.1 * (6 / -(2 + 9.3) / -5 + -66.7 - (5 + 4) * (2.1) * 0.6)))',
 '((88 - ---+-(4 * 2) / 3 - 8.59 * ++7.3 * 501 * -263 / +19.3))',
 '((-+0 * (((9.0) * -6 * 8.0 + (7.4) * 4.9 * 2 - 1 / 9.0 + 9 + 3.1) * 84.0 * (5 / 4 + 0) + -477 / (4.6 / 4.0 + 9 + 2.1) * 5.3 - +26 - 91 / 9 / 2 * 3 - -7 / 5 * 8.2 + 1) / (-(9 + 8.7 + 4) * +(8 + 2) * +4 / +0.2 / 0 * 2.2 + +-5.4 - -9.1 - (3.4) * 1.8 / 0.1 - 0.6 / 4.1 + 2 - 8) + 2 * -9.5 - (34 * (8.9 + 7 - 2.9) * +-3.5 / (5.1) + (9.2 - 5 - 5.5) - -(4) / (5.8) * 6 - 4.0 - 4 * 2 + 0.7 - 5.1) + 9.69 / 7 / (-1 * 2 * 9.3) - +-195 - +++6.8 / -++7 / (3 - 6.1) * (5.5)))',
 '((2 * -4962.80 * -0))',
 '((7 / (7 * ((4.2) * 7.3 + 8 - 2.2) * 1 - +-+-0 / 742.662 + ++0 + (6) / 5 * 7 - +6.0 * 9 - 8.4 + 6) * (((5.7)) / (3 * 7.5 + 4)) / 658072 - 2 / 60.83 / 1 / 3 * +8))',
 '(((9.29 / (+(8) * 3.1 * 8 + 7 - 9 / 7.2 - 3.4) / (+1 / 5.8 * 4)) / -(6 * +-+9.4 / 11.31 * +5.6 * 2 / 6) * (0795.9) - --29 * 24.74 - 4 + 48 / 906.5))',
 '((+((8 + 0.3 + 6 * 4 + 3.7 + 7) * 3 * 76.0 * +(4)) / 55 / 9 * 0.4 / --31 + +92 + +(-7) / ++(7 + 3.1 * 1 + 8) / (35 * 0.6 * 6.6 / 0.1) / +++1 * (8.3 / 7 + 9 + 5.5) / -8.2))',
 '((--+12.1 * 6))',
 '((8 * 37 * ((+9 * 2.9 / 5 - 0 / 4.6) + 8 / 7) * (41 * (4.7 + 9.5) + -8.4 / (9.6) + 5.4 - 4) * 2 / -+3 / 72 / (7.1 + 2) * +2 * 0 + 969.1 / (1.6 * 6.75 / 50) * 6.9 * 2.42 * 0.818 - -0 - ((3 * 7 + 0.8 - 6) * -+4 / 9.2 * 7.9 * 5.6 - 4 / +4.2 * 6.4 / 0 - 7 + 7.1 * 6.0) * 0 * 1.63 / 01.4 - ((3 + 5.8) / +5.7 - 5 / 2 + 5 * 4 - 4.0 - 7) - ++30.26 / -(8) * (6.4 + 6.2) / 4.0 / 6 + --(5.8) / 24.6 * 6.6 - (9.5 + 6.5) * 3.7 / 3.1 / 2.5 - (0.8) * 2 * 1 + 2 + 3 - 5.7))',
 '((+-+(+10 + -0.4 / (6.6) * 9.1 / 4 + 2 - 3.9 * 2 - 0 - 9.3) * 587 / 7))',
 '(((-8.9 / +++1.7 / (-9.4 * 8.8) / 033 - (56.35 * +5 / 7 * 1.5 + +0.7 * 3.0 * 8 + 7.0 * 4.3 + 5 + 1.5) / (+2 / 2.8 / 2 + 1 * 9.2) / (6 * 4) - -(7 - 9))))',
 '((4 / 6 + 528.9 * +13136 / 978 / 6.1191 + -++++-9 + 80.4 * ((5.0 + 8.0) * +0 * 9.1 * 9 + -3 * 8.1 + 9.8 / 0 + 1.3 + 5) / (5 * 0.8 * 2) * +-2.3 + -2.43 / +(1 * 6.5 - 2) * 140 / (5.5 - 3) + -+(0.4 + 1) / 53.7 + +-3.3 / 8))',
 '((238.90 * 3))',
 '((-1 * --96 - -7 / 890 * ++-(2.5 + 3.5 + 5) + 87 / +796 / +(8.1 * 2 / 5 + 5.7 * 5 - 7 + 2) * +(2.5 + 5.4 + 6.9) * 636 * -(4.9) - 31.1 - 545.43))',
 '((-+1.7 + (-(7.8 * 0 / 9 - 4.7 * 8 - 4.9 + 0.6) * 9.78 / -(2.7 + 6.4)) / -+2.3 - -9.939 / (3.11 / (1) + -(3))))',
 '((50 * 79.1))',
 '((-+553.72 * 14))',
 '((0))',
 '(((6.80 * +-(7 / 5) / +++5.9 * 5 * -+5) / 125.6 + +1477.53645 + -4 * 157740.2 + +5.0 - -((7.3) + 1.7 - 2 + 3) * 414.2225 / +-5.9 * +4.5 + (1.1 / 6 / 7.5 + 6.8 * 2.7 - 4.4) / 989 - (9.1 * 6.1 + 9.5 - 5) * -8.9 + (2 - 7) * +6 / 8.3 * 6.9 + 6 * 5 * 3 + 0 / 5.3))',
 '((--+84 + +-+-5.3 - +861535 / --5901.5 * 4.60 / ++43 + 74 + 378 * (-1 + 6.6 + 0 + 9) * 699 + 7.785 * 0.5 * --5))',
 '((+3244.4 * 41.6 * (8 * -66 / 98.2 / (9.8) / 0.8 * 3.8 - (6 + 8.6 + 2)) / +-484 / (1.2) * -(1 / 7.3 - 0 + 0) * 8.2 * 4 / (8) + (+1396.9217 * +7.59 / -5 * 6.55 + 20 / 9 + 59 + +(5.7) / 9.9 + 5) * (-(0 - 9 - 0.9)) * 06.789 * --1 - -+73770 * (-+9.8 + 13 / -0 / 7.4 + +7 / 2.2 + 2.6 * 8.8 + 2) * 4 / 810 - 536.5 / 99.3 * +(5.1 / 7)))',
 '((265))',
 '((((-4.2 * +-2.8 + (3 + 7) + -3 - 1 * 5 + 9.2) / 82538 * ++16.5 * +62 + 1.1249 / 03.5 / (2 / 1 - 5 + 1.3) - -+(4 + 8.2) * 05.5 - 21 * (1 + 8)) * 3 / 987.74 / -+484.54 - 4 / --6.276 * +5.5 / +1 * ++2))',
 '((--(49 + -7.46 / (3) + (8 - 2) + 3)))',
 '((+926 / ++5))',
 '((0 / -15.7 / ((-5 / 7.0 + 8 / 3.9 - 1.9 + 0.0) / 5 * (9 - 1) / 2.1 / 4 - (8.8 / 9) - ++9 + +3.7 * 6.5 / 3.1 + 3 + 5.7 + 1) + (7 - -5.541 + -+5.0 / 67 + ++7.7 * 6 * 6 / 9.3 - -1 * 2.7 - 8 + 7) / +449124 * 601.2 + +(-(7.9 - 1.3)) / 01.91 - -++++9.7 * 830 / 2 / -7.31 / (3.0) + ++3 + 4916 / (7.4 * 0) * (4.7) / +2.3 * 4.0 / 6 - (9 / 8.1) * -(9) * +9.4 / 5 / 4.0))',
 '((702.1 / (4.344 / 2.89 / -(6.4 + 9) * (2) / +3 + -4.67 * -(3)) - (0 * 16.46 + -06.602)))',
 '((+68282905 / --(010.5 * 63 - -(4) - 0 / 8.4 * 7) / -+8.915 * (+52 * (3 - 9) * 6 - (0) / +6 / 8 * 3 + +2.7 - 8.1 * 6.3) - 038 * 81.2776 / ((4.6 / 5.7) * 42.1 * 5.7 / 3.9 / 1 - 7 * (3.8) / 2.4 * 6 - +8.7 - 0 * 4 - 5 + 3.7) / ((9.9) - (3) / 1.8 + 3 / 4.3 - 0) / 3.1 - +71.678 / 9.48 - 657.76 / +-(3.9 / 5.4 + 7.7) * +15.651))',
 '((((6 * 78 / 9 + +(1) + +2.2 * 3 / 9) + 0764 * 2.75 + 4.43 + (1 - 3.3) / -(4) * +5.2 + 2 * -3.4 / 6.9) / +-((5.1 * 8.3 + 6.7 + 0) + +1) * 0.161 + 18.589 - (9 / (7.5 / 0.4 + 2.4 + 8.1) + +-4 * 6 + 6 * -9.9 / 7 + +6 / 1.9 / 6.9 - 9.6) * --((5.4) / 5.1) * -6385.2 * -214.8 + (-61.08) / +(3.1 * 7 + 9 + 4.3 - 8.5) + (3.55 / 5.4 * 4 * 3.8 + 7 * 8.9 - 8 + 8.5 + 9.6) * 7.360 - 28.4 / +7.98 * 7.4 * -5.9 / 1 / 3))',
 '((+2 / -(-+++4 * 447 / -6 * 9 * 9.0 * 5)))',
 '((55.775 * -3.293 / ++42 * ((3.4 / 5 + 0.5 + 3.3) + 90.21 + +3.6) - 93 / -6.12 / 82 * (5 + 9 * 6 * 4 + 8 * 6.8) * +(4.4 - 8 - 4) * 9 * +7.9 / 1.0 * 4 / 2))',
 '(((5 / -43.079 * 82 * +46 * (3) - ((3 + 6.5) * -4.2 / 6.7 + (4) * 9.0 / 5.9 + 4 - 7 - 7.6)) - (+++2) * --(0 / 1.4 / 9 / 1 + -0 / 8 - 2.5 + 8) / --37 * (1 + 3 - 4.6 * 1.0 - 6.6 + 9.3)))',
 '((1 * 1.27512 * +-9 * 4365.8 / +99.83))',
 '((-+976940 * ++78 + 0.4838 + (+50 / (8 / 8 + 9) * (8.0 - 2.7) + (2.3 * 8) * 32 - 70.67 / -5.0 / 7 / 2.7) / --9))',
 '((9.549 * 55 + --8.5678 / (-2.0) * 2.2901 * 259 * 7 + -14.1))',
 '((++++862.5 + 5.5 * 0 / -(-(3) / 7.3 / 8.1 * 7.8 + 3 + 0.7 / 6.7 - 0) / (-6.3 * 8.9 + 6.2 * 0.9 * 5 + 1.1 * 5) / (-8 / 2.9 / 9 - 3 * 3 - 3.4 - 4)))',
 '((-39.8))',
 '((+5.57 + ((++0 / 8.5 / 6.7 + 0.0 * 5 / 6.4)) * (+2.99 * (1 + 8) * --4.4 * (2.4) / 7 + 6 * -9.9 / 8.8 / 9.7 - (3.8) + -7 * 8 / 7) * (63 * -5.6 - +(4.3) * 0 + 4 * 7.9 * 8.7 - 5 / 9.7)))',
 '((--+3.189557))',
 '((+7 / -15 * (0) * 7.0 / (9.06 * (3) * 3.7 + -6 * 4 * 8) + +(-(1 / 8) - (8.3 / 6.3 - 8.4 - 5.4) * -8.8 - 93.27 / (2.6) * 3.2 - (3) * 9 * 2 - 2 / 2 - 6) * (((2.4)) / 0.341 / +9 + 730 * 06.9)))',
 '((-64))',
 '((695))',
 '((-7 + (1642 - 1.2 + -5 / +0)))',
 '((6.5 + 4 + (4398.013 * 40.3) * +3 * 87 - 470.0 * -+56.1 * 699 * ---4.4 / 8 + (30 / +3 + (1) * 4) * 495.692 - -6.2 + -8.1 / -9.9 / +0.4 / 2.7 / 5 - 34 / -4.4 * 4 / 1))',
 '((46.6575 * --737.3))',
 '((+48.8 * +(++4.6) / 568 - (7 * 4.1) - +(2 + 35 + 2.6) * -+1 * -(+8.4 / 0 / 5.3 - 3 * 8.2 - 2) * (0.1 * 1 - 8.0) + (---0.4 + 1 * (2.8) + 4 / 8 * 4)))',
 '((0.2 / (++-4.10 + 84.6984 / -6.62 / 92) / (7788.5953 / (6.6 / 3 - 9.4 - 5) - 7.58 - --7.0 - 8.3 / 2.2) * ++-78 * -526.0 / 7))',
 '((0584.41426 * 151.6 * 309.2 * ((9 * 9.0) * +-1.7 / 3.7 + -8 / -5.1 * 3.9 / 1.2 - 6.1 / 1.4) - (-5 * ((8.7) / 6 * 2 + 4.7 * 9)) - (+(4 / 1.6 + 3.9 - 0) / 54) / +(81.55) / 1.220 * +-(9 - 6.2) / +-+7 * 4))',
 '((6.96))',
 '((-(0617 * +(0.3 / 1.1) * 2.160 * 10.77) + 25143798 * 5 + 2 - 55 / 868.26 / +(8 / 4.4) * --+1 / (8 + 3)))',
 '((86.61 / (-484 * -(7.7 * 9 + 2.0) * 9 - (-1 * 6 / 7.6 + 4.0 * 6.4))))',
 '((081 * 3 / ++6 * ++(1.8 / 1 / 8.8 - 3 - 6) / 1 / (4 / 8 * 1.2) / (1.7 + 1.6)))',
 '((+9 / --262112 * 35))',
 '((-(+6.49 / (+2) * 7 * 3.01 * 8 / 1.7) - -22 * +03.30 - 0136 + 3 / 4 / 29.04 * (9.8 * 2) * (9) * 9 / 4.4))',
 '((8 / --76 / -++-4.1 * 68.8 - 0 - -((0.7 - 7.8 - 0.5) / -+3 * +2 * 2.5 + (8.6 - 1) + +6 * 5.0) / -068.7 * 036.63 * 717.4 / -0 + (+(5 - 1)) / ---6.36 / ++(9 + 1.3) * +--5 / 32 + -475.03))',
 '((15 * 91.8 * +99.71 / +-5 * 18.2 / --3 / +++7.8 - +690 / -+(-7 - (8) / 1.2 / 6)))',
 '((2 / 87 - 6 / --18.713 - -(+--0 + (1 - 1) / (7) / 3.6 * 4.1 + -9 / 4.4 * 5.6 - 7) * -03.74335))',
 '((+11337.82))',
 '((+--(88 / 8.8 * -5.0 / 9.4) - +2.4))',
 '((446728 + 055.7 / +(++(0.5) + +5 / (4.2) / 8.4 - 4.1 + 0 / 3) * +-(+6.5 * 1) / (+7 - -1 / 1.3 + 7.6) * ((0.6) / 0.5 * 3.4 - 6 + 0 + 9.3) + 4.76045 - --(+0.0 * 9.4 * 5.8 - 9 / 5 - 8 - 7) * 8 - -2.0))',
 '((-4 + (+1963.0 / 9 - 91.9071 * (1.4 * 8.1 + 8 + 9) * +7.6 * 9.2 * 4 / 0.2 + 7) - (+4)))',
 '((++-+96915.129 - 2 * -7 / 0895 * -95.3 + 97.7296 / +2.84 / -(5.3 * 4.0 * 1.4)))',
 '((9.7 * ---+((1.8) / 6.8 - 8.2 / 2.9) * (++7 * -+1.9 + 088.3 - ++3 / 8.7 - 0 * 8 * 9 - 8.9 + 2.3 - 0) * (+++1 / --1.7 / +1.7 / 9.4 + 9.10 / -1.4 * 9.1 * 7 + (7.2) * 3 * 1.8 + 0.4 / 4 + 4 - 8.4)))',
 '((2 * -(8251 - (8 * 1.8 + 2)) * (--1.4 / (8.4 / 7.4) * 52 - +(3 - 6.2) * (9 + 5) / (8) * 2.8 * 4.6 - ++0 / 7.6 * 3) * +22818.494 * 19 - +((+6 * 5 - 3 - 1 + 9.7) * -67 - +34) * 4 / 3.50 / 133 * -++0 / -6.2 / (4 + 9) * (4.2) * 4 / 7.0))',
 '((5 * 9 / 07.2 * -+--(5.1) / 90 * (0 - 4.6 - 0.3 + 9) / -9 * 34 * 6))',
 '((54.0592 - (4109 - -729 - 8 * (2 + 8.3) * +8) / (+(9.3 / 8 + 3 + 4.1) * ---5.1 * -9 / -4.7 * 1 - 8 / 32.7 * (4) * 3 / 6 - (8.4 - 2) / 0.1 - -1 / 7 - 9.8 * 3.2 - 1.7 - 5.3) + +02))',
 '((0254.3))',
 '((4872 / 2.6 + +-56))',
 '(((-0.24 / (-7 / -6.5 * 0.2 * 5) * +472 - 97542 / 430) * 98 + --4.8 + 4 - 07817.8 / (7 * 7.5 / 6.2 * 4.7) / -57 / +--3.9 / 1 * 6 / 4 * 5.3 - (--4.6 * (8) / 9 * 0) * 80.08 - 34.8 - 6.844))',
 '((07))',
 '((-+87334.52 * -4.30992 * +-+7 + --+(+(0.9) / 3.1 - -4.5 / 4.8 * 0 + 5 * 6.7 + 8.5)))',
 '(((+(06) / (-+4.6 / 5 * 6 * 7 - (6) / 2.4 * 3) - (-1.8 + +1 / 0.4 + 5.1))))',
 '((-650.066 * +4.7 - -(5.3 / ---3 / (5) * +9 / 8.1 + 04.9 - 19 / +5.4 / 4 / 1.4)))',
 '((70 + 1 + 1 + +(9.5) * --+3.2 - -+7.60 / 5))',
 '((-38443 / 5))',
 '((1.9))',
 '((+-(-69.8 * 5.8 * -0.1 + +(9 + 5) * +-1 * 4 / 5 / 8.8)))',
 '((78))',
 '((((-8 + ++7.0 / 8.2 / 8.1 / 5.9 + 1.9 * 2 / 5) + 9 / 1.4 + 11 * ++(2.1) * 0 * (5)) + 5.6 * ((1 + 8.8 / 0 + 8 + 1) / ++4.8 * (9 + 0) - 604 * 57.37 / (2.8) / 7.0 * 8.7 + +3.0 / 9.0 - (6) - 4.0 + 6.0 - 4.0) / 107 * 7 * -(8.0 * 2.7) / +--2.6 * 61 / -5 / 0 / 8.2 + 16.004 / 2.65 * ((8 + 9.1) / 9.0 * 6 + 9 * 4.3 + 1 * 4.4 + 1.5 + 7.1) / 5547 * 4.87 / -4.0 * +3.8 * 4 * 5.2 + 4 / -(+2 * 2 * 2.2 + 3) * +3.5 * +(5) + -+854.1 * -(1 * 1.6 - 1.0 + 2.3) * 74 - 06.436 / (6 / 5.9 + 4 + 8.2) * 32.1 - 869 / 55.71))',
 '((++-9 + 72234770.97335 * 3.75210 / -+9.0538 / ----0 - 1 + +-32.9))',
 '((----(+0.8 + +6.7 * 2) * +9.8))',
 '((-(-96.631 * +---1 - 66 - +5 / +(0))))',
 '((1.5 * (+1.3 / -(0 - 6.6) + 3 / 4 * 52.6 / (0.7) * 8.1 * 2) + --5 * 903.2 * ++6.5 * 2454 / 3.61 * +(7 - 5.0) + 312 * (-69 + 28.51 / 2.0 - 0) / 4.956 * -+(9 - 3.6) / 63.94 / 30.39 / (6) / 7.1 / 1))',
 '((+-9 * 7.88 + 6))',
 '((+--+3.8 / 1.87 / -+((3.4 - 5) / (7) / 0 / 3.3 - -0.1 * 8.7) / +1237 / ((2.6) * +5 * 4.4 * 8.5 + 4 + 0 * 8.5) * 539 - -+--++52 / ((5.7 * 1 / 8.7) / 3 * ++0.9 * (0) + -24 / --4.6 * (9) * 6.0 * 4.7 + -4 + 9.7 / 6 * 9.8) * -((6.5 - 3) - -7 * 3 * 4 + 4 * 2.1 + 9.8) * 7.26 / (9.5 * 6.4 / 3.7) - -(++1 * 63.1) * ((4) - (5.0 - 8.8) / (9.4)) * -(0 * 6.9 / 2.3) / 93.793 / 8.4 + ---3 / (--2 * +9 / 2.4 / 4.5 + +7 * 1 / 2.7 - 2.4 / 0.6) / 5957.222 / (9.9 / 2) - ++18 / ++--5.1 / 6 - 613 - -+9 / (6 - 1.0) / 7.8 / 6 + (6.6) / 1.1 / 8.0 * 4.0 - (4.2) * 5 / 2))',
 '((5))',
 '((-39 + 6 / (+8 + 28 + 45.94 + +4) + 91 - (+-4 / ++2) - -5.5700 - 0.01 - 2.859 / 46 - 7.82 + -7.3 / 9.6 - 4.1 * 0.4))',
 '((9.2 - -002524 / -8.5 / --9.99 * 77992.90))',
 '((+39 + 7.5 + +(3.4 * --4.2 * (8.7) / 5 / 8 + 19.83 / 5.7 / 7 - 4.9 * 7 * 5.5 - 5.8 / 8.0 - 4) + +-(4 - 9.2 / 1.8 - 8 - 9.6) * 0.95 * (-8 / 4 * 6.6 - 7 / 4) * 444 * -+3.4 / +2 - +-1.08 * --+1.1 / 16.1 / +(5.4)))',
 '((((-4 / +3 + +(7.7) + 8.5 / 6 * 0 - 4 * 6.8 + 8 + 6.5) / -79.5 / 6.00) * 347 + (-22 / --(7.2 - 5) * (0) * +9 / +6 * 2 / 7.4 - -(6 * 0) - (6.1 * 2) - 49 * 7 / 5.2 / 6) / +5 * 374.25 / -37 + 8.980 / ++9.6 / (+3 - 6 * 6 * 7 + 3.8 * 3 + 7.5) / 3 - +((1.3) * (7) / 5.3 - (9.5) * 3 / 8.0 - 5 * 1.2) * --1 * 0.9 / (1 / 3 + 8.0 - 3) - -11.5206 / (-8) / 7 * (0 + 2.5) / (7.4) - 9 / 13.797 + 0 * 4 * +9.5 - +5.8 / 7 / 8.4))',
 '(((+++5.398 * 39556.1 * 0 / -++5 + 4 * +-51 * 56 * +7 / 8 * 7) / 9.96 * (+6 / -(5 + 0.5) / 3.06 * 7)))',
 '(((549138.230 / ++2.82 / (6 - 6 * 7 - 6 + 6) / +-(7) / -8 / (2.9)) - (54 + 4.4 * 8 + 3.5) / (12.7653 / -(0.4 - 7.8) * --1.1 * +6.3 * 6 / 7 - 8.9 - -3 * -9 * 1.5 / 4.6) / -3 / -((3.8) / 7.8 * 8.9 - 6) / --79.40 + +((3) - 43 / -7 / 4 * 9.2 - 6) * (09 / 03 / 2 / 6 * 5.6 + +2 / 8.3 / 6 / 0 + 7 / 4 * 3 - 6.7 * 7.6) + ++46 * 8 / ((2.7) / 8 * 4.7 + 5.2 * 4 - 0) / 89.1 / -+8 + (6 * +6 * 4.8 * 1.4 - -9.7) * 81 / 761 - +47 - (7.3 * 4.1) * -4.9))',
 '((94.6 - 8655 / 4.2 + -++3 * 212.299955 / 4.64 / -(6 / 7.2) * -44.34 + -68160 + 8.332 - --46 * 451.79 * 5 + (9 * 7.3) * 81 * +1.5))',
 '((+(-0 - +02 - --0.7 / -+6.0 / 4 / 2.6 / 6.6 + ++1.8 / 4.5 / 0 - 8 / 9.5 / 8.5 + 7 / 3.4 + 6) * +-(+(2 + 3)) * 5.2 - 1 * (((4) * 9.6 / 1 - 8 / 3.6)) / 1.32 / +-8 * 44.9 / 07))',
 '((1 + 3 * 9.0 / ++997.8 / 5 / 1 * (6 * 7.2 - 1.7 + 0.1) - (3 - -96 / --8.5 / 9 * 3 - -(8) - +3.7 + 5 / 3.7 - 0.1 + 7.4) / (+-7.3 - 4.92 / -3.2 / 3 * 1)))',
 '((+33.8))',
 '(((((8.1 - 0 + 0) / +1.2)) / +3))',
 '(((-+9.6 - 840 * +277.358 / ++-9.5 / 99) - 48.5 / 9 * 3.8 + 4.3))',
 '((--49.8 - --((0) / 2.0 - +-1 - (5) / 3 + 1.0 * 2 - 1.5 - 2.5) * ++7 + (+(8 * 2.7) + 41 / 92.8 / -4) / -4294.9 / 3.1 / +6.4 / 2.05 + --890.2956 / 957 / (4 * 0 * 2) / +9 * 7 / (5.9) * 0.8 * 0))',
 '(((((6 - 2 - 4.9) - -+0.1 * 9.2 / 0.7 / 3.4) * 3.00 / 251.2 / -85 / -(0) * 0 * 8.5 - ((0 + 6) * 9 / 4.0 / 3 + (8) / 1.4 * 6.3 + 8.3 - 2))))',
 '((++-(-(4.8 - 9) / -2 * 6 / 4.2 * 8.9) * +7981 / -27940 * (++6.4 - -+3 * 2 * 1 * 8.7) - +((6.7 * 2.7 - 4.9 / 4.5) / (3 * 4.1) - 602 * 6.88 + -+5.4 + 8.0 + 8 / 4 - 4.6 + 9.1) / 8.2 * 26.4 * --981 / 97 - -+5.87 - -0 - +81.20 * -(0.3 + 4.2 + 6.0) * +2.30 + -95 / 176 * ++8.8 / (1.2) * 4 - 3 * 8))',
 '(((78.9 * 1.372 - (0 * 9 / 5 * 4 - 1.0 * 9 - 5 * 6 - 1) / -137.7 / 7 / (4 - 3) - 40 / (0.2 / 6.2 + 1.7) / 35.4 + -(6.8) / (7.3 + 4) / -8.3 * 1) * (-((1.9) / 6.2 + 2 - 2) * 3604) + 3))',
 '((-5 * -5.6510 - +-801.9 + (4.6 / (7.5 * 8 - 4.4 - 4)) / (--+1 / 72 / +5.7 / 2) / (7 * (5.4) + (9.2) + 1.4 / 5.9) * +606 / (9) * -+0.7 * 6 / 6))',
 '((6 / 6.3 / 01687.9 * (9.18 / (5.6 - 7) * 3 * 7.5 / 3)))',
 '((93.161 / 2 + ++38.1725))',
 '((++((4.8 / 6.9 + 6 + 6 - 3.6) * +-5.9 * (2) / 6 * 4 * 1)))',
 '(((9) * (8 + 123.1 / 1.3 + (4 - 8.0) * +-0.2 - 0 * 7 * 2.8 * 8 - 3.5 * 2 / 1 - 2 * 4.3) / +4691.9 * 9.2993 - -(-(1 / 0) / +-6.0 / 4 + +(1 - 5) * -(5.4) * (1) / 6.5 - ++4.0 * 9) / 3 + ---7 / (714.278 * -0.8 / +5.9) / +9.9 + -736 / (5 / 0.6 - 0 * 8.9) * --(4) / 9.93 / +5.9 / +0.6 * 2.9 * 6 + 5.7 + --1.81 / (8 / 4) * (6 - 4.1) * 9 / 9))',
 '((((-4.6 / -(1.3) - (8 - 3) / 1.8 / 5.6 + 1.0 / 2 * 3.5) * 3 * (7 / 0.2 * 7 + 4) + +(-4 * 4.0 * 2.2 - 6.3 + 3.5 - 2.8) * -++6.4 - ++-6.2 * (9.3 * 3.4)) * 536.4 - 269 + 6 * (+(1 + 9.1) - ++6.9 + (5.6) / 9.4) - ++7 / (8.6 / 8 / 1 / 5.2) - 42))',
 '((5448 * +-+2.5 * (+(1.4 / 2) - (9 * 4 + 9.4 - 2)) * -59195 * 301 / 32.795 - (-++-+9.1 * 0 / -56) + ((-7.3 * 3 * 1 + 7.8 / 9.3) / 58.23 * 05 + 271.6 * 4 / 5 + ++8 / 0 / 6 + 7.3 / 7.7 / 3 - 4.8 / 1.8) * 375 / +((5) / 5 * 7.8) * (1 / 4.7) * 34.650 / ++1.6 * 2.0 * 0 / 2.5 + ((7.4 + 1.7)) + --6 - 3))',
 '((-+802 * 4 * 3 / -049 * +93))',
 '((621.4 * 3 - -137.8 * 915.223 * +3.62))',
 '((30 + 5 * +4.7548 / 6.1 / +++1.27 / +(3.0 * 0.4 + 7.7) + 16))',
 '((41057.94))',
 '((0 + (58.22086 / +1.7 - -++(7) + +-+2.9 - 74 + 5.4 / 5.4 * 3.1 + 0 * 5 + 9.0 + 3.2) * +(3 - --6.1 / +0.5 + +8.4 / 4.4 + 0 * 3.0 + 6.9 + 6) / +70627 / 61 * --9.04 * +11 - 4 * -381.7 / 4.99 * +8 * 28 * +(6.1) * 9 + 174.4 - 4826))',
 '(((84.43 * (+-9 / +4 * 7.2 * 1) * 9) / -0.340 / 3.8182 * +--++9.9 / 0 / +(9 / 2.1 + 0.7) + +(+(3.5 * 2 - 7.9) - 29.38 / 5 * 6.0 * 9.4 * 4) / 1.5 * -+(6 / 5.8 * 4.2 - 2.5 * 1 - 3.5 + 3)))',
 '((14.80 - -09))',
 '((-0.80 / +(+65.6 + (6 * 7) * -2 / -7.7) * 2.54 / (5 * +0 * 2.1 * 6.2) - ++(6.9) * -2 * 01 / -+(7.3 - 9 - 8) * 3.8 / 1.3 / (0 - 6.7) - (-+(6 + 7.8) / +-7.7 - +(7 + 4.4) / +-3 * 6.5 / 3.6 - (6 + 8) + -4 - 2 * 8) + 8506))',
 '((-3.0 / +8 * 59 * (303.4 / 8.16 / 4.4 * 3.5 * 0.7 - 7.8 / +2.1 * 6.3 / 9 + +5 / 7.1 + 8.8 + 5.5 - 8.0) * --4.7 * +327 - +73 + 1.238 / -++4 * -2248.3 + -461 * -0.937 + +((1)) - --+0))',
 '((8))',
 '((826 * -(+7.071 * 5.476 / +3.1) / --7 / 5.7 - 051 / --(-9.8 * 2 / 9 * 7) / 173917.0 * 1.0 * ((1) / 5 / 5.0) * +47.4 / 49 * 7 * 0.8 + +-((3) * -2.7 + -9 - 6.8) - 2))',
 '((9.1 / 5 * --67 / (37.79 * -9 - 13 * +8.0 * 0 / 6.9 + -2.3 * 0 + 9 * 7.8) * 2.9 + 1.097 / -3 * ---867.3 / +-5.2 + (-+-0.3 / 3 * (2 - 8.0) * (6)) / 9 + -5 / +-6 / (8 * 4 * 3.3 - 1 * 1)))',
 '((44.8 * (2 * +(1.7 * 0.4 + 2) / --(9) * -+6.0 / 4 + 77.92 / -4.9 - 79.778 / -5 / -1 - 3.9 * (5) + (9)) * -8 * 16 / 9.11 / (+5 * 8 - 9.3 * 2.8 + 4.7 - 0)))',
 '((10.9192 / 02 / (67.7 + -43 + -2 * (6) * 4 / 8.3 + -0.7 * 5.0 / 4.5 + 4.4 - 8.6 - 0.0) * (70.736 * 2 * 2 / 9.8 + (8 + 6.0) / 8.6 * 4.1 + 6 - 2.7 * 0.5) + 44.0 / ((0 + 4.9 * 6.2) * +62 / (4) * 7) / 3602 + +3.324 * (+--2.9 * 86 * -5.8 / 8 * 7.2 - 0.84) / -(4.4) / +-(0 - 3) - 71.4 / (49.7 * -2 / 0.6 / 1.0)))',
 '((+(-456.9 - +8.79 / 17.02 / -8.5) * +18.926))',
 '(((+99092.80 / 496 / 1 / 5.6 / -8 / -5 + 3.66) / +(91.9 / (9.2 / 9 + 3.6 - 7.2) / 54 / -9 / 6 + -9.8 * ++5 * +7 / 8.2 / 2 - --3 / -3.5 / 0 * 8.5 + 0 / 9.0 / 1.4) / (501.9) / -+(8.6 - 4 - 5 - 6) + +4 * (19.19 - (9.5 - 6.1) - (6) - 7 / 0 - 3) - +(740 / (9.6)) * (-46.32 * +9.1 * 2.9 - -+8.0 - (6.9) + 2.6 * 0.2) + 31660 / 2 * 1 / -+0 / -(2.2) / -0 - -85.3 - +2 * 0 / +5 * 0.5 / 1 * 3 + 6 / --5.5 * 9 / 3 * 3 + (0 - 5.7) * +0.1))',
 '((8.103 / 8.7 * +0.4 * 07.5 * --+39 - 4 + 1714332.8))',
 '((---(+11)))',
 '(((+(5.81 * 0 / 2.7 * 4.0) / (19.4 * -8.4 - +1.6 * 5 / 0) + 411 * 6 * 08 - 9.483 + -++3 - +3.6 * +2 / 9 * 4 + -8.3 * 9 * 9) * 9 / +-+7.44 / ++4.0 * (-2 * 1.6 * 3.8 - 5.4 * 5 / 8 - 2 + 9 + 5.2) * 38.3 * -(9) - 0 * -9.24 / -23491.4 / ((6.8 - 4.4) - -8 + 3 / 6) * ((2) / 6.7 * 7.3 - 6.1 * 6 + 2.5 - 3.9) + -(+(9.7 - 8.2) + 3.1 / 1.2 * 4 + +7 / 7.8 * 9.5 - 7 - 7.5 + 6.9) + 0 * 8 * (5 - 2 * 4) * +(4 + 3.3) / --0.0 * -8 - -+(9.1) * -(6 / 9 - 8 + 3.9) + ++++4.2 / -8 / 55.29 * 2.2 / 6.5 / 2 - -+8))',
 '((++4 * 9256384 * 3.4 / (-(7 + 8.9) / (6.6 - 1) + -4) + +1 / ++3.788 / +34 / 5.15 * 6596.98))',
 '(((((2 / 4.9)) - +-6.1 * 9 * 06.4 / -6.2 / 0 + 8.4860 / +7.1 / +-5 - 1 / 44.17 / 6) / 87 / 7 * (92 * (0 - 0.5) * +2.3 * 4 / 0 + +3 * 4.3) / 37 / 52 * 566.3 * -+8))',
 '((-77025.859 / 34 / (9 * -(0 + 2) / +(2)) + --51 / 0))',
 '((+(6232 / -(3) - (+6 * 3 - 9.2 * 2 - 3 - 2.9) / --5.2) * (1.0) * 8902.8))',
 '((7 / 2 / 2))',
 '((+85 * 6.2 + (-9648.7236 / 4.3 / -+7.9 / 85 - 45 - 43.2 / +-6 / +9 / 0 * 3 + +-2.5 + 7.6) * 0 / (+85.5 * -+3 / 4)))',
 '((5.50 * ++--37.5 * -5 * 06956.6))',
 '((++(((2.7) / 0 * 1.1) / 5) / 98.43491 - 2.0 * 4))',
 '((-+--542 * 53 * -56.3 * +--590.327 + (46) - +5.0 * ((4.4 + 4.6) / -2 - 8.22 * +8.9 - 0.2) - (-3 + +(1) / 6) / 9.7 + --2.21))',
 '((3 * 52755.8 / -(3.61 / -3.0 / 9) * 6.49 * (5.4)))',
 '((5 / (-5982 * (5.4 + 0 * 4.2 - 1 - 9.1) / -4.72 / +(6.4) / (9.2) * 7 * 3.8 + 1.5 / +60.04 * 1 * -2.0 - 5 - (5.0) * (7) / 2.6 - +2 / 4 - 9 / 3 - 2.5) - 75.01 * -5 / 3.215))',
 '(((-2.869 / -40 * -+++9 - -(-0.0 * 8.0 / 2.3 + 8.0 / 1.4 - 9.6) * (+5 + 1 * 1.3) * 57 - 6 * -47 * (5.6) / 2) / +77757.87 * 1 / -987 * (-(5)) + ((+1.0 / +5.9 * 3.4 / 2.8) - 13.99 + 4 / 9.23 * -9.1 / 7.5) / -((6 / 0 - 1.8 - 1) / 74.5 / (4.5) - 94) / 89.7))',
 '((+935.10 / +-7 * 1 / (+61.4 * -+3 * 5.2 * 0 / 3 + 1.5 * +1 / 0 * 1 - 1 + 3.8 / 4.0) / -(7.2 - 0.4 * 3) * ((4.2) / 4 / 7) * 84 + 884100 / +0 - (78 / 02.03 * 27) / -2.1252 / +(9 * 1.5)))',
 '(((24945 * (4) + -(3.3 / 1.6 / 9.9 + 8 / 5.6 - 9.9 - 8.2) / -++8.3 / 18.6 / +3 * +4 / 1 / 4.1 + ++--8 / (4 + 9 + 1) / 1.13) * (6.3 / +78) / --(3 * 1.2 * 0 / 2.6) * 487.4 / 66.22 * +(7.0) * 286.964 / +3 * (9) / 9 * 5 - 205 - -4.2 / (-31 / --9.7 / 4 - +-8 - 4) * ((4.0 + 0.5)) / (-5.3 * 6.6 / 6.2) * (6.3 * 0.0 - 0.8 + 8) - ((5.5 / 1.5 - 4) * 95 * 1 / 3.4 - -(9) + +4 / 6.4 + 9 * 2.8) + 6 / -(1 + 0.5 + 8.8) / 1 * 71.4 * +4.6))',
 '((-55 / +-48.4 * --(+(2)) - --2 / (461 * 63.7 * 2.31)))',
 '((+5.3838 * 131 + 3.7 / +7313.7 - 06 / (8 - --5.7 - +4.7 - 4.3 * 9 - 5.3) - 4990.95 * +2.2 * +-++0 * +6.18 + 8.0 / (+0 * 2.0 * 4.2 - 2 * 2 - 2.4 + 0) * +(7.8 + 0.4) * (6 + 6.1) * 9.7 / 4 * 4.0))',
 '((+(5.18 * +3 * -34 / 3.74 * 5 / 4.9 - +392.7) / +4 / +++(+8 / 9.5 + 4.7 * 2) * 0 * -(-1 * 6 / 2.6 - 9.1) / 4 / 4.09 / 3 / (1.7) * 3.2 / 9 - ++5))',
 '((4 * +5 / 7.2 / +68.6 + 5 / (+(3 + 7 - 3) + 7.177 * 2 * 4.1 - 0.6 / (1) * 6 * 8.9 + -3.5 + 6) * -1 / ++-+1.4 / 087.583 / 10 * 79 + +-++--(9) * (+7 + +2 * (0.0) / 4.6) * +(0 + 6 + 7 + 1.5) / 5 - ((0.6 / 2 - 5 + 9) * (2 + 7) * 2 / 0.3 / 4.9 + -1.7 / -3 / 0 * 0 + (7.1) + 9 - 8.8 - 5) * --8 / ---+4.3 / ++(6.4) + 5 / +-(9) / 497.94 / ++1.6 * 9 - 92 * 365.56 * +(1.5) * +9.8))',
 '((+7 / (8) + -((-9.8) * +-+9.7 / 60.63 * +5.3 / 9 + 015.4 * 78.05 / +6 - 7 + -9.0 / 5 * 6.1 - 8.3 * 1.8 - 3.3) / (+--+3 + +-1.2 - 2.1)))',
 '((-(+492 - 0.00 / -81.3 / -2.5 + --3 + 3.5 / (4) * 4 / 0.5) / -6 * +3 * 5.1))',
 '((-08 + 982.7033446 / (+-(8 - 2) + +7 / +-9.4 * -7.9 * 5.3) - -9 / 82.644 * 8.5723 / (4.9 * 4) * 114 * +3.9 / -4.0 + 52.5 / 9))',
 '((++5.8 / 19284 / (((4) / 6.0 - 0.5 / 6 - 0 + 9) + -(4.5 - 8.1) * (1.4 + 7.3)) - (+466 * -+--5.6 + 1700.9 / --4 / (6 + 1) * 4 * 7 * 8.9 + ++4.8 * (6 - 6) / 5.6 + -8 / 5.7 - -4 * 1.9 * 4.0) / ---0 * +17.18 * -4217.9 - 7.0 - 1 * 8.3 * ((1) - 5.5) * 1 / -5 * 8))',
 '(((0.8 + 9 / 4 / +42.19 * (3.4)) / (7.34 * --50) - 47))',
 '((-2 / +40 / (+2 * (7.9 - 8 - 3) + 891.9) - ---((7 - 6)) / 5 / -03 * (+-8.2 * +0.0 - +9.0 / 6.5 * 7.0 - 8.2 + 2.6) / 379.0 * +(8.2 + 2) * 5.95))',
 '((41 + +-++-(5.5 + 6 - 8.2) + (74.4402 / -87.2 / +-5.3 * +8 - 318.607 + -7.3) / (+1 * -7.6) + -((8)) * -5 / --4 * -33.9 * +-4 - -+7.3 * 7 - 3.3021))',
 '(((-57.095 + -+---0 + ++-0.3 * (8 * 8 - 5 - 7.9) / 4 + (2 * 3 + 6 - 4.9) * 05 / (8) + +-9 * -7.1 / 2.0 + (2)) + 6 * 22 - 5488174 / -8.2 / -+-29.14 * 6 / (6 * 6.8 + 6) + 3 + 5.48 / ((1.7) / 2.1)))',
 '((5701.5600 / -(258.898 * +--5.2 / (2) / 8.9 * 1.5 * 5.4 - 0) / 72 - (39.213 * 73 * (8.8) - -226 * (8.7 + 2 - 1.9) / -8.0 * (4.0) + 9.785 * (2.8 - 9) - ++2.6 / +5 / 2.2 / 5.1 - (7) / 7 - 4.9 * 5.1 - 1) / 3 * +(+0.0 / 9 / 2 * 6 + (4) * 9 - 1.2 - 3.7 + 0) * -72 * 6 * ++(1) * 06.4 / 4.2 / 2 / 7.5 - (15 + 128.21)))',
 '(((-(-+4 / 7) / (-(5.0) + 1.6 / 2 - 4.4)) * -(((5) / 3) * (2.9 / 1) / (1.9 + 2.6) * 1 + 200 * 41 / +9) / +0.371511 + 38.0377 * -2 / +3 / -(-8.6 * 2.2) * 4496.68 + (89.3 / 0 * 2.4 - +-+2.3 * (5 + 0)) * -90 / 7 + +((6 - 4))))',
 '((0821.19 / +962590.01105 + 2 / 8 / 3.337 / 32.5 - +(-50) / -0.9 + 68 - (65 - -4 - 5 - 5.2 - 0) * 9.97 * --5.0 / ++6.1 * 6))',
 '(((5 * 5 * 1 / +--0 + 00324.5 * (4 * 3.6 / 7.2) + +433 / ++6 + ++8 * 31 + -6.7 + +5.7) + ++--+869 / 5 * 0.2 / -+(9.7 / 5.7 + 0.1 - 6)))',
 '((1895 * +(((1) * 0.7) * 91 - (8.5 * 4.4 + 9) * 46 / 3 * 1) / -+(+(2.8)) - --++(-0 * 2) - -558 * 7.415 / +((3.3) - 4 + 5 + 5.9) - 02 * -7 * 0.3 / -++1.2 / +6 + +(-3.8) / (+2.0 * 6.4 - 9 * 8 - 9.2 + 6) * 517 / 6 / 4.1 * 2 / 7.9 + +851 / +5 - +(1.7) - 44.82 + 8.1))',
 '((+(92.6 + +0.7) / ++((3.2 + 9 - 3.8) * 4 - --3 * -9.2 / 0 - 2 / 8.2 + 6 * 4.4)))',
 '((483.4 + 4 / ((+3 - 1 / 9.7 + 1.2 + 4) * (1.9 / 6.7 + 0 - 8.7) / (4.4 + 6) * 6 * 5.2 * 6.1 - (1.4 * 3 - 5.1 - 9) * --9 * (7) + 02.3) / 1620.6 * 19.4 + -++8.109 / 9 * 0.3 * (5 - 9 * 8.7) / -5.3 / -3.5 * -5.8 * 7 / 9.8 - 5.8 / ++1 * -8))',
 '((0 * 7088.26))',
 '((61171.79 + -5.620496 / (((1.4)) / ++7 / -(1.8) / 2) / --+++7.2 * -+-85 + (6 / 54 + 5.8 - 4 * (4.6) * 0.4 * 2.6 - +1) * 670 / (-(0) * 1 / 3.8 - 8.6 / 8.7 / 1) / ++1.3 * 096.03 + +6))',
 '((8.1 / +++75 + 1))',
 '((3022 * 8.5 * ++60 * +35.7412 * 16 * 91 / 5.5 / (6.2 + 8.5) * (8) * 8 + +--5.7 + (-0.800 / -(4 + 1.3) * (7 + 3) * 3.8 * 1 / 0) * +6372.67943 * (23) / +6.5 / 8 / ++2.6 / +1 * 8 * 6.7 - -3 * -(-5 * 0 + 7 * 1.6) + 2.2 * -97 + ++83 + 418 + (5 + 0.2) - 6.9 * 7 * 4))',
 '((+(-8429 + (6 * 9.7 / 6.6 + 8 * 9 + 0 + 8.8) + (7) / +6.3 * 2.2) * (-+--1) + 60.34 / 496.9 / --(9.7 - 7 * 2 - 6 + 4) * -41.58 / (0 / 8 * 4.0 - 1.9 / 1 - 5) / (3.0 - 6 - 0.6) / -(4.7) / (3.0)))',
 '((8 * 003))',
 '((-08 + 6.6))',
 '(((06 * (4.0 - (3.5) / 5.1 * 6 - 3.0 * 2) / 595 / -94.8) / 2.2 * (17 + +(8.6 + 3.5) * 60 * 4 * 4 / 0 + (1 - 5) / (0) / 0 - (9.2) * 8 / 0 - 0 * 2 + 7.1 - 5) * -(6.7 / 1 / 2.1 / 5 - 8.1 / 9 + 5 - 8) * 8.1 / (4 / 2 + 4.2 / 8) / 3 * 9.8 / (5.7) + (4.1480 / (-1 - 0.5 / 1.4 + 3 - 6.7) / ++-5.5 * --5 * -2.5 * 4.3 + 003.1) * 2.5 * ++-+4.59 / +(0 * 1 - 8.2 * 8.1 - 4)))',
 '(((2 * 5 + 2 / 18 * (7.7) / -(9.8) * 2 + -(3.8 / 8 - 8.8 + 3) * +++9.8 + 5.16 / -(1.4) * -9 / 0 + 34 * -5 - +4 * 1.2 / 0 - 2 / 8 + 7) * +(+12.8 - 17.04 / 79 * +2 / 7.6 * 8.3) * (++-(3) * (8.9 / 5 + 9 + 2.7)) * -(-9.9 / 9.7 * 7 - 3.9) / 5 / -3))',
 '((42.5 - +5011621.307 * 757.9 / (-1 * -2)))',
 '((1343.50 * 0 * -90902 * 500688 / (-+6.8 * (6.2)) / (2.8 * 8.7 - 7.1) * +88.43 / +-5.4 / +5.4 * 2.8 * 4.4))',
 '(((450735 / 1 * (+5.3 / 5 * 4 + 3.7 * 5) / 1 * 30 / (8) + 94 * 1 * 8 / (8.7 - 7) + (6) / 36 * +1 * 9.3 * 0 * 1.7) / -+(-1 / +7) / (+9.7 * ++7.3 * 1.1 / +6 * 3.9) / (--6 * 87.81 / -9 / 6 / 5.6 + -3 / +2 / 9.5) - 9.43 * 06 * 6.8434 / ++(4 * 7.4 + 5 - 0.9) - +-1 / (530 + 1.43 * (9) + -1.6) - --+0.076 * ---91.8 / ++++2.8 / +93 / (9.5 - 2) * 8.4 * 0 * 0.1 - +9.82 / (2.1 * 3 / 9.7 + 2 * 4.5)))',
 '((19 / +37 * +(-13.7 * +3.9 / -4.8 + -(4.7)) * (+97 * 74.5) / ++-+9))',
 '((7.9 * --+(+4 - +4 * 9.9 / 5.0) - -7 * 062.9 + 859 * --2 - (333.2 * ++6.3) + -1 / ((2.1) * 0 * 8.0 - 7.7) / --+9 / 87.8 / 9.3 + +-(9) + (4 - 9.1 - 8.6) / +(9) / 8 + +3 * (2.0)))',
 '((((251 / (7.5 - 0.9) - -0.9 * +8)) + +4.3 + -+29 * (+-4.9 - (9.7 + 2.4) * -0.1 + 3.4 / 1 / 8) * 5))',
 '((--3 * 7.450 - ++((1.9 + 8.4 - 5) / (5) * +8 / 6.4 * 5 - 72 - -7)))',
 '((+(-+542 + ++(1) * (4.3) * 2.5 / 2 * 4.0 / 9) / ((+-7 * +9.2 * 8 + -4.2 - 7.4 * 5.2 - 7 + 1.2) - -+(0 + 0) - 249.5 / 9.06 / 9.8 + 71.5 / +5.1) - (96.913 * 3791 + 92 * +-1.4 * (0 - 4.9) * (4.2) * 9 - 802 / 59 * -2.8 - (0.8 + 3) * (6.5) / 1 * 9.5 - +7 * 1.3 * 8 + 0 / 6.0 + 7 + 4)))',
 '((-6.1 * ((+(6.1)) + 1.8 + -4.0 * -4.3 + (1.3 + 3) / 5 / 6.6 + (6) * 6.7) - -+(285 / -5 / 8 / 9) / -+(8.41 * (4) + -3.1 - 0 * 9.2 + 5 + 9)))',
 '(((028 * +17.5 * +++(1) - -(6) - -5.923 * 7 * 97.4 * -5.4) - 74.5 * (0.8759 * 90.5 / (1.6) / -1 / 9.0 / 5.6 - 55 * -+1.0 * -7.3 * 2.2 / 8.9 - +-8) / -80.2 * 9.1 / +-47.25 / 1 + ((-7 / 7.2 * 5 - 3 / 9 + 7) + +(9.9 + 6.8)) + 51.102 * +8.1 * 70 * -+(6) - 272 / 9.2 * 41.1 / -0 * 6.3 / 4.3 / 4.1))',
 '(((+0.3 + -3.02 * -(7.4 / 6.2) / (8 + 1)) / --(+0 + (6.1 - 3.1) * -1) + --(6.8 + 10 / 0.3 * 2.3 * 1.4 + -0 - 1.9 / 6 + 6) / 6 / 60 + +9.91 - ++--6.9 / +(7.2 * 9.3 * 8 + 3.4 / 5) / +-18 / +--3.6 * (0.8) * 3 / 8))',
 '((-4 / 372.6 * ((5.6 / 8 / 9.9) * 3 - (2 / 2.7) - +(6.1) * 1)))',
 '((724.92500942))',
 '((--+1 / 28))',
 '((-7.1 + 8.121 * 5 * -+3060.6 - -7.3 / (4 / (7.4 - 3.5)) / +((8) / 4.6 / 2 - 4) * +514.10 / (5 - 5 + 5.6) * -+7 / +2 + +09602 / -60.216 / -3 + 2.1 + (-8.3 + 0 * 9.1) * -86.4 - (7 * 5.9 + 5.7 + 8.7) / 6.73 * (3) * 5 / 8.8 + (0.1 - 5.9) / +9 / 5 * 3 - 2.7 * 7.2 * 5.7 + 6 * 8.5))',
 '(((548.5 / 16493 / +5 * 34 * (8.9) * (2) / 0 / 9 + 8.1 * -(6.3 / 9.1 + 0.1 - 0) * +0 / 10) + (8) / (-(2 / 3.1 + 6 - 0.0) / 7.2 / --5 * 5.1 / 4 / 5 - (4.6) / 2 / 1.2 / 6 / 7.7 - ++3 - -2 / 0 + 7.1) - -40.129 * 7))',
 '((((299.9 * 1 * 3.7) / 28 - (-+5 / 7 * 9 / 1.7 + 7 + 1.7 + 3 - 8.5) / -2.1 - (+5.8 / 0 - 8.2 * 4.0) * 609.4 + -(0.4 - 9) * +5 + 97.9 * +0.7 * 7) * 4 * (-+01 - 156 / (5 + 6) / -0 / 4 / 4 + --0.4 / 5.0 / 6 * 0 - +2 - 4.1 / 1.0 + 5 + 3.4) + 41.5 / +-(1 + 4 * 1 * 5) - 3))',
 '((-59))',
 '((-+(8.7 / 14 / --2.1 * -9 * 0.2 / 6 + 82 * 6 * 4 + (1) + -8.9 / 6.4 - 6) - (((9) / -3.6 * 6 * 8.2) + -++9 * -18.7 / -+8.5 / -9.8 * 1 + +9 - -3.2 * 0 + 4 - 4.4)))',
 '((7.6 / ((-6 * 8 * 0.2 / 3 + +2 * 0 * 3 + 0.5 / 2) / (+9.4)) * 1020.5497 / ++--8.6))',
 '((++-4 - ---6 / 49799 - 28.95198 / 3.81 + (-+7.3 / (8.5 + 9.4) * +4.1 * 5 / 2.8 - -+4.2) - 44.4 * (+6 * 1 - 2.8 / 0.1) * (4 / 1 + 0.8 - 3) * --8.8 * +2))',
 '((57 / -(+887.203) * -+((7) / (1) + 4.1 / 7 * 0.1) / 68 * 3915.58816 / (1.6 * 4.5 * 1.7 - 1 * 6.8 + 3 - 8) / 14.340 / -6.7 - (77 * 25 / 4 + +94 + 761.57 / 9 * 4.1 / 0) / 5 / (-75) + 5.2 / (--5.1 - 37 / 1.0 * 2.6 / 8 + +0 / 5.2 / 4.6) + (+-+9 * 64) / +2 + (3 * +9.9 * 3 / 3.6 + +2.4 / 5.8 * 0 + 0.5 + 7.3) * +-2 / +-(9) * 1.47 + 80.9101 - 5.9 * 97 * 2 * 7 * 6.2 - (2.4) - -7 * 9.3 * 1 - 3 - 6 - 4.1))',
 '((6 * -(--(4 - 2.8) / +(5.0) * +3.9 / 8 * 6.9 - +7) / 9.9 - 45.305 / (((0) / 1.5 * 1.9)) * 3 / 71.9 + 9 + +6.8 / -(3 + 5 - 4.4) / -0 / --9 / -+9 + (+-5 / 9.8 * 4.8 * 1 - 7 * 4.8 / 4.6 - 6 * 5.4 - 7.3 - 0) / 0.12 * -++5 * 2 * 4 * 8 / 3.7 + -+(9.9) / (1.0 / 3.0 - 9 - 4.2) / 3.9 * +0.5 / 4.7 / 5))',
 '((-+-++-213.0 * (45197.5 * 4.805) - 8 / -+-8 + 1 - 3 / 8.06 / 8425.10 * 256.9 + +(5.9 * 9.3 * 9.5) / +532.50 / 2 / +(7)))',
 '((8.1255 / -(-4 * 445.38 * (4) + --(6) - +5.6 * 9 + 4 / 4.5 * 2 - 0 / 9.3 + 8.1 - 1.9) + +3.619 * 48.01 / 2.9 + (9.7 / (3.2 / 4.6 - 6 - 7) + (2 * 9 - 1.8 - 2) / +(0) * 1 / 5 / 5 - 22.4 * -4 * 3.3 / 1 - 6 + 2 / 6 + 0) * 0.4 + +7 - +++(5.2 - 0) * 40 * 1.204 / +(4.3)))',
 '((8 - -258 * -6153.8))',
 '((-+2.9 * (+-(2.8 * 0 + 4.0 - 8.1) * (-4.8)) * +(11.1 / -(9.8)) * (9.606 / +9 * 0.4 / 0.9 * 0.5) * +582 * +-19.40 / 3.11))',
 '(((0 / +25.4 - 11) / 0.86 * +5 / 0.8 / -(-9.2 - 0 * 7 + 8.6 + 2.9) * +(5.7 / 2.2) + (+4.7137 * ((8) + 3.8 * 1 + 8 - 0) + 5.73) * 96 * (3 + 3.05 / 1 / 3.8 + 6.7 * 8.0 / 7)))',
 '((90.8 * 2 * +384321 * (698.7 * +8.8 * (8) + (8.5 - 3.9) + 9 / 8.4) + 4 / 7 + 4.986 / ---8 * 24038.22723 / 14.2 / -++6.6 * +(1.1) * (5) / 0 / 6 - -++-4.34 * (+(2) / 7.6 + +7 / 2.5 * 9.3 + 9 * 0.5 - 4 + 6) + ---5.6 - +2 * 6.9 * 47 / 6.8 + +(9) / --6 + +-8.3 * (6)))',
 '((+((+4 / 1.0) - (7) / ---0 / --6.0 * 7.1 - -18.6 / (5) / 1.0 / 7.8 * 4 + 90.30 / -9 * 3 + 4 * 6.4 / 1) - 8.72 - +894.1 * ++2 * (-(1.7) / -0 * 1.8 + (8) * 5.7 * 3 + 6 * 4 + 0.4 - 6.2) * 1428.41 / (8 + 8.4 - 1.1) * 24 / 6 * 0.9 / 8 + -50.68 / 00 * 22 + 66227.68))',
 '((5 + (--(5.1 + 0 - 4.0) - ++32.7) / ((6 / 7 / 4 + 9.9 / 3.0 + 5.9 + 0) + (8.8 / 2.8 + 3.3 - 3) * +-2 / (0) - -4 * (8) * 5 * 2.2 - -4.8) * -4 / +-0 / 5.6 / (8 - 5 + 9.9) * 4.80 / +3 / 2.0 * 1 + 5.67 * -(6 / 0.5 / 8.4 + 8 * 0.4 * 3.2 - 5.2 - 0.3 - 7) * --642 * ----7.1 - 79 + --2.7 * +-50 / 5 * 9 / (5.0) / 8 + -(1.5 / 4.5 + 0.6 - 0) * +(9 - 9.4) * (4 - 4.5) / 7 / 8 - -(2.7 - 3) * 2 + -4))',
 '((+4 * 36 - 72 / +---2.269))',
 '(((+68252.26 * -5.057 * 55 * -(1.1) * (0 + 3) / 7 / 3) / +0509338 + +(3515 + (2 / 6.2 - 1.0))))',
 '((64 + -(9.8 * (2.2 * 6) / 0.0 / 4.8 * 2) / 84 + 319.42 * -838.83 * 74.6 + (+--4 - +9.8 * +8.1) + 07 / (2.2 - 9.0 * 4 - 3 + 9.5)))',
 '(((464422.5 / 66.47 + 5 / 355 + +396.3 / 589.681 - ++(8)) * +-025.812353))',
 '((0 * 392 / ((9.6) / -13.75 + +(0.3) / +4 / +2.0 / 8.7 * 2 - -9.1 * +8.2) - ++7 / 4 / --(7.6 / 6.8 * 7.6 - 8.1 * 1 + 9.5 + 3) / 7389.600 * 3))',
 '(((7.254 * 8.74 + +-07 * -+4 / 4 * 4 + -7.623) / -+77080 / (5885) * 4 + 7 * ((+9.9 / 3.2 + 2.9 - 3) * 1 / (9.4 - 9.7) / (9.4) + (5.0) * --1) - 53 / 3))',
 '((+0848.5 + +(----2 / ++-0 / 7 / +8.7 - +-+0 * -9.2 + -8 + -2 * 6 - 4.3 + 8.9 + 4.9) * 50.9 + 4.5))',
 '((((+(2.6 + 2) * 74 / 5.7 * 8.0 * 7.7 + --5 / -5.1 * 4 / 5.4 - -6.2 * 0 * 5.3 + 0.0 / 1.5 + 6) * (84.6 * 8 * 4.0 / 5.0) * 0.2 / +-(3) - 03 + 4339) / 2 + +-62 / ((-0.3 - 5.9 / 4.3 - 0 + 0) - 624.124 / 2 * 4.4 * 9 / 7 - +(6) * (5.7)) * --+(8 - 2) * ++++-7))',
 '(((+(-2 / -9.7 * 5 + (3.5) * 8) * 4.1 / +42.50) / 3.8 / 67.7))',
 '((((+(3) + +(9) + 1 * 4.6 - 0.7 * 9.1 + 9 - 2) + -(7.4 - 9 * 8.4) * +-+9) * +3.81 - (8.17 * +27 / 0.0 * 21.90) / -++(+3 / 0 + 8.2 / 5.7) / 2.1 * 64349.47 * (5.4 * 3.6 + 6.6 * 0) - 3783.4))',
 '((8.3 * +1 / 3218 - 370 / 0 + -0711 / -9 / 49 + 9 * -+-+1.9 / 1 / 191.36 * 4 * 3.3))',
 '(((+7.80) * +5 * -+8 / 1544.13 * +(7.5 + 1 / 1.3 + 4 + 1.9) / 0 * --6.5 - 0.0 + 2 / -+3 * 45 * (4.3 * 5.8) * 2.134 / 92))',
 '((+7.8459))',
 '(((4604.27 / -0 / ---2.8 + +8.0 * +9 + (8) / 570.1 * 4.8) / -(6 * 902.9 * (4)) - (((1 + 4.8) + -3.7 / 3) * (+0 / 2 / 5.9) / -0.9 * --9 - -9 / -(3) * +-7.7 + ++(6.8) / 0.35 / -8.6 * 8.3 / 7.6 + (2 + 2.9) * -3 + -6 / 6.3 * 5 - 7) * -534 * --4.7 / -+2 * 2337 / +-5.9 + 30 * 4 / -0744.77))',
 '((+((+6) + (+7.2 + 4.0) * +(5.0) * 1 / -5.6 - ++2 * 2 + 78.41 / 6 + -1.0) / ++6.19 * +((1.0 + 7 - 8) / +9 * -5.5 * 0.8 * 9 + +4.9 / +1.9 * 6 - -5.4 - 0.2 + 8 - 4) / -547.942 / 7.7 + 4251.5 * 1.72 + 455.1 * 265.75 / 6797 + +(4 / 4.2 * 2.2 * 6) / -3.7 * 61 * 849.606 / 60.89 - 9.6 / 0.6 - 3884 / +(3 - 4) / -+9 + -97 * 9.4 / 3 / 2))',
 '(((-7)))',
 '((28.34 * 05 - --++(+9 * 0) - -0 * 38.355342 * ++9.21 - -(9 * -5.8 / 8 * 6) * 9029 * ---8 / 237.4 / (6 - 0.9) - 9.20660 / (4 * 3 * 8) + -9 * +-6 / 3.5 * -1.1 + ++-9.3 / (0)))',
 '((--(240.6 + --5 * +0 * 2.5 / 2 / 1.6 + 96.6 * 1.6 + 0 + 5 * 5 - 5.5 + 3) / +5.5 + 83471 * 544.5770398 / -8.0 / ++8 * -+5.2 * (1.0 * 6 + 6.6) / 35.14 - -(2 * -4 * (1) / 2 * 5 + 6.9 + 6.3 - 9 * 5.1) - 8.0 + 12))',
 '((+++151 / -+6.8 / +(44 / ++4) - 2.0 / 4 * +-5.0 * 36.2 / 704 / 34.97 * +7 / +8 * 5 / 0 + 04.1441082 + 995))',
 '((+77 / (9.5 / +(2 / 8.9) / (1 / 3 - 1.3 - 2))))',
 '((4 + 97 - 4))',
 '((++-9327.71 * (-43 - ((9.1) * 7 - 9.1 - 5 + 7.6) / 9.42 * 8.0 * 6.0 / 4 / 9) / +--329 * 95.07956 / 7.7 * 98.69))',
 '(((+-916.5981 * ---+-5.8 - (+8.3 / +1 / 3 / 3) - -+4.0 - ---1 / -(9.2) * -4 / 7 * 7.4) * +(---0.5 / (6 + 5.2 + 2)) * +--(-6.8 - 8 - 8.2 - 0) * (-+(0) * 47 / +5 / 6.8 * 7.7) + 59.9 * 6))',
 '((18.57))',
 '((+--57))',
 '((-507 / (--+(5.2 + 2.0)) / -(1 - --0.7 * (3.5)) * +-+(5 / 0 - 8 + 6.7) - +-9.51 / +00 * (4.026 / (3 + 5) + (6 - 8) / 1.6 * 2 / 6 + +4.4 * 1.8 / 1.8) / -9574 * -+++7 / (7.3 / 9.9 - 0.3 - 2.6) + 8.2 - --9 * +3 / -29 * 13 * -2.0 / 0.8 + 85744.91508 + 7 * -(9.8 + 2) - 8.3 - 02.22 * (3.1)))',
 '((2.9 * ---24987.5 * 4.9904 * +-1.7 - 71 - 3.38642 / 58))',
 '((83.7 * 1044 * -(60 / 27.20 / 8 / 5.6 * 4.6 - (9.5) / 6.5 + -8.7 * 8.5) + 5.5 / 06 / ++((0.9)) + 06 / -+(9 / 1 * 4 + 4 + 6 - 5) + 3 * 17 - +7.2 / -(1.7 + 6.6 - 1) / (3.1 + 6.8 + 6.4) / 54 / 7.6 * 8 / 4 + 62))',
 '((((9.7 / 82 / (6) / 0.9 / 4.5 + (5 - 0) / 4 / 1 * 0.0) * 96065 * +-+8) / 9570 - (-+3.3 / ((9.6) * 1 * 4 + 7 * 9.3) * (3 + 5) * -+7.5 * 6 / 8 / 5.6 - 8 - 544.44 / 38 - 0.23 / 4.9 * 1.7 / 0) + -++0143.190 * -74 * 75 * 6 * (9 * 8 + 2.9 + 7.4) + (-++7.5 + 3.04 * 7 * 7.6 * 7 - 9.4) / -((0) / 0.0 / 6.2 + 5.6 - 4 + 1) / ++(0.9 - 9.8)))',
 '((7.5 * --8.3 / 5.37 + -+-++(6 * 0.1 + 8) * -(+-2 * +7 + --5 * +0.5 * 1.5 + 4 * 0.7 + 1 / 4.7 - 5 + 3.9) / 548.6 / -(5 * 5 + 9.0) * 5578.3))',
 '(((-8 / -+100.3 - (+8 * +6.5 * 8.7 * 4.9 + (1.6) - 0.2 / 3.5) + +(4.0 * 2) / 49.4 * (7.8 + 3.9) * (3.2) * 9 * 9.4 - -07.8 * +(2) * +0 / 8.3) / +411 * 7.5 * 6.0 * 9 * --34.96 * -+(9.3) / -+0))',
 '((345))',
 '((14 + 22015241 * 35766 * 4))',
 '((6 * 3 / 9 + -6.32 - -3.686 * 8.0 * +(3.3 - 0 / 2 + 1.9 - 5) * (+2 + 3 / 4.3 + 9.1 - 3) / -37 * 5 + --+(3 / 6 - 0.3 + 7.8) - -1608 * --5 / 5 / -6.2 - +++0 + (9.3 * 0 + 6.3) - --5.0 / (2) + (8.8) * 9 / 3.1))',
 '((+4 + 607))',
 '(((1.7710 * +-7 + 3 * 2.95 - (3.7 / 2 * 0 - 4.7 + 4) / -53.08 / 4) * 73.6 / 3854 + -55.4))',
 '((--90.1 + ((8 * 1) * 6587 / (0 + 2.8 + 0.5) + (2.9 * 6 * 1 + 7) / (1.8 / 9.6 - 9) * +(1.5) * +2.9 * 0) * (319.1 / -70 / ++0 * 8 - ++0.8 / 46 - 1.6 / +4 * 3.7 * 3.8 - 6.0 / 2 / 3.9 - 0 / 1.8 + 1) / +(7 * +8 * 4 * 1)))',
 '((+(-(0.6 * 6 / 8.4) - +++0 / 1.9 + 6 - +-5 / 2.1 * 4 / 4) * (3257 / 77.8 * +66 + ++-+4.7) / 0 + +-8 / -3.18 / 28))',
 '((4.3 - 1.3166))',
 '((0 / +8.4 * (9 + +(4.4 - 8) / 8.5 / (4.3) * 0.0 * 1 - -(4.8) - +9.7 / 3 * 7 - 3)))',
 '(((--5 / (+2.6 * 2.7) / (-1.7 / 7) / 79.97 * -(5) / 7 / 2 / 8 - (52 + (8) * 6.2 + 1.3 / 5 + 9.4 + 8) / -65 / 13 * 16 * +2.8 - (5.8 * 1 / 1.2 + 4 * 6.8 + 5.2 + 8.9) + 77.77 * +1.0 - -8)))',
 '((9614 * -2.32 * 5 / 8 * 5 / 5067 - -(21 / -6 * 7 / 8 / 2.0 * 3.4 + +7 / +-3 * +4.3 * 9.7 * 4.2) / --(8) / -+-(8 + 8 + 6.1) / +8636.7 * 51 * 2 * (8) - 8.553 / --((3.1) + 8) / -++-4))',
 '(((771004.72 * 4 / 77 * +21.20 / 69 + 79111 / 91 / 3 * 86 * 5.5 / 0 / 2.2) * 9 / +19.3 + +28.921 * 62 / 31383 / 40 / 3 / 3.8 * ++2.7 * -8 + (58 * -38.6 / ++9 / 1.2 * 6.6 / 9) * (87.67 - +(8) * 6 / 0) - 37898 / +3.301 / 83.693 - 1 / 9 / (7 + 8.8) / 36 + 5.766))',
 '((8048 * 3 / 08))',
 '((07.184 + 8695.6 + 54 / (+3)))',
 '((-(1 / +862.7 + -60.147 * 67 / 63 - +++6 * -5 / -7.6 * 6 / 3.5 + ++4 * 8) * 23.49 / (+(0 / 1) * +(9.4 + 0.3)) * 2138.2 + --((9.5 * 9) * 7 / -3.3 + --6.0 / (7)) * --((6 - 1.4) * 5.6 / 5 / 0 - (8) * 9.2 / 6.3 + 9.8 / 7) + (+31.8 - 569.3) / 44184 * -(8 / 1 * 0.2) * -+12 - (--0.3 * -8 * 2) + -265.222 + (-7.8 / 4 * 6.5 + 7) * +++3.5 + +--2))',
 '((8 * 9.70 * (97 * (5 / 4.9) * 9.93 * (7) - -91) / -9.6 + ----(+8 * 8.1 - 3.9 / 6.4) * 0 * +++3.7 * -58 * 0 - -848))',
 '((-975.14 / +831 + (1.5568 * 06 / -+5.8 + -(7.1 / 2.0 + 5) / 3 * +7 * (0) / 7.7 * 9.6 + (5 + 6 - 6.0) + -2.3 * 8 * 0.2 * 6 - (9.3) * 7) / 832.5 / 4 * +++5.1 - --5 / 2460.3 / 72 * 76.77))',
 '((266 / 1 * --09.95 * ++5621.954))',
 '((0680.9 * 099 - -3))',
 '(((-57879.56 * (-5.0 / 3 * 1 * 0) / (6 + 8.5 - 1.9 + 9.8) * --+4 * 76.4 * -1 / 4.3 / 7 - +85.9) / ((-+7.3 * 9 - +1 * 3.0 - 3 / 3.0 + 8 - 0) / +-71 / (8 / 6.3) * ++7 * 0 / 6 * 7.1 - -(9 - 6) * 047.02 / 80.61 * +0.8 + (2.0 / 4 - 2) * 5 / -3 / 2.7 / 3.0) / --84.7 / (--+4.5 / (0) * +9.2 + 3.5) + (++(1 * 9 + 9.4 + 2.3) / -3 / +39 + ++(8) * (8.6 * 4.4) - 5.387 / --9 + +6.3 - (0.7) - 0.1 - 7 + 4.2) + -+642.0 * (2 / 53 / (6) * 9.8 * 4) + +-+61))',
 '((87.6324 * 86.93 * -+++2 + (51 * 1) * +-351.72 + 5 * (+(7.4 + 1.7) * -+0 * 8.5)))',
 '(((5703 + -+86 + -(6.9) - 10 / 67.4 - (2.2) - 1.1 / 8 + 7 / 6.9 - 5.6 - 5)))',
 '((8 * 771.0 / +35 / 2.30 - 070.7 / 1.29 * -5.2 / (47 * +1 - (3.0) / 5.7 * 8.6 - 5.3 / 7.3 + 3.8 - 2.9) / -29 * -1.3 * ++9.7 - -1 - -8243 - (-4 / (8) / 4.2 / 2.4) * -+(4 - 7) / 8.9 + (-4.5 * 3 - 4 / 6.2 - 5 - 6.2) + (4 - 6 - 4) * 38 / 5.7 / 3 * 5 - 5 * (8.9) * 4.1 * 1))',
 '((-3.4 / (+--6.9 - +9.556 * (7.7 / 4) / -6 - -0.2 + (0.0) + -3.3 + 4.8 / 8.2 - 4.0 + 5) + 8 + 9.7897263 / +(02.8 / 6 * 6 / 2) + (-+3.2 * 64 / 4 / 0.2 - 4.28 / 3.0) * ((1 - 0))))',
 '((-68 - 9.66 / (250.1 * (8.4 / 7 + 2 + 7) * 1.7 * +7 / 3.8 / 9.1 + 658 / (5 + 2) * -7 / 1 - (1.1 - 6) / 9.7 / 3.6 * 5.1) + ++7.38))',
 '((((+37.2 * -8.2 * 9.2 * 5 / 5 + (8.5) / 9 - 4.7 * 7 + 1.9 * 7.0 + 4 + 2.7) / ++(8.4 * 2.8) * +0 + (+(5) * (0.7) * 2 / 8 - (3) / 4 * 5.2))))',
 '((+-0 + +9 - 321))',
 '((+(11.6 / +673.23 * 906 * 84 * 8.1 / 9.0 * 7 + 1) * (-83.5 * ((0) / 9 * 2.2 - 1.5 * 2 - 5) + +(0 / 7.4) * 5.0 / ++4 * 6.9 * 1 - 390.6 / 92 / 2.3 * 7 * 8.9 - (6 + 6) / (1) + 9.4 - 2.0) * (--1.61 / (3 - 6 - 0.6) + 606) * -(+0 - 9.2) * (-(0.2) + 0.2 / 2.9 / 0 - 4.8 - 7 + 2) / -+-4 * --+7 / -8.3 * 3.5 / 3.2 / 2.2 + ++24.55 - 692.73 - 58 - (++5.7 * (1) * 0.7 - -0.1 / 8.8 / 1.2 - 7 * 2 - 3.1) - +3))',
 '((7.97))',
 '((+930.7 + 9.0 * 97 * (437 * +9.0 / +0) / ++--0 * 1.3 * +-+0 * +2.1 * 4 / 8 * 4 + 7 / +50.9 * +-(3 / 6 + 2)))',
 '((4945084.4 / 596 + ++66 * (44.1555 - (7.2 * 8.9 - 2 + 4) / 7 + (8 - 8) / 6)))',
 '((((7 * 58.6 - 8.17 / 2 * 1.8 * 7.3) * +-45 / 3 * -+(5) * +8.1 - 312 + 2 * +(1.6 - 4) / --4 / 0.0 + -(1.3 - 0) + (4.3 - 3) * 8 + 3.2) - +-++-6 * 7 + (6 / -++3.7 * +7 / -3.0 - (7 * 3.6) * +(0) / -2.3 * 7.9 + -4.9 - -6.9 / 7 / 2 - 2 + 0 + 2)))',
 '((7 / +--(-+2 * 5.0 + (3) * 3.2 + 6 * 4.5 + 4 - 8) / -+53.8))',
 '((+(64.1 * +-44 * (9.4) - 830 / -5.2 / 1.9) / -3 / -(-8 * (8 + 9) * 4.2 * 5.9 * 9.0)))',
 '((4.0 - (-5 * -+22 + 4143.19 - +34 + (0.8 - 4) * 7.0) * 0463538 * 032 / +6573.07 / ++50.93 / (6 + 7 - 4.1) + 3 * 72146 - 4 * -(-5 * 6 - 5.7 * 8.1) - -9.2 * 890 * +5 * 5 / -8.1))',
 '((+58393.3 + 4.4 / ((3.6 / 5 - 2.8 / 1.0) * (2.9 - 9.4) / 19.14 + (8 / 6 - 8 - 8) / 8.6 + (7.3 - 6) / 9 * 3 * 0 - 6.3 * 2.3 / 1.4) * 38 / 5.74 * +68 / (1.9 / 1.9) / (2.6) * +7 * 1.1 / 6.3 - -(+--5.5) / (0 / ++9 + 39.02 * 8.8 - (0.1) * 3.0 / 4.8) - +-+(7 / 8) * 34 * 7))',
 '((1.5 + (30.1 * -(9 / 1 + 0 - 8)) * 8.0 / -7.4 * 56 * 8 * 2 / (4.5 - 4.7) * 9 + 17 + 5 * (+(0) / (5) * 2) * --0.28))',
 '((1.3 * -+57.2934 / +(+-5.4 * 72.09 / (2.6) / 5) + (8 / -9.78) + (6 * ++-2.9) / 82.3 + -1374.1 / 54.2 / (3.3) * 829 * -4))',
 '((059.5764 / -1 * (77.3 * -(9.2 + 7) * 38 + 4 * 53 / 8.7 / 2 * 3 - +(5.3) * (9) + +1.5 * 5 * 2.1) / 40258.2 / 4 / 179.31 / (9 + 4.9) / --9.6 * 5.6 * 5 * 8.3))',
 '((+1262 / -4 * 74 - (-8 - --(1.8 - 7.4))))',
 '((-(15.06 / 0 * (3 * 9) * 71 * 4.4 - 6192.52 / 8.0 / (7.7) / 6.1 * 0.1 + ++(1)) / ((+9.7 / 0.6 * 9 * 5.8 - 8.1 + 1.1 / 7 + 6.3) * +986 * 7.294 * +1.4 / -9 * 4.9 - 095.23 * 968 * 9 * -8 * 5 / 5 + 747 - +6 * (5) / 3.5 + -9 / 1 - 0.1 / 6.9) / (--+(2.5) / 5 / 59 * (8) / 9 * 9.7 - (4 + 9.3)) / (+-+5 * 66 / 3 - 3 * +9 - 8 * 0.3 + 7.1 / 0 + 0 + 7) * +0.455 / (8.7 / 6.3 / 3 - 9.4 / 0.9 - 8.2) / (4.5 * 6.4 + 4.6 + 0.3) / -0.5 / (3.5) * 8.7 * 9))',
 '((+((+6)) / 38 * 2.27 * +74.7 / 8 - 0.86 / (3.4 / -+8 + 1 * -+3 - (0 + 7) * +0)))',
 '((-971428 / (++(3 / 3 + 4 + 9) / -(7.8 / 5 - 8.5 - 0) * 34.82 + +(0.3 - 3.8 + 3.1)) / -+-595.305 / 441 * ((5.1 + 7) / (6.2)) - (9 * --2.0 * 897 * 7 * 0) * (-5 / (4 * 8) / 2 + 05 + +2) / ((9.5 / 5.7 - 4 + 3.5) * +(9) * 5.4 / 7 / 7 - -0 * -4 + 2.3 / 9) * +(-0.9 / 0.9 - 6 * 1.8 + 5.8) / 6))',
 '(((1 / (9 - 2.9 - 7.6 - 8 + 4.5) - -++5 * (-2) / 63 / 89 / +2 / 3) * +++--+(9.1 + 2.6) * (41.43 * -0 - 770 + 5.8 * +4 / 5 - (5) * 7.2 * 9 - 2.8 + 1.1) / 9.3 * -37.57 * (+2 * 2 * 6) - 77 / -9 / -7 * +595.5 * (4 / 5.9 - 2.5 * 6 + 9 - 8) + (4.2 / 5.23 + --(2) / --5 - +7.7 * +6.4) - 301))',
 '((((+44 * 1) / ((9.1 - 8) / 7 / 4 * 0.0 + 8.8 - 4 / 6 - 8 + 8.6) * ++--4.8 / 301 * +9.5 * 1 / 7) / 2.6550))',
 '((-(+18.10 - 3573.30 + (5.4 - 9 - 7.1) * (5 + 1.4) * 8 - ++0.6)))',
 '((+78 - (((5.3 + 3.3) * 5.4 / 9.4 / 5) * (+1 * 0.2 / 3 - 8 / 9 - 5) * +(9 - 8) + ++1.41 - (6.3 + 5 + 9) * 38.37) - 364602.0 - -++523 * 5.0 * ++-+4 * 8 - 2670.00 * 70.2 * -++5 * -0.4))',
 '((4.22))',
 '((-647.49 / (-(8 / 9 + 0.7 / 5.5 + 5.0 - 6.5) * 7.42 / ---0) + 78 * (39) + 745977.758 * +3.0 * +2 * --8.62))',
 '(((((1.4 * 2.0 + 3.6 + 6) / +3.8 * 9.4 / 7 - -6.8 / +1.4 / 0.5) - ((4 - 7.7) * +6 + 3.5 - 8 / 0 - 4.3 + 3.7)) - (+3 * (5.9 + 5.6 - 1.7 - 5.9) - ((3) - 1.7 - 1 + 4) * 9) / (-++9 / (7.9 / 2) * 8.1 - (9.2 - 7 - 6) - (0.5 - 0.4) / 9) / 0.04 * ++0.35 * (-5 / 8.1 / 1.5 - 0 - 1.5 - 0) * 5 * 05 + -+570 / -(+-8.9 / 8.1 - -3 * 4.3 * 3.4 - 1) / 9 / +14 / +-(2) + (46 / -7.0 / (5) + (5 - 9.5) + -7 * 8.9 * 1) - 866.3))',
 '((-7 / (((4.7) * 8.6 / 9 * 6 - (1.2) * 7.3 / 6 + 0.1 / 3.3 + 6.6 - 3.9) / 7185 / 6) * 77.96 / +(67.5) / (60 / 1.7 / 0.3 * 5.6) * 1.417 - 9 / 82.3704 * +-(+1 * 1.0 * 1.4 + 5.6 + 0.7 + 6.0) * (25.6 * 2.2 / 7 / 0 + 2 / 8 / 4) * (3 * 5.7 * 3.0 + 8 / 3 + 8) + -(389.26 * +-5 / +9.6 * 2.4 / 5) * (+86.64 * --6 * 0.7 - (0 + 1) / +9.9 / 1.0 * 3 - -3.3 * 7.0 / 9 + 4 / 0.2 - 0.2) + 2 / 1081.1 / 7 * 3.23 / 3 * 9 * 3.2 / 6 + +1.1 + (1 * 3.9 + 4.3 / 6.6) * 980.3 - 19.6 + 2.4 / +1 + 9.0 - 5))',
 '(((175 + 3046 / ++(3.5 + 5) * +58.8 * 20) + -3123 / (-988.97 / --6 / 60 + (8.5 / 1.7 + 2 + 1))))',
 '((403.3 - ((-(9))) / 6 + 6.321 * -1.28 / +((2) * 1.0 * 2 + 9 * 5 - 3.1 + 9.7) * +42.010 - 65 * -(+9.7) / -175.65 / (2.2)))',
 '(((+-+-67.1 + 365 * 7 - 1958 * 4 * -2.8 * 0.7)))',
 '((++(31.4249 / (8.1 * 7.5) / 41.7 + 1.8 / 53 / (1) - 9 + -9.8 - 5.6 / 0.5 - 0.3) * 46 / +(0 / -2.1 / 9.4 / 0.0) - 2.1 * (+6.40 / (3.6 / 9.2) / --2 * (6) * 9 * 0.3 - 3.04 - 54.1) / 6))',
 '((((++-6 - (4 - 3) / 0 / 6.4 * 5) / 5 - -(1.3 / 3 / 4.8 - 0.0 / 2.3 + 6.2 + 1) / -(0 * 0) / (0.6 / 3 + 8 - 2) * 41 * (8) / 7.9 * 7) + --+440.3 * -+(52 - -4 / 5 - 7 * 4 - 3 - 2.8) * +-3356.46 * 5158.9841 / -(5 / 8.4) * -(7) + +--(-5 / 2) / +85.52 * 785 * 1 * 2.1 + -(9 * (1.0) + +8 * 4.1 * 0.7 + 9 * 6.5) * 5 / (-9.8 + 2 / 6.7) * (0.9 / 6.6) * (3 + 6.4) / +5 * 3 + -695.5 * 1.3813 * 78.640 * -0 / +1.4 - 0.72 / 7 * -+0 - 0 + -+4 / -4 * 0.3 * 2 + 9 * 2.2 + 7 * 4.2))',
 '((-83 - -(-+81.92 - (4 + 3.1 - 7.3) - +(8) / -2 * 0 + -5.7 / 0.2 / 1 - 5.4 + 3.2 + 6) * 15185 / -5.91582 / +88.2 * (-1 + 1 * 6 - 1 - 2) + +16.2 * (52.0 * +6.4 / -2 * 0 * 6) * +(+0 / 3 / 1.3) / 1033 * 9 / 75.42 * 3.5 / 7 - ---96))',
 '((++((0.4 / 7 * 5) + -10) - +7 * (2.4) * 34 * +6 - +1))',
 '((+-04))',
 '((85))',
 '((((68 / 63.4)) * 12 / -05.234 * -3.71 / (31 / -6.0 / 2 / 8 - 2 + 7) - 27 * 1))',
 '((-2653 / (++787.62 + 6 / -75 / 8 / -4 / 3 / 1.4 - +4.8 * 47 / 7.7 * 3) - +0 / (8) / ++((9.9) * 3 / 4.2) * -(1) - 6.2))',
 '((6 + 879.6 / 5 * 91.4 * 0.0 - (4877 * ---1.1 / -+5.2 * 7.9)))',
 '((-+(--48.89 / +-7 / ++7 * 4.9 - 0.0 + 58.87 + 9 * 2.6 / 0 - 3 * 6 + 0.0) * +6435118.5 / 02.655 * 15.3 + 9.04 / -9 + (725 / -7) * (+(1 - 0.4) * +0.0 * -4 / 5 / 8.8 + (7.8 + 7.2)) + 03.3 / 0.8 - +(-6 + 0) / (7 / 1.6 * 9 + 3 + 5.8) * 8 - 4.7 * (2 / 7.5 + 1 - 4.3) - --(1) / 54.6 + -5.9 / 7.3 * 7 * 8 + -6 / 9 * 8 - 1 / 6.7 - 1 - 5.7))',
 '((4070.693 / -+((8 / 5.2 + 4 - 3) * 6) - ++-((0.8) * +6.8 + +5.8) * 373.1 / -(20.5 * 1.3 / 8.1 * 2) * -0 / -(2.1) / (1) * +-4 * (6)))',
 '((7 / ++6.2))',
 '((829 * 4.3 / 1.8))',
 '((59.9 - -(-+-+6.5 - -73 * (2.3 + 0.0) * 1.0 / 2 / 0.0) / +92.4 * 6 / (2.2) * ((7) / 5.1 * 5) / 42 * +9.8 * 1 / 8 / 7.8))',
 '((759 / -+471.1 / -+(8.0 / (3.9) / 4) / 51.7 * -+6.36 * 7808 - 8))',
 '(((4 * -2 / -+(9 - 8.0) / ---6) / (+4.2 * ++1 - -6) * 8.5353 / 8378.3 + +-+-(-2.4 / 8.7 / 4.7 + 1.5 / 8.0)))',
 '((-7.8 / (+1 + 6.8) * -77022 / --7.2 * --812.3 * --12 + (-4191 * ((7.5) * 6.3 / 5) + +0 / 3.36 / -2 / -6.1 / 6 - +97 / 00 * (7) * 4.7 + (2.5 + 4.3) / (8.8) * 7.8 / 4 - (0.2) + 5.6 / 2 - 8) * 45.163 / --((0) * 2 / 7 - 8.0 * 0 - 1.8) - +653 * (+4 * +2 / +6 + 73) + 6309 - -0965.6 * ((8) - 5 + 7.4 - 0) / --(1.5) * -4.8 + 0125 / 7 / -+5.2))',
 '(((+2.255 * (0.40 + +9.6 / 5 - 5) + +-(4 - 3 - 2) * 2.2 / 3.674) / -((9 + 6.7 + 2.6 + 2) * -5) / 3.4 / 23.1 / 69))',
 '((1 * -5.6 - 846.5 / 99.52 / (55 - 25 / -3.8 * 4.4 / 6.0 - (1) * 5 - 5 / 2.3 + 5.8 - 4)))',
 '(((02 - 8 * 7 / +-(1.2) * -5.7 / 2 * 1 * 7.3) * ((3.99 / 0) * ((9.2) * 5.2 * 4 + 5 / 7.3 - 0) + 8084 / (3 / 2 + 3 + 6.0) * (5.7 + 0) / (8.6) + +-+0 / (2 + 0) / 9 * 0.7 / 7.9 - +(5) - -6 * 3.0 / 1) / +7.707058 - (++(8.9 - 3 - 6) / -+49) / (+322 * 2 * 7 - 1.8 / +8 / -2.2 - 4 * +6 * 4.0 * 0.8 + -8 * 0.2 / 3.5 + 6 * 6.0 - 3.8) - 4 + --14 * 8.695 / -8))',
 '((--+((8 * 5.6 + 1 - 7) * ++4.3 / +1 * 5 - -(8) + 8.1 / 3 / 2) - 494.38))',
 '((-+(+-6.51 - 6 * --2.9 * 2 * 3 * 5.9 - -(8) / 9.9 + 8 / 9) / (89 / (0.3 * 2 * 4.0 + 1.8 / 0 - 3 - 4.3) / 7 * 15.41 / -2.9) * +(9 * -(1.8) - ++0.5 + 8.9 - 8.9 / 1.9 - 2 - 0) * -+-903.2 * -0 * ++--4 / (5 * 2.7) * 9 * 8.2 * 5.4 * 8 - +9 - -(+(5.6 + 9) + (1.7) / +2 * 2 + +9 * 6 * 6 + 4) + (-8.21 / +-6 + ++7 / +0) + 302))',
 '((++-5492.2 * 1.34536 / 5754 * +25395))',
 '((3 - 1.4 * (5 + (3) + -8.4 * 4 * 6.6 / 5 + +1 / 3.6 / 9 + 8.8 / 1.6 - 1 + 8.6)))',
 '((++607.8))',
 '(((6 * 4.3 * 5.2 / 890.56 - 81) + 5968.822 / -(-0.00 / (8 + 2.8)) + 730.6 * --(2 / 6 / 3.6 - 5 * 1 + 7.5 + 6.6)))',
 '((--(((1.9) / 4.0 * 5) / +(9 + 1) * 76.9 + ++-2.6 * 43 * -6.7 * 3.2 / 9 - 3 * 3 + 2.4 / 1.5 / 4 - 6.3 / 8 - 2) / 926.2))',
 '((--+--((9) + 6.2 / 0.3) * (8.8 - -++7 / +56 / (9 - 6.4) * 7.9) / +++(4.2 - 4 * 8 - 7 + 6.8) * 8 * ((6 + 6) / (1.8) / 2.4 / 6.9 - +3.4 / 2.5) - 08.0 / 3.5 * +-+-(1 - 8) - 51 * ++60.1 + (-4 + (1.9 - 8) / -5 + 7.7 * 3 - 5 * 1.9 - 7 - 8) / --432 + -((3) - 1 / 1 - 8.1 - 8.2) - -+(4 + 5.3) * 9 + +-3.3))',
 '(((--+78.2 / +6.3 * (+7.2 * 0 + 5.5 / 1 - 6.0 + 8) / 1.25) / +07.9 / 4.1 * ++-(4 / 0.2) / 919 * 07.266 * 16 / 18.3 - -4.9 / -((3.7 * 9.5) / -2.5 / 9 / 8.6)))',
 '((-(68) * 2.32 + 213993.7 * 95.5 / 460.0 + 1.6 * (6.046 * -+9 / (3) * 0)))',
 '((24 - 83.6 / +((6.5) * 3.56 + -+7.6 * +7 / 2 - (3) - 7.0 * 1.0 - 7.8 - 9) / +-8.3021 * 27285.55 * ((0) * 2 / 0 + 8 * 3) * -+9 / 52.43 - 04 / +3 / +(-9.0 + 6 / 0.3)))',
 '((---44 / +-+((5 - 0) / 8.5) * (+--(9.1) - 363 / 34 * -2.6) * (2 / +7.4 + -+8 * +0 / 6 / 0.4) * +-0.5 * +43))',
 '(((4) * 5))',
 '((+-++3481))',
 '((-5375990.0 / ---(+4) / (--(7.4 + 0))))',
 '((7.4 * 48.369))',
 '((((+(5 - 9) * (6.4) / 3.6 * 6.4 / 1)) / (-2 / 3) / 3.719 + 1949 / +756.73 - 4.6 - (8 / 7 * +6.1 * 9 * 7)))',
 '((8 / +-(-8 * 6.4 * -6 - 02 + +5 * 4.8 / 8) * 10.3))',
 '((+64 - -13.6123 + 02.9 - 5.05914))',
 '((--7 / (-+(3 / 0.6 - 9) + 1 * 10 * (3) * (2.8) / 5.2 + -52) * 1440.121 / (++3 * -3 - 7.7 + 5 - 4 * 6.0 - 4.6 - 2.3) / 43))',
 '((-8 - 6.1 * 0 * ++(-1 / 1 / 9.2 - 3 + 9.2 + 6) + -7 * 3 - 1.4 + 1.6 / +143 * +61 / (8.4 - 9.3) / -7.6 - 99 * 11.577 * --6.5 * +9.5 + 1.35 / 76 * -9.7 * 7.5 + 4 * (3) + 9 + 0.0))',
 '((0 + 7.19952 + (5.3 * +99 - -+5.3 * 7.0 / -4) + 78.2 * 58 * 8671.5 / -+6 / (4.9) + 1 / 31.2))',
 '((4.9 / (200.4 * (1 / 2 * 3.7 + 0.2 / 0 - 0 + 9.0) / 4.72 - +(4.2 * 5.7 - 8.1 - 4)) * +((4 / 8.3 - 0 - 2.7) * (4 + 1.4) + 95.4 + +2 / 2.5 / 6 + 8.7 / 0.8 - 2.7) / -9.33 / 1.5))',
 '(((5 / +4 / -84.68 * 2 / +4.2 / 6.6 * 4.1 / 0 - -2686.6 * 1 / -60) / -(8158.0 - 49.7 / 6) * ((+2) * -4 * 73.28 / -9.7 * 4.5 * 9.6 + 8.97) * 61 * +((4) / 1.4 * 2.7 - 1 * 6.5 - 5 + 5) * -(3.9 + 4 + 8.5) * 159.827 / (7) - +(2453) / 3.4 + 278.8))',
 '((+(-2726 * --(8 - 6) * (6 + 1.4 - 9)) / +2 + (8 / ((9.2) + 4.0 + 3) * +0 / (7) * 1.9) * 36.327 / ((7 / 7.2) * -+8 / (4.8) / 0 / 8.5 + --2) * 79.3 * (+4 / 3.7 * 0.9 + 4.3 / 4) / ++7 - 1 - 45.80 / 628.8 / -33.7 / +-2.6 * --8))',
 '((68.893))',
 '(((2.712 * +9 * 6568.98 - ---2 + 58 * +17 + --+9.5 * (1) / (3) * 9 * 6) * 9.80 * 55 / (-3.27 / ++2 - 4.16 * +7 - 8.4 * 8.7 * 1) * 29.3 * 582 / (7.6 * 3.2) * 59))',
 '((-(7136 + 0 * 7 + (1) / 1.1 * (4) / 6 * 8) / (0 / +-(3.6 - 1) * (3.0 / 9.8) + -+90 * (7.3 * 9.0 - 3) / (2 + 6) / (4.0)) * 66.6 / +-(7 * 5 * 3 - 8 / 5 - 2) * (-4.6 + +0.3 * 5.9 + 9) * 7 / 4.7 - (-(1.7 - 3.5) / +811.7 / -+(0) * +-8.7 / (2) * 3 / 3.9 + ((9.0) / 3.7 - 6.0 / 3.5) + 9 + +6.3 / (2) / 9 / 4.8 - +1.4 * 9 * 6 + 4.0 * 1.3 - 0 + 3) / 7 * 0 * 06.6 * 262.8 * -(2.4 + 8.4) * +(4.4) - -+2 / 6 / -43.42 / +3.738 * -(2 + 3) / -(2) - (+(3) / 88.4 / 9.0 * 2.5 / 7.2) + (70.81 * -0 * 0.6 * 1.0) * +(6) / 8 * (3.9 + 5.1) / 7.7 / 5 / 7.3 - +19 - +(2.3) / 4 / 6.5 / 5 * 4.0))',
 '((3 - (+491 * -+8.25 * 4 / 9.1 / -5.4) / (+(5 / 0 + 1.4) * 579 / 6 * -7.2 / 3 + 3 * +3 / -0 + 39) * -86.54 / (-0 * -9.3) - +-+725))',
 '((-1.2 - +++((4.4 + 7) + 6.1 * 4) / -(2 * -+2 - 7.97 - 9) / 44 / 9 / ((3) / 9.9 / 4 + 1.1 - 2.7) * --+9 * +(9) / (7.9) / 6.8))',
 '((5 * -(118.2394 + 739.2) - 8458.3))',
 '(((-7 / -+046.989 / -4 + +-812 / -8.1 + 87 / 0.33 * -+7 / -1) - 82 * 9.12 + +-43))',
 '((3.03271 / (150 * +-(9 + 6) / -1.12 / 1.97 + 3 / -(5 + 2.1) - 7.2 / 18.60) / ((+8.0 / 1.1 + 7.7 - 5) / +++1 / (6.2 - 1) * +9 + +77.46 * (1.1 + 1)) * 5.85 * (-0.9 - 6 / 2.8) / 7.4 * 983 / -4.9))',
 '(((201.3 * (+-6 / -2 / 0.6 * 6.8 + 4 * 2.8 / 5) / 28.66) * ((9.00 / 5.9 + (7.4) * 2 * 0) / (-6) - ++-+5 * 7.9 - 8.57 - 7.33 * -5.2 * 6.4 - (9.0) / 8.8 - 5.0 / 5 + 2.9 - 0.5) * (0.2 * 34.710) * -8.79 + +4 / 927.9 / ((9.7 + 8.4) * 81.04 + +(8.5) - 7.5 * 3.2 / 4) * -60 * -(7.6)))',
 '((+(+++76.40 * 8 - 21.1586 / -+2.5 * 18 / 8.4 / 9.6 / 0) + 66.0 / +6.90 * -79.318 * 54.9 / 3.05 / (1.5 * 3.3 + 4.4 + 2) * 96 * -2 - 12.9 - 9 * 15 * -8.8 / --2 + 8.8 - 8.6390 * (2 * 9.3)))',
 '((223.9))',
 '(((-(81 + +0.3 - 2.8)) + 0.5 / 33.273 + 866.8 / -(5 * 0) * ++-+8.4 * -(3.5) / ++(1) * +8 * (0) * 5.3 / 9))',
 '((+1.019 * +(+00.6 / 00.58 * 7.9 / (9) / 3 - 725 / +8 + +-7.6 * (2.7) - +1.9 - 5.8 - 1.2) / 04 * 2 / ++--8 / --69.6 / (0 / 7 + 6.9) / -+9 * -9 / 7.8))',
 '((884 + 4.49 * -+13.970 * -(-2 / (1.6)) / +242.69 - ((0.3 * 8.9 / 8 - 7.4 * 2.1 + 3 - 7) / 57.4 * -2.3)))',
 '((83794.7))',
 '(((((1.4 * 2 + 4.5 - 2) / -0.4 / 5 - (9 - 7.7) * 0 * 1 * 7.0 - 0.0 / 8 / 8.1 + 3 * 7.1 - 0) * -(+6.8) / -+26.05 / -(4 + 4) - +6.717 / --4.57 + +6.8)))',
 '(((++(4 * 5 + 5.7 / 8.3 - 7 - 3) * +-+3.0 - (++7.4 / 5 * 2 / 4 - (2.7) - 7.1 / 4 + 5 - 9.1) + (8.2 / 6 * 4 + 4.1 * 9.1) / (8.3 * 1) / 43 * 8.1 / 2) - -46.112 * 3 / 5.7417 / ++(3 / 3.9 + 1.7) / 65))',
 '((((-(1) * -+0.6 / 5.8 + ++9 * -1 / 4 + (4.0) / 4.1 / 1 - 5.4 / 2.2 - 3.1)) * ((++9.9 / 6.0 + -8.7 * 9.7 / 5 - 5.1) * 1 - --++4 / 0 - 387.5) - -6 / 15 * 20 * (-1.8 * +6.1) / 8.8178 / +3 / 56.17 + 7.6))',
 '((+2.1 * ((9 * -1.0 - -4.0 / 8 * 5.3) * (-9.3 - 9 * 4) - 3.91) * 5 / 1722 / 78825 / 7 * ---1.9 / ++2.1 / 7.4 * 9.0 - 1.93))',
 '(((-+0.12 / +-958.573 / 657 / (0 * 2) - +--+3 * 66 + 440 * 232.8)))',
 '((-32 * (2 * -77 + +-(4 + 8) - -91.37 / 9 * -3.7 - 75 + 2 * 2 + 6.1 - 4.0 - 2) / -+(++6.4 - (8.7) * 7) * 2.98 * +98 / 3.2 - +-0.8 + 457 / (-84.97 + (0 + 3.2) + (6.5) - 9.1 / 9.0) / 6.44 * 054 / 56 + -((9.4) / -2 / 2.7 / 8.0) / (-+0 * 8.2 / 1.0 / 3.4 - 6 / 9 * 3.1 + 4.7 / 2.7) / 4.58 * 88 * (5 + 3.3) * -0.9 * 2 + 8.54 * +2 / 914.7))',
 '((--6 / 373.00 / --5 / (+60.09) * 40.10833 - (7.8 / -492.076 + --(9 - 7.4) + 405 * 40 * -5.3 * 7) / 6.7 * 411))',
 '((8.48 * 2.88500 / +80 * (+33 * ++6.5 * 3.9 - (6.4 + 8.0) / (6.5) * 9.5 - +3 / 0 / 8.1) / ---++8 + (--263 * (5.2) / (4 * 4 + 3.3 + 4) * 4.67 + 4.4 / 761 * (5 - 2.0) * -5.1 + (6 * 6 + 8.9 - 0) * (7.5) / (6.3) * 9.4 * 0 + -(4.5) * 5 * 7.0 + -0.8 * 9 / 4.5) / 5.36 / ++45.7360 * +-(2 / 9.5) - +3 * ((8 / 1) * +5 * +1.8 / 2.5 * 4 - -(9) / +9.5 / 5.3 * 4.3 + (4.4) - 5.3 / 7 - 9.1) * 8.8 * 5809.162 * 80 / 9.5 / 0.8 / 0.6 * 0.3 + 955670.6))',
 '((256.1 / 17656 / +30))',
 '((+-+952 * +62 + -30.6 / 1.2 * -++6.40 / -7.8 / --27.76))',
 '((81 - --95))',
 '((-(((5 - 9) - (4) * 7 - 8 / 2) / (-0.8 - 0.5 * 4.5 + 0.5) / +56 - 7 * 12.8 / -+2 - 0.14 + +(3) / 6 / 6.9 - -2.7 * 4.0 - 0.1 / 4 + 5.5 - 0) / +-83.9 / -92 / -+(+1.9 + 9.2 * 9.3 - 8.6 + 0.0) - ---++1.9 / +652.7 / ((4.1 * 1.2 - 5.3) / 48.1 * (6.7) / 0.4 / 3) / +3.31 / +5 - -452 / +(5) * 5.948 / (+4.3 / 2 * 2.6 - 4 / 2 + 1.0) * 9 * +6.9 / 9.4 * 0.5 - -0.74 / +422.8 - ((0 + 7) + 9 + 1 / 5 - 4.7) * -46 / +++4))',
 '(((2.90 / -(-9 / 6.1 * 6 + 2.9 * 7.6 + 4.7 - 0.5) * +(3 - 3.6) * (4 * 6.6 + 6) * +8 * -1 + 60.2 / 3 / -(2 - 9.0) / -(6) / 0 / 1.9 / 9.5 + 8.961 * -++0 / 1.0 * +2.9 - (9 / 4.5) / (2.8 - 7) / +7.6 * 4.0 / 1.9) - 1350 + +((6.1 / 3.8) * +(8) + 2.91 / +6.6 * 3.3 - (5.1) / 5 - 4 + 3.2 + 4.1) + (+(0.7) / -3 * +2.2 * 6 + 52.8 / (5.9) - 5 * 2 - 1 * 2.7 + 4 + 0) * 5))',
 '((5 + +6 + (-35 * (3 - 5 - 9) / (2 + 6) * 9 / 5 / 5.5 - -3 - +8 * -2 - +5 / 8) / 8.3 * -(1.4 * 1.3) + -((9.9 + 0.3)) / --132.06))',
 '((-2))',
 '((-(9 * +635.4 - 2478.850 / +2 * (7.9)) / 1 / 2 * 4.21 / 151 - 26 / 1103519 * +8.08 / -+--(2.7) * 5000.1))',
 '((+-0.46 * 9 * 4.5 / +-6.09 + 6 * 5 * 42.18 / 48869.9 - 7 / +(+-1 / (8.1) / 4.3 / 1 - +5.1 / 9 / 9 + 1.6) / (8.25 / -7 + (5.5) * 7.1 * 8.5 - 1.0 - 8.1 + 3.8) / -39 - +1 * (98 - 1.0 / 8.4 - 6.4 * 5.1 + 6.7 + 1) * (6 / 0 * 7.6 + 9 / 4 + 0 - 8) * +23 - +(0 * 9 / 3.3 + 7 / 1.9) * 8.0336 * --(7.8) / +9.2 + ++77.20 / (8.3 - 2.7) * ++6 * +5 * 5.2 / 7.3 - 456.9 * 9.8 / +5.7))',
 '(((+(04) * (-+3.5) * -(6.8 * 4.8 + 4.2) / 3 / 13.6 / -6 / 5 / 2.9 - +(5.4 / 5.2 / 2 + 8.0 * 6) + (+4 * 0.3 * 7.4) / -83.21 * +8.5 / 0.5 + (6.9) / (7)) * 170 + 631 * -+169 / (54 * (8) / +3.6 * 1.9 / 6.0) * +--+(2.4) / (-6.0 / 6.3) + 4.7556 / -453))',
 '((16 / +8 / +-((4.6 - 1.5) + +1.9 * 6.4 / 7.7 + 9 / 0 + 2 + 0)))',
 '((-+3 / +16 / ---7 * --+-0 * 310.6 / 7 / 55 * (3 - 4.9) / 5.4 + 8))',
 '(((38.7 / +(-3.9 / 7.5 / 6 + 2.3 - 6 + 2.5) - 2 / ((0))) / 3 / 18.417))',
 '((53 * -6 + 2 * 2224 - (++-+8 / +21.8 * ++5 * 1.1 + 557 + -8.0 - 0.7) / 53.97 - 02.290 * (99 * 8 * 7.3 / 9 - (5.8) * 7 / 7) * +(5 / 0.5) * 4 + (+(3.9) / -4 + -3 * 1.8 / 4.3) - 2.8 * (1.8 * 4.5 + 8 - 4.8) / (2 - 6.9) / 8.4 / 2))',
 '(((50.4 * (98.30 / +0 / 4 / 5.0 - (8) / 3 - 1 * 8 + 7.7) / 098.2 - 51.130 / 9895.831) + 7 * 8.1 - +(-(3 + 1) * +2.5 / 3.2 * 0) * 8 + 816))',
 '((2 / --3653))',
 '((+((61 / 1.8) / +(6 - 5.8 + 5.2) + 7 / +59.5 * -(0.0) + (1 / 9.6 + 9.0 - 0) / 6.2 / 9.5 / 1.1 / 5.9 + 57.18 / (3.3) * 4 * 0.7 - +6 * 8.9 - 8.7 - 0.0 + 4.5) + -7.36 * +(-+0.2 + 9.1 * 9 + (2) * 8 / 3.6 + 7 / 5 + 2 - 2.6) / 18 - -7146 + -(+6 - 6.3 - 3.4 * 1 - 2.2 + 9) / 0.662 * 45 * (1.5 + 5) / 37.25 / 8))',
 '((+37))',
 '((+1.49 / --+-3 * --8 * +++(9 * 0.1) - ++848 / (+(3 / 1.0 + 1.5)) / -5310.61 + +(681 * +-4 * (2.2) * 8) * -58 / (9.40 + +1.6 * 8.5 / 0.3 + 5.1 * 6.2 + 6 - 2.3) / 10 / (2 + 0) * +-4 - 60.0 * 8))',
 '((39 / ++91))',
 '(((2.3 - 00.76 / ++(3) * 9 * 28 / -7 * 5 / 1.7 + -(8.1 + 5.3) / (9 + 1.7) * -1.3 / -8 / 6.3 * 3) * -+-9.7 - -(9061 + +-(2.3)) / 5.7 / +(++1.4 * +6.2 * 4 / 1.5 - +5.8 + 0.3 + 9) / -389 * (9 * 5.1 / 4 + 8.1 * 2) - 1 - -5))',
 '((6 * ((60 / +4.8 - 1.6 * 6 - 3 / 9.3 + 5.8) * -(8.1 * 8.1) * -80 * ++8.3 / (2)) / 733))',
 '((--+++-1.416 * -(-+2 / (4 * 8.6 - 1.4 - 2.7) / (6) / -8.3 / 3.4 * 8 + (9.4) * 26 * +4.6 * 5 * 8) * ((7.8) + ---1 * (8.5 + 5) + 36.12 * 7.9)))',
 '((-47 * (13 / 0.2 / -3 * 52.51 / -2 / 7 / 5.9 - (+0) * (3 / 6) + -(6.8) + ++9 * (6) / 1 + (0))))',
 '((24.2 * --406.41 / 22 / +81 - 70 / 8533401.31 - +56.4 + 982))',
 '(((+((5 + 9) * +7.6 - 3.8 - 4.6) / -(-5 * 6 / 7.9 - 7.2 / 8 + 3) - -+(6 * 2.2 - 9.3) / 2 * --4.6 / 2.96 / -5 / 2.8 * 1.7 - ((9) / 7 * 6 + 7 + 8 - 6.3)) / --9 / +37 * -+6.1 * -++2.9 * +(1.6 * 7) + 3 - (+-+-0 * +04.4 * 4.12 / 9.1 / 2.4 - 6 / 00.2 * 9 / 4 / 1.5 + 3) / 4.3 * 9 - -31 * +3 * (3.3 * 5) * 1.018 / (5.3) / -6 / 7.5 + -(+2.2 / 7 / 4 + 8.6 * 7 - 6.0) - 4.2 * (0.0 * 4 - 6.8 - 6) * 84 / 1 - 220 * 58 * (9)))',
 '((4227.8 / +-(5 * 55.14 / 5.2 * 7 * 2.2)))',
 '(((82.58 + 0) * 026.5639 / -(27.1 / +-2.9 + +(4) * 3.3 + -0 * 4.4 / 2.0 + 1.1 / 9) / -+5.737 + -+(--8) * 99 + -(447.44 - ++9.2 + 1.0 * 4 * 9 + 8.3 / 3) / -208.6 / 7.39))',
 '((9.327 / +2 * -4.5 / ++-34 + 3 * -+2 * 805 - (1.9 / --(8.9) - -51.8 * 4 * (1.7) / 1.5 / 3) * -+++--2.4 * -(0 * 0.6 / 6 - 6.4) * 284.0299 * (7 + 7.9) / 7.1 / -0.7 * 2.4 / 9.3 + 0 - 44 * +4.1 / +-(9) * +-4 * 2 / 7 * 9))',
 '((++804.4 / (+434 + (-2)) * +-((7 - 2.9) - (3.2) * 4) * 6023))',
 '((67.30 + 1710779 / (1.0 * +0 / 9.67 / (5.0) * 2 / 3.5 - 8.65 / 8.0 / 3.7 * 4 - -+3 * +6 * 7.0 - 6.0 / 4.9 / 0 + 5.5 * 3.3 + 2 + 7) / (59.95 / (9 - 8) - ++8.6 * 9.2 - 0 * 5.9) / 0.02484 * 499 * -+0 / 4 * -4.6 / 6))',
 '((313348.1 * 8.5181 * -+++5.0 - 69.08 / 5.55 - 000.4 / --6.36 - +90))',
 '((60.5 * 7.99 + (-9.9) / 8.1844313 + (-7.8 / (2) / 47.2 / 6 * 9.8 * 9)))',
 '((1 * +9 / 2.7 * 34 * 7279.5 * 2 * -03 / 73.61 - (74 * (+0.9) / (1 / 8 + 0 - 8.1) / 36.1 - 676 * 3 * (0 - 1) / -6.9 / 6.2 - (1 / 4.2 + 8 + 6) / 98 / -3 - 53 * (3)) * (2252 * -(8.9) * 83.97 - (2.4 * 6 + 7.3 + 0)) * -5))',
 '((70 * (52606 * 9 - (-1 + 8 * 8.3)) - --1.99 * 89 / -45 * 1))',
 '(((72.51 - 28.40 * -3.69 * 7.921 / +6.1) / +-(7.71 / -9.6 - -5.5 * -2 + (0.3) * 0) + +(059 * +3) * 4.74 / (--(6) - 6 + +1.2 * 2.2 + 7 * 2.4 + 9.9 + 3) / 6.396))',
 '(((-+-5 * 3.761 * 5.5083) * 764.93))',
 '((3.621 + (+3.6 * 49 / --7.5 + ++++8.7 / 345 * (0.0 + 3) / 2 / 9 - (3.4) / 7.02 * 4.7 / 2.8 / 2) * 39))',
 '((+6.0 * ---49.2 * 6 * +(10 / 7.5 + (2.5) + 2.5 + 0.8 - 8.0) * (3.48 * (2) / 8 / 1.5 + -4.0 * 1 * 1) / 5647.72 / (0.9) * 27))',
 '(((+7428.2575 / +(7 / 1.4) * +-9 * --8.3 - 5268 * (+6.8 / 8 / 1.1 - 6 * 1) - 55) / -----(6.2 / 3.3) + ++7 / (+(4.6 * 7 + 3)) * 8 / +(+9.4 * 3.4 - 7 * 5.2) / (-3 * 7 / 7.2 + 2.1 + 8 - 4.8) - -+((8.2 - 7) - -0.1 - 8 / 8.5 - 1 + 0.4) / 3 * 3182.48 / --+(2)))',
 '(((8.73 * 9 / 5.828 * 9 - (59 * 1.2 * 3.5 / 2 - +5.5 * 2.3 / 1) * 863 / (5 * 5 + 2 + 1) / +(7)) * -+2.7 * --+7.367 * 1 - 6 * (1.40 * (4.9 * 4 + 0) - 93 / 65.39 - 9 * 3.7 * 7.5) * 28.829))',
 '((22 / +(4006 - +-(0) - -+2.0 + +3.4 - 1) / ((-9 * 0 / 3 - 7.9 + 0) * +51.9 / 32.94 / 3 / 5 * 6)))',
 '((8.18 * -(02 + 65 / (7) + +-0.3 + 8 / 5.2 / 8.9 + 2.8 / 5.5) * 3.2 / 6.48 * -6.7689 - (+3 * +11 * -36.42 * 59.5 / 3 / 5.2 * 7.8 + 6.5 * 208 / ++7.1 * -4.3 - +(8.1 + 4.2) + -+8 / 9 * 6 * 5.0 - 5.1 * 7 * 0.3) / 1.71 / (2 / +(2.8) / 8 / 9.6 / 3.6 - -+8 / (7.2) + +3.9 - 6.9 * 2.7 - 9 + 0)))',
 '(((+(07.0 * (4.1) / 5 - (8.7) + 2) / ---80.8) + 92 / 2 / 4.9 * (1 / (5) + 7.9 * 1 / 1 - 0) - 9.0 / 8 + 9 * (+0.2 * 1 * 3 * 1) * 5536 * 957.2 / 66.65 - 3.7 * 8 - 2037.4187 * (8.0 * 2 - 6 + 7) + -48.89 / ++6.7 * 3 + +(6) * -6.7 - 6 * 9.5 + 3 + 9))',
 '((+2935 / 8 * (9989 * (4.9 * 8) + 381 * -7 * -2 / 9.6 / 0.5) / +((3.7 - 2) * -2 / 7) / (77 * 5 / 7 * 6) / 8 + 1 - (-+++0) * 137 + 80 / (6.33 * 4 + (7.7) - 7 * 9.4) - 4002 / 7.73 * (0.8 / 2 + 3.8 - 7) / -9 / (5)))',
 '((81 - 8.803 / (-+-9 / 1.4 * (3.7) / 0 / 7 / 3 + 034 / 9 / -1.5 / 0 / 5.0) * 5.6 / (-+7 / +0.4 + +3.6 * 4.7)))',
 '((-++6.262124 * 736866.004157 / (772 / -75.14 * -3.6 / +2 * 3.6 * 9.7 - 77 * --6.7 * 8.2 * 5.6) / 78.73272 * ---(0.7 - 9.8) * -311 / 1 + 6 * 84.3))',
 '((05.7597794 * (4 / 3 * 6.0) * +((0.5 - 6)) / +(70.0 * (1) * 4 / 5 - 4 * 3.4 + 6.2) * 1 / 27.8841))',
 '(((0.99 * (71 * -8.5 * 5 * 6 + -5 / 3 / 7.7) * 17 / 109 / (8 - 3.2) / (7) / 8.8 / 6.0 + (-4.8 / (1.9) * 5.9 - -0.0 / 9.5 * 4 - 9.0 * 5 - 7 - 1) / -12 / (9 + 6.2 - 6.4) / (6.7 + 7.1) / -2 * 2.8 * 5.2 - 3 / +++0.6 / (1.4 - 1) * 0 * 3.5 + -64 * (2.8) / 0.1) / +(91.0)))',
 '((1.5 * 7))',
 '((71.39485))',
 '((((74 * -0) - 96) + 9.9))',
 '((++1.975 * +++-++(7 + 7) - 89 - ++(66.3 / (4)) / +38.2))',
 '((17.56 + ((44 + -8) * ++-+1 / 77 * 90.4 + -(1 * 4.3 - 2 - 7.2) * 8.55 * (2 - 2) - 116.3 - (2.5 - 2.1) / 1) * -60))',
 '((+---(-5.6) / (-+499 / ((3) / 8 / 9.2) + 2996.2 / (2.5 + 8 - 5.0) - (2 / 7 - 3.3) / +4 * 1 + (4.5 - 3.9) * (1.7) / 7.8 / 4.2) * 219 * 3 / -43.9 * 3.6326 / -2 * 6.03 / 1.2 - 19.91 * 5 / -369 - (-0 - 6 / 6.6 / 2 + (3.3 + 8.3) / 2 * 6.1 - +1.6 * 0.5 / 7) * +4 * +6374.2 * 5.5 * -42.8 / (7 - 0)))',
 '((0.4 / -(0.5817) * ++737.931 / 36634.6 / +((7.3) / 9.3 * 8 + 4 * 4.8 - 9.0 + 1.5) * 1 / (0.2 - 8.4)))',
 '((-76.1))',
 '((596.0 / +-27.655 * (0 * -+9 * 88.25 - +(1 + 2) * +(8.1) / (6.1)) / 5561 - (2 / +43) * +-+31 * 3 * 7 + -+--(1.0 / 7.8 + 9 + 0) + 4))',
 '((+(6.53 * +101 / 5 / (9.4 - 0) * 4) / (6.0) / (-(7 * 2.9) * (5 / 5 + 1 + 5) + 743.64 - (7.2 - 1)) / (29 * (9.6 - 3.7) * 7.5 / 5.4 / 3 - -3) / (0 - (0) - 9 / 9.7 + 9 - 5) / (8.1) / +7 * 9))',
 '((8576.0891914 * 0 * (-+49 / 47.0 * --3.7 * -1 / 8 * 6 + +25.40 / +9.7 / (1)) - +(0.9 * +(7.8) / +(6.4) * (7)) / 21.05 / -552.91 * 1.8 / +(8 * 4) * --+5 / -3.7 / (2) / 3 / 7))',
 '((8.5))',
 '((+(++9.1 + -(9) * +-(8.9) / (4.8)) - 99653.277 + ---+-56 * (+0 * +(6.4) * 5.4 + +3 - (2.7) / 9) * 7388))',
 '((+-7))',
 '(((32 / +(2.9 / 0.3 / 7 - 1.7 + 5.6 + 9.3) - 17 + -++(4.3) * +1.2) + --(944.6 / 8.49 / 0.9 + 00 / (2.9) * 7.7 * 4.6 - (0.9) / 5.0 / 7 - 2 / 2.3 - 6 + 6.9) / --+-4.592 * (2.95 + 82.6 / 8 * 8.4 * 6 - 5 + 6.8 / 8 + 7.3 - 1) / -090.9))',
 '((0.23 + (((0 + 1.9) / (4.3) / 0 * 2.6 - (4) + 9 * 6 + 6.6 + 0.5) / -(4) * 35.7 + +-++9 / 41 - ++6 / 93.73 + 6.9) * +1 * -((9)) / (97.33 - +3.1) + 2.25))',
 '((((0 * -+9.5 * (8) / 8 * 3.1) / 7210.04783) + -9 / -+++4.95 * 1332 * (+(0.9) - -6.3 / 5.5 / 6.3) / ++91))']
```




<div class="input_area" markdown="1">

```python
count, total = 0, 0
for i,s in enumerate(fuzz_tree(EXPR_G, dd_tree)):
    v = my_predicate(s)
    total += 1
    if v:
        count+=1
count, total
```

</div>

{:.output_stream}
```
# abstract paths 1

```




{:.output_data_text}
```
(996, 996)
```



## Lua

We now provide a fully worked out example using Lua.

Importing all prerequisites:


<div class="input_area" markdown="1">

```python
import os.path
import json
import tempfile
import subprocess
import copy
```

</div>

We also have a separate grammar file which was converted from the [ANTLR Lua grammar](https://github.com/antlr/grammars-v4/blob/master/lua/Lua.g4).


<div class="input_area" markdown="1">

```python
GRAMMAR_FILE='../lang/lua/grammar/lua.fbjson'
```

</div>

Since we have an external compiler, we also have to define how to execute it.


<div class="input_area" markdown="1">

```python
TIMEOUT=5
```

</div>


<div class="input_area" markdown="1">

```python
class O:
    def __init__(self, **keys): self.__dict__.update(keys)
    def __repr__(self): return str(self.__dict__)

def do(command, env=None, shell=False, log=False, **args):
    result = subprocess.Popen(command,
        stdout = subprocess.PIPE,
        stderr = subprocess.STDOUT,
    )
    try:
        stdout, stderr = result.communicate(timeout=TIMEOUT)
        result.kill()
        stderr = '' if stderr is None else stderr.decode('utf-8', 'ignore')
        stdout = '' if stdout is None else stdout.decode('utf-8', 'ignore')
        return O(returncode=result.returncode, stdout=stdout, stderr=stderr)
    except subprocess.TimeoutExpired as e:
        try:
            result.kill()
        except PermissionError:
            pass
        return O(returncode=255, stdout='TIMEOUT', stderr='')
```

</div>

A wrapper to write the input string to a file first.


<div class="input_area" markdown="1">

```python
def I_do(prefix, cmd, src, as_string=False):
    o = None
    if as_string:
        o = do(cmd.split(' ') + [src])
    else:
        with tempfile.NamedTemporaryFile(prefix=prefix) as tmp:
            tname = tmp.name
            tmp.write(src.encode('UTF-8'))
            tmp.flush()
            o = do(cmd.split(' ') + [tname])
    return o
```

</div>

### The predicate

The compiler is [Lua 5.3.5](https://www.lua.org/ftp/lua-5.3.5.tar.gz) compiled and linked.


<div class="input_area" markdown="1">

```python
COMPILER='../lang/lua/compilers/lua'
```

</div>

The bug corresponds to the 4th bug [here](https://www.lua.org/bugs.html#5.3.5-4).


<div class="input_area" markdown="1">

```python
BUG='../lang/lua/bugs/4.lua'
```

</div>


<div class="input_area" markdown="1">

```python
def my_predicate(src):
    o = I_do('lua', '%s --' % COMPILER, src)
    if o.returncode == 0: return PRes.failed
    if o.returncode == -11: return PRes.success
    out = o.stdout
    if 'Segmentation fault (core dumped)' in out:
        return PRes.success
    elif 'stack traceback' in out:
        return PRes.invalid
    elif 'TIMEOUT' in out:
        return PRes.timeout
    return PRes.failed
```

</div>

Other helpers to load the grammar and the bug


<div class="input_area" markdown="1">

```python
def load_grammar(grammar_fn, bug_fn, pred):
    meta, tree = load_parsed_bug(bug_fn, grammar_fn)
    name = os.path.basename(bug_fn)

    return meta, tree, name
```

</div>


<div class="input_area" markdown="1">

```python
def load_bug(bug_fn, grammar_meta):
    with open(bug_fn) as f: bug_src = f.read()
    start = grammar_meta['[start]']
    grammar = grammar_meta['[grammar]']
    parser = Parser(grammar, start_symbol=start, canonical=True) # log=True)
    forest = parser.parse(bug_src.strip())
    tree = list(forest)[0]
    return grammar_meta, coalesce(tree)
```

</div>


<div class="input_area" markdown="1">

```python
def load_parsed_bug(bug_fn, grammar_fn):
    with open(grammar_fn) as f:
        grammar_meta = json.loads(f.read())
    return load_bug(bug_fn, grammar_meta)
```

</div>

We define a coalesce to manage the tokens.


<div class="input_area" markdown="1">

```python
def coalesce(tree):
    name, children, *rest = tree
    if not is_nt(name):
        return (name, children, *rest)
    elif is_token(name):
        v = tree_to_string(tree)
        return (name, [(v, [])], *rest)
    else:
        return (name, [coalesce(n) for n in children], *rest)
```

</div>


<div class="input_area" markdown="1">

```python
meta, tree, name = load_grammar(GRAMMAR_FILE, BUG, my_predicate)
```

</div>


<div class="input_area" markdown="1">

```python
tree_to_string(tree)
```

</div>




{:.output_data_text}
```
'f=load(function() end)\ninteresting={}\ninteresting[0]=string.rep("A",512)\ndebug.upvaluejoin(f,1,f,1)'
```




<div class="input_area" markdown="1">

```python
my_predicate(tree_to_string(tree))
```

</div>




{:.output_data_text}
```
<PRes.success: 'SUCCESS'>
```




<div class="input_area" markdown="1">

```python
list(meta.keys())
```

</div>




{:.output_data_text}
```
['[start]', '[grammar]']
```



### Reduction


<div class="input_area" markdown="1">

```python
min_tree = reduction(tree, meta['[grammar]'], my_predicate)
```

</div>


<div class="input_area" markdown="1">

```python
tree_to_string(tree)
```

</div>




{:.output_data_text}
```
'f=load(function() end)\ninteresting={}\ninteresting[0]=string.rep("A",512)\ndebug.upvaluejoin(f,1,f,1)'
```



### Abstraction


<div class="input_area" markdown="1">

```python
min_s, abs_s, a_mintree = get_abstraction(meta,tree_to_string(tree), my_predicate, MAX_CHECKS)
```

</div>

{:.output_stream}
```
7 isolation: <chunk> St.unchecked
O paths:

U paths:

35 check: <chunk> St.unchecked
36 check: <block> St.unchecked
37 check: <_block_re_1> St.unchecked
38 check: <_block_STAR_0> St.unchecked
39 check: <stat> St.unchecked
40 check: <varlist> St.unchecked
41 check: <var> St.unchecked
42 check: <_var_re_51> St.unchecked
43 check: <_var_OR_48> St.unchecked
44 check: <_var_SEQ_49> St.unchecked
45 check: <_NAME_sp_> St.unchecked
46 check: <_SKIP> St.unchecked
47 check: <NAME> St.unchecked
warn: giving up <NAME> after 1000 and no counterexample found.with 1 valid values abstract: False
48 check: <_var_re_53> St.unchecked
49 check: <_var_STAR_52> St.unchecked
50 check: <_varlist_re_35> St.unchecked
51 check: <_varlist_STAR_32> St.unchecked
52 check: <_SKIP> St.unchecked
53 check: <explist> St.unchecked
54 check: <exp> St.unchecked
55 check: <prefixexp> St.unchecked
56 check: <varOrExp> St.unchecked
57 check: <var> St.unchecked
58 check: <_var_re_51> St.unchecked
59 check: <_var_OR_48> St.unchecked
60 check: <_var_SEQ_49> St.unchecked
61 check: <_NAME_sp_> St.unchecked
62 check: <_SKIP> St.unchecked
63 check: <NAME> St.unchecked
warn: giving up <NAME> after 1000 and no counterexample found.with 0 valid values abstract: False
64 check: <_var_re_53> St.unchecked
65 check: <_var_STAR_52> St.unchecked
66 check: <_prefixexp_re_45> St.unchecked
67 check: <_prefixexp_STAR_44> St.unchecked
68 check: <nameAndArgs> St.unchecked
69 check: <_nameAndArgs_re_63> St.unchecked
70 check: <_nameAndArgs_Q_60> St.unchecked
71 check: <args> St.unchecked
72 check: <_SKIP> St.unchecked
73 check: <_args_re_65> St.unchecked
74 check: <_args_Q_64> St.unchecked
75 check: <explist> St.unchecked
76 check: <exp> St.unchecked
77 check: <functiondef> St.unchecked
78 check: <_SKIP> St.unchecked
79 check: <funcbody> St.unchecked
80 check: <_SKIP> St.unchecked
81 check: <_funcbody_re_67> St.unchecked
82 check: <_funcbody_Q_66> St.unchecked
83 check: <_SKIP> St.unchecked
84 check: <block> St.unchecked
85 check: <_block_re_1> St.unchecked
86 check: <_block_STAR_0> St.unchecked
87 check: <_block_re_3> St.unchecked
88 check: <_block_Q_2> St.unchecked
89 check: <_SKIP> St.unchecked
90 check: <_explist_re_43> St.unchecked
91 check: <_explist_STAR_40> St.unchecked
92 check: <_SKIP> St.unchecked
93 check: <_prefixexp_STAR_44> St.unchecked
94 check: <_explist_re_43> St.unchecked
95 check: <_explist_STAR_40> St.unchecked
96 check: <_block_STAR_0> St.unchecked
97 check: <stat> St.unchecked
98 check: <varlist> St.unchecked
99 check: <var> St.unchecked
100 check: <_var_re_51> St.unchecked
101 check: <_var_OR_48> St.unchecked
102 check: <_var_SEQ_49> St.unchecked
103 check: <_NAME_sp_> St.unchecked
104 check: <_SKIP> St.unchecked
105 check: <NAME> St.unchecked
warn: giving up <NAME> after 1000 and no counterexample found.with 0 valid values abstract: False
106 check: <_var_re_53> St.unchecked
107 check: <_var_STAR_52> St.unchecked
108 check: <_varlist_re_35> St.unchecked
109 check: <_varlist_STAR_32> St.unchecked
110 check: <_SKIP> St.unchecked
111 check: <explist> St.unchecked
112 check: <exp> St.unchecked
113 check: <tableconstructor> St.unchecked
114 check: <_SKIP> St.unchecked
115 check: <_tableconstructor_re_73> St.unchecked
116 check: <_tableconstructor_Q_72> St.unchecked
117 check: <_SKIP> St.unchecked
118 check: <_explist_re_43> St.unchecked
119 check: <_explist_STAR_40> St.unchecked
120 check: <_block_STAR_0> St.unchecked
121 check: <stat> St.unchecked
122 check: <varlist> St.unchecked
123 check: <var> St.unchecked
124 check: <_var_re_51> St.unchecked
125 check: <_var_OR_48> St.unchecked
126 check: <_var_SEQ_49> St.unchecked
127 check: <_NAME_sp_> St.unchecked
128 check: <_SKIP> St.unchecked
129 check: <NAME> St.unchecked
warn: giving up <NAME> after 1000 and no counterexample found.with 0 valid values abstract: False
130 check: <_var_re_53> St.unchecked
131 check: <_var_STAR_52> St.unchecked
132 check: <varSuffix> St.unchecked
133 check: <_varSuffix_re_55> St.unchecked
134 check: <_varSuffix_STAR_54> St.unchecked
135 check: <_varSuffix_re_59> St.unchecked
136 check: <_varSuffix_OR_56> St.unchecked
137 check: <_varSuffix_SEQ_57> St.unchecked
138 check: <_SKIP> St.unchecked
139 check: <exp> St.unchecked
140 check: <number> St.unchecked
141 check: <_INT_sp_> St.unchecked
142 check: <_SKIP> St.unchecked
143 check: <INT> St.unchecked
144 check: <_SKIP> St.unchecked
145 check: <_var_STAR_52> St.unchecked
146 check: <_varlist_re_35> St.unchecked
147 check: <_varlist_STAR_32> St.unchecked
148 check: <_SKIP> St.unchecked
149 check: <explist> St.unchecked
150 check: <exp> St.unchecked
151 check: <string> St.unchecked
152 check: <_NORMALSTRING_sp_> St.unchecked
153 check: <_SKIP> St.unchecked
154 check: <NORMALSTRING> St.unchecked
155 check: <_explist_re_43> St.unchecked
156 check: <_explist_STAR_40> St.unchecked
157 check: <_block_STAR_0> St.unchecked
158 check: <stat> St.unchecked
159 check: <functioncall> St.unchecked
160 check: <varOrExp> St.unchecked
161 check: <var> St.unchecked
162 check: <_var_re_51> St.unchecked
163 check: <_var_OR_48> St.unchecked
164 check: <_var_SEQ_49> St.unchecked
165 check: <_NAME_sp_> St.unchecked
166 check: <_SKIP> St.unchecked
167 check: <NAME> St.unchecked
warn: giving up <NAME> after 1000 and no counterexample found.with 0 valid values abstract: False
168 check: <_var_re_53> St.unchecked
169 check: <_var_STAR_52> St.unchecked
170 check: <varSuffix> St.unchecked
171 check: <_varSuffix_re_55> St.unchecked
172 check: <_varSuffix_STAR_54> St.unchecked
173 check: <_varSuffix_re_59> St.unchecked
174 check: <_varSuffix_OR_56> St.unchecked
175 check: <_varSuffix_SEQ_58> St.unchecked
176 check: <_SKIP> St.unchecked
177 check: <_NAME_sp_> St.unchecked
178 check: <_SKIP> St.unchecked
179 check: <NAME> St.unchecked
180 check: <_var_STAR_52> St.unchecked
181 check: <_functioncall_re_47> St.unchecked
182 check: <_functioncall_PLUS_46> St.unchecked
183 check: <nameAndArgs> St.unchecked
184 check: <_nameAndArgs_re_63> St.unchecked
185 check: <_nameAndArgs_Q_60> St.unchecked
186 check: <args> St.unchecked
187 check: <_SKIP> St.unchecked
188 check: <_args_re_65> St.unchecked
189 check: <_args_Q_64> St.unchecked
190 check: <explist> St.unchecked
191 check: <exp> St.unchecked
192 check: <prefixexp> St.unchecked
193 check: <varOrExp> St.unchecked
194 check: <var> St.unchecked
195 check: <_var_re_51> St.unchecked
196 check: <_var_OR_48> St.unchecked
197 check: <_var_SEQ_49> St.unchecked
198 check: <_NAME_sp_> St.unchecked
199 check: <_SKIP> St.unchecked
200 check: <NAME> St.unchecked
201 check: <_var_re_53> St.unchecked
202 check: <_var_STAR_52> St.unchecked
203 check: <_prefixexp_re_45> St.unchecked
204 check: <_prefixexp_STAR_44> St.unchecked
205 check: <_explist_re_43> St.unchecked
206 check: <_explist_STAR_40> St.unchecked
207 check: <_explist_OR_41> St.unchecked
208 check: <_explist_SEQ_42> St.unchecked
209 check: <_SKIP> St.unchecked
210 check: <exp> St.unchecked
211 check: <number> St.unchecked
212 check: <_INT_sp_> St.unchecked
213 check: <_SKIP> St.unchecked
214 check: <INT> St.unchecked
215 check: <_explist_STAR_40> St.unchecked
216 check: <_explist_OR_41> St.unchecked
217 check: <_explist_SEQ_42> St.unchecked
218 check: <_SKIP> St.unchecked
219 check: <exp> St.unchecked
220 check: <prefixexp> St.unchecked
221 check: <varOrExp> St.unchecked
222 check: <var> St.unchecked
223 check: <_var_re_51> St.unchecked
224 check: <_var_OR_48> St.unchecked
225 check: <_var_SEQ_49> St.unchecked
226 check: <_NAME_sp_> St.unchecked
227 check: <_SKIP> St.unchecked
228 check: <NAME> St.unchecked
229 check: <_var_re_53> St.unchecked
230 check: <_var_STAR_52> St.unchecked
231 check: <_prefixexp_re_45> St.unchecked
232 check: <_prefixexp_STAR_44> St.unchecked
233 check: <_explist_STAR_40> St.unchecked
234 check: <_explist_OR_41> St.unchecked
235 check: <_explist_SEQ_42> St.unchecked
236 check: <_SKIP> St.unchecked
237 check: <exp> St.unchecked
238 check: <number> St.unchecked
239 check: <_INT_sp_> St.unchecked
240 check: <_SKIP> St.unchecked
241 check: <INT> St.unchecked
242 check: <_explist_STAR_40> St.unchecked
243 check: <_SKIP> St.unchecked
244 check: <_block_STAR_0> St.unchecked
245 check: <_block_re_3> St.unchecked
246 check: <_block_Q_2> St.unchecked
247 check: <_EOF_sp_> St.unchecked
248 check: <_SKIP> St.unchecked
current paths:

abstract paths: 0
"\x0c(0x9.--\\r\\n#!--\\r\\nand#!#!false--[[]]and--\\nfunction()end#!~#!false//...--[=[]=]^...&false-nil<=true/true<=nil+true ..#!nil--[[]]#!>=x--\\ror--[[]]true--\\n^--[[]]nil):n[[]]()#![''#!~false]--[[]][--[=[]=]false--[\\r]" '\x0c(0x9.--\\r\\n#!--\\r\\nand#!#!false--[[]]and--\\nfunction()end#!~#!false//...--[=[]=]^...&false-nil<=true/true<=nil+true ..#!nil--[[]]#!>=x--\\ror--[[]]true--\\n^--[[]]nil):n[[]]()#![\'\'#!~false]--[[]][--[=[]=]false--[\\r]=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(\x0c(0x9.--\\r\\n#!--\\r\\nand#!#!false--[[]]and--\\nfunction()end#!~#!false//...--[=[]=]^...&false-nil<=true/true<=nil+true ..#!nil--[[]]#!>=x--\\ror--[[]]true--\\n^--[[]]nil):n[[]]()#![\'\'#!~false]--[[]][--[=[]=]false--[\\r],1,\x0c(0x9.--\\r\\n#!--\\r\\nand#!#!false--[[]]and--\\nfunction()end#!~#!false//...--[=[]=]^...&false-nil<=true/true<=nil+true ..#!nil--[[]]#!>=x--\\ror--[[]]true--\\n^--[[]]nil):n[[]]()#![\'\'#!~false]--[[]][--[=[]=]false--[\\r],1)'
Similar? ('<var>', 'f') False
'\t#!RKL' '\t#!RKL=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(\t#!RKL,1,\t#!RKL,1)'
Similar? ('<_var_re_51>', 'f') False
"(\x0c\rfalse#!>=''#!v<=7......-nil--\\r\\n^(true)or--\\r{...\t}\n\x0c \n---\x0c\\r\\n(''--\\r\\n..niland.....(true)\nand''--o\\n) ~=--[=[]=]true#!4<<--[0X7D9.p5){--[[]]}:E\x0c--[[]]{--[[]]}--\\r(true)--\\r\\n(--\\r)[#!nilor6\t<true--]" '(\x0c\rfalse#!>=\'\'#!v<=7......-nil--\\r\\n^(true)or--\\r{...\t}\n\x0c \n---\x0c\\r\\n(\'\'--\\r\\n..niland.....(true)\nand\'\'--o\\n) ~=--[=[]=]true#!4<<--[0X7D9.p5){--[[]]}:E\x0c--[[]]{--[[]]}--\\r(true)--\\r\\n(--\\r)[#!nilor6\t<true--]=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin((\x0c\rfalse#!>=\'\'#!v<=7......-nil--\\r\\n^(true)or--\\r{...\t}\n\x0c \n---\x0c\\r\\n(\'\'--\\r\\n..niland.....(true)\nand\'\'--o\\n) ~=--[=[]=]true#!4<<--[0X7D9.p5){--[[]]}:E\x0c--[[]]{--[[]]}--\\r(true)--\\r\\n(--\\r)[#!nilor6\t<true--],1,(\x0c\rfalse#!>=\'\'#!v<=7......-nil--\\r\\n^(true)or--\\r{...\t}\n\x0c \n---\x0c\\r\\n(\'\'--\\r\\n..niland.....(true)\nand\'\'--o\\n) ~=--[=[]=]true#!4<<--[0X7D9.p5){--[[]]}:E\x0c--[[]]{--[[]]}--\\r(true)--\\r\\n(--\\r)[#!nilor6\t<true--],1)'
Similar? ('<_var_OR_48>', 'f') False
'#!Td' '#!Td=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(#!Td,1,#!Td,1)'
Similar? ('<_var_SEQ_49>', 'f') False
'--[=[5V]=]--[I(\\r\\nKLG' '--[=[5V]=]--[I(\\r\\nKLG=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(--[=[5V]=]--[I(\\r\\nKLG,1,--[=[5V]=]--[I(\\r\\nKLG,1)'
Similar? ('<_NAME_sp_>', 'f') False
'if' 'if=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(if,1,if,1)'
Similar? ('<NAME>', 'f') False
'--[[I]](--[==[]==])--[=[]=][#!{[false]=...#!}--[[]]]' 'f=load(function() end)--[[I]](--[==[]==])--[=[]=][#!{[false]=...#!}--[[]]]={}--[[I]](--[==[]==])--[=[]=][#!{[false]=...#!}--[[]]][0]="A"\ndebug.upvaluejoin(f,1,f,1)'
Similar? ('<_var_re_51>', '\ninteresting') False
'#!_q' 'f=load(function() end)#!_q={}#!_q[0]="A"\ndebug.upvaluejoin(f,1,f,1)'
Similar? ('<_var_OR_48>', '\ninteresting') False
'#!{--[=[j]=] \x0caO' 'f=load(function() end)#!{--[=[j]=] \x0caO={}#!{--[=[j]=] \x0caO[0]="A"\ndebug.upvaluejoin(f,1,f,1)'
Similar? ('<_var_SEQ_49>', '\ninteresting') False
'#!>PVt' 'f=load(function() end)#!>PVt={}#!>PVt[0]="A"\ndebug.upvaluejoin(f,1,f,1)'
Similar? ('<_NAME_sp_>', '\ninteresting') False
Similar? ('<NAME>', 'interesting') True
'\x0c0x.\r\nE--\\ra\r/--S\\r--[[]]\r\x0c...and\r#!--\\r\\n~--[[]]0Xed.44\n--[[]]and----[[]]true' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(\x0c0x.\r\nE--\\ra\r/--S\\r--[[]]\r\x0c...and\r#!--\\r\\n~--[[]]0Xed.44\n--[[]]and----[[]]true,1,\x0c0x.\r\nE--\\ra\r/--S\\r--[[]]\r\x0c...and\r#!--\\r\\n~--[[]]0Xed.44\n--[[]]and----[[]]true,1)'
Similar? ('<exp>', 'f') False
'--\\r\\n(--[==[]==]#!#!nnil\x0c)' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(--\\r\\n(--[==[]==]#!#!nnil\x0c),1,--\\r\\n(--[==[]==]#!#!nnil\x0c),1)'
Similar? ('<prefixexp>', 'f') False
'--[=[]=]--[[]]--\\r\\nISgJ' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(--[=[]=]--[[]]--\\r\\nISgJ,1,--[=[]=]--[[]]--\\r\\nISgJ,1)'
Similar? ('<varOrExp>', 'f') False
"--[=[LLy]=],--\\r\\nnil#!*--[\\r\\n{[nil]=...--[[]]}\rand...>...-function()end<={}--\\r+(false)..nil-true#!and--[[]]...--\\rand...>''//#!{--[[]]}\n//''" 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f--[=[LLy]=],--\\r\\nnil#!*--[\\r\\n{[nil]=...--[[]]}\rand...>...-function()end<={}--\\r+(false)..nil-true#!and--[[]]...--\\rand...>\'\'//#!{--[[]]}\n//\'\',f--[=[LLy]=],--\\r\\nnil#!*--[\\r\\n{[nil]=...--[[]]}\rand...>...-function()end<={}--\\r+(false)..nil-true#!and--[[]]...--\\rand...>\'\'//#!{--[[]]}\n//\'\')'
Similar? ('<_explist_OR_41>', ',1') False
'--[===[]===],#!Otrue' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f--[===[]===],#!Otrue,f--[===[]===],#!Otrue)'
Similar? ('<_explist_SEQ_42>', ',1') False
'false--[==[#]==]..--[\\r\\n((...).B.D--\\n)#!{[nil]=...--\\r\\n}--[==[]==]#!+--[=M\\nfunction--[&--\\r\\n(--[[]]A,...)--[=[]=]return... ;\nend' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f,false--[==[#]==]..--[\\r\\n((...).B.D--\\n)#!{[nil]=...--\\r\\n}--[==[]==]#!+--[=M\\nfunction--[&--\\r\\n(--[[]]A,...)--[=[]=]return... ;\nend,f,false--[==[#]==]..--[\\r\\n((...).B.D--\\n)#!{[nil]=...--\\r\\n}--[==[]==]#!+--[=M\\nfunction--[&--\\r\\n(--[[]]A,...)--[=[]=]return... ;\nend)'
Similar? ('<exp>', '1') False
'--[=--\\r0x.#!xA#!b--[[]]P99' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f,--[=--\\r0x.#!xA#!b--[[]]P99,f,--[=--\\r0x.#!xA#!b--[[]]P99)'
Similar? ('<number>', '1') False
'--[ga\\r--[==[]==]--[A\\r\\n82' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f,--[ga\\r--[==[]==]--[A\\r\\n82,f,--[ga\\r--[==[]==]--[A\\r\\n82)'
Similar? ('<_INT_sp_>', '1') False
'#!8--[[8]]05--[t\\r1' 'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f,#!8--[[8]]05--[t\\r1,f,#!8--[[8]]05--[t\\r1)'
Similar? ('<INT>', '1') False

```


<div class="input_area" markdown="1">

```python
min_s
```

</div>




{:.output_data_text}
```
'f=load(function() end)\ninteresting={}\ninteresting[0]="A"\ndebug.upvaluejoin(f,1,f,1)'
```




<div class="input_area" markdown="1">

```python
abs_s
```

</div>




{:.output_data_text}
```
'f=load(function() end)\n<$NAME_1>={}\n<$NAME_1>[0]="A"\ndebug.upvaluejoin(f,1,f,1)'
```




<div class="input_area" markdown="1">

```python
zoom(display_tree(till_abstract(a_mintree)))
```

</div>




![png](/resources/posts/2020-07-15-ddset/DDSet_202_0.png)



### Fuzzing


<div class="input_area" markdown="1">

```python
count, total = 0, 0
for i,s in enumerate(fuzz_tree(meta, a_mintree)):
    v = my_predicate(s)
    total += 1
    if v:
        count+=1
count, total
```

</div>

{:.output_stream}
```
# abstract paths 4

```




{:.output_data_text}
```
(291, 291)
```


