{"version":3,"file":"7368.d877688131ee4c4de8f7.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/services/lib/kernel/serialize.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/async-mutex/index.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/kernels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/kernelspecs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/tokens.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = exports.deserialize = void 0;\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nfunction deserialize(data) {\n    let value;\n    if (typeof data === 'string') {\n        value = JSON.parse(data);\n    }\n    else {\n        value = deserializeBinary(data);\n    }\n    return value;\n}\nexports.deserialize = deserialize;\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nfunction serialize(msg) {\n    var _a;\n    let value;\n    if ((_a = msg.buffers) === null || _a === void 0 ? void 0 : _a.length) {\n        value = serializeBinary(msg);\n    }\n    else {\n        value = JSON.stringify(msg);\n    }\n    return value;\n}\nexports.serialize = serialize;\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf) {\n    const data = new DataView(buf);\n    // read the header: 1 + nbufs 32b integers\n    const nbufs = data.getUint32(0);\n    const offsets = [];\n    if (nbufs < 2) {\n        throw new Error('Invalid incoming Kernel Message');\n    }\n    for (let i = 1; i <= nbufs; i++) {\n        offsets.push(data.getUint32(i * 4));\n    }\n    const jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n    const msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n    // the remaining chunks are stored as DataViews in msg.buffers\n    msg.buffers = [];\n    for (let i = 1; i < nbufs; i++) {\n        const start = offsets[i];\n        const stop = offsets[i + 1] || buf.byteLength;\n        msg.buffers.push(new DataView(buf.slice(start, stop)));\n    }\n    return msg;\n}\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg) {\n    const offsets = [];\n    const buffers = [];\n    const encoder = new TextEncoder();\n    let origBuffers = [];\n    if (msg.buffers !== undefined) {\n        origBuffers = msg.buffers;\n        delete msg['buffers'];\n    }\n    const jsonUtf8 = encoder.encode(JSON.stringify(msg));\n    buffers.push(jsonUtf8.buffer);\n    for (let i = 0; i < origBuffers.length; i++) {\n        // msg.buffers elements could be either views or ArrayBuffers\n        // buffers elements are ArrayBuffers\n        const b = origBuffers[i];\n        buffers.push(ArrayBuffer.isView(b) ? b.buffer : b);\n    }\n    const nbufs = buffers.length;\n    offsets.push(4 * (nbufs + 1));\n    for (let i = 0; i + 1 < buffers.length; i++) {\n        offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n    }\n    const msgBuf = new Uint8Array(offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength);\n    // use DataView.setUint32 for network byte-order\n    const view = new DataView(msgBuf.buffer);\n    // write nbufs to first 4 bytes\n    view.setUint32(0, nbufs);\n    // write offsets to next 4 * nbufs bytes\n    for (let i = 0; i < offsets.length; i++) {\n        view.setUint32(4 * (i + 1), offsets[i]);\n    }\n    // write all the buffers at their respective offsets\n    for (let i = 0; i < buffers.length; i++) {\n        msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n    }\n    return msgBuf.buffer;\n}\n//# sourceMappingURL=serialize.js.map","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimick ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execut result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        this._history.push([0, 0, content.code]);\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_maxConcurrency, _cancelError = E_CANCELED) {\n        this._maxConcurrency = _maxConcurrency;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    acquire() {\n        const locked = this.isLocked();\n        const ticketPromise = new Promise((resolve, reject) => this._queue.push({ resolve, reject }));\n        if (!locked)\n            this._dispatch();\n        return ticketPromise;\n    }\n    runExclusive(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire();\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            const releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    }\n    cancel() {\n        this._queue.forEach((ticket) => ticket.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatch() {\n        const nextTicket = this._queue.shift();\n        if (!nextTicket)\n            return;\n        let released = false;\n        this._currentReleaser = () => {\n            if (released)\n                return;\n            released = true;\n            this._value++;\n            this._dispatch();\n        };\n        nextTicket.resolve([this._value--, this._currentReleaser]);\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: () => new Promise((resolve, reject) => __awaiter$2(this, void 0, void 0, function* () {\n            let isTimeout = false;\n            const handle = setTimeout(() => {\n                isTimeout = true;\n                reject(timeoutError);\n            }, timeout);\n            try {\n                const ticket = yield sync.acquire();\n                if (isTimeout) {\n                    const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                    release();\n                }\n                else {\n                    clearTimeout(handle);\n                    resolve(ticket);\n                }\n            }\n            catch (e) {\n                if (!isTimeout) {\n                    clearTimeout(handle);\n                    reject(e);\n                }\n            }\n        })),\n        runExclusive(callback) {\n            return __awaiter$2(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire();\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n        release() {\n            sync.release();\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        isLocked: () => sync.isLocked(),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import { ObservableMap } from '@jupyterlab/observables';\nimport { deserialize, serialize } from '@jupyterlab/services/lib/kernel/serialize';\nimport { UUID } from '@lumino/coreutils';\nimport { Server as WebSocketServer, WebSocket } from 'mock-socket';\nimport { Mutex } from 'async-mutex';\nimport { PageConfig } from '@jupyterlab/coreutils';\n/**\n * A class to handle requests to /api/kernels\n */\nexport class Kernels {\n    /**\n     * Construct a new Kernels\n     *\n     * @param options The instantiation options\n     */\n    constructor(options) {\n        this._kernels = new ObservableMap();\n        this._clients = new ObservableMap();\n        this._kernelClients = new ObservableMap();\n        const { kernelspecs } = options;\n        this._kernelspecs = kernelspecs;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param options The kernel start options.\n     */\n    async startNew(options) {\n        const { id, name } = options;\n        const factory = this._kernelspecs.factories.get(name);\n        // bail if there is no factory associated with the requested kernel\n        if (!factory) {\n            return { id, name };\n        }\n        // create a synchronization mechanism to allow only one message\n        // to be processed at a time\n        const mutex = new Mutex();\n        // hook a new client to a kernel\n        const hook = (kernelId, clientId, socket) => {\n            var _a;\n            const kernel = this._kernels.get(kernelId);\n            if (!kernel) {\n                throw Error(`No kernel ${kernelId}`);\n            }\n            this._clients.set(clientId, socket);\n            (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.add(clientId);\n            const processMsg = async (msg) => {\n                await mutex.runExclusive(async () => {\n                    await kernel.handleMessage(msg);\n                });\n            };\n            socket.on('message', async (message) => {\n                let msg;\n                if (message instanceof ArrayBuffer) {\n                    message = new Uint8Array(message).buffer;\n                    msg = deserialize(message);\n                }\n                else if (typeof message === 'string') {\n                    msg = deserialize(message);\n                }\n                else {\n                    return;\n                }\n                // TODO Find a better solution for this?\n                // input-reply is asynchronous, must not be processed like other messages\n                if (msg.header.msg_type === 'input_reply') {\n                    kernel.handleMessage(msg);\n                }\n                else {\n                    void processMsg(msg);\n                }\n            });\n            const removeClient = () => {\n                var _a;\n                this._clients.delete(clientId);\n                (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n            };\n            kernel.disposed.connect(removeClient);\n            // TODO: check whether this is called\n            // https://github.com/thoov/mock-socket/issues/298\n            // https://github.com/jupyterlab/jupyterlab/blob/6bc884a7a8ed73c615ce72ba097bdb790482b5bf/packages/services/src/kernel/default.ts#L1245\n            socket.onclose = removeClient;\n        };\n        // ensure kernel id\n        const kernelId = id !== null && id !== void 0 ? id : UUID.uuid4();\n        // There is one server per kernel which handles multiple clients\n        const kernelUrl = `${Kernels.WS_BASE_URL}api/kernels/${kernelId}/channels`;\n        const runningKernel = this._kernels.get(kernelId);\n        if (runningKernel) {\n            return {\n                id: runningKernel.id,\n                name: runningKernel.name\n            };\n        }\n        // start the kernel\n        const sendMessage = (msg) => {\n            const clientId = msg.header.session;\n            const socket = this._clients.get(clientId);\n            if (!socket) {\n                console.warn(`Trying to send message on removed socket for kernel ${kernelId}`);\n                return;\n            }\n            const message = serialize(msg);\n            // process iopub messages\n            if (msg.channel === 'iopub') {\n                const clients = this._kernelClients.get(kernelId);\n                clients === null || clients === void 0 ? void 0 : clients.forEach(id => {\n                    var _a;\n                    (_a = this._clients.get(id)) === null || _a === void 0 ? void 0 : _a.send(message);\n                });\n                return;\n            }\n            socket.send(message);\n        };\n        const kernel = await factory({\n            id: kernelId,\n            sendMessage,\n            name\n        });\n        await kernel.ready;\n        this._kernels.set(kernelId, kernel);\n        this._kernelClients.set(kernelId, new Set());\n        // create the websocket server for the kernel\n        const wsServer = new WebSocketServer(kernelUrl);\n        wsServer.on('connection', (socket) => {\n            var _a;\n            const url = new URL(socket.url);\n            const clientId = (_a = url.searchParams.get('session_id')) !== null && _a !== void 0 ? _a : '';\n            hook(kernelId, clientId, socket);\n        });\n        // clean up closed connection\n        wsServer.on('close', () => {\n            this._clients.keys().forEach(clientId => {\n                var _a;\n                const socket = this._clients.get(clientId);\n                if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.CLOSED) {\n                    this._clients.delete(clientId);\n                    (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n                }\n            });\n        });\n        // cleanup on kernel shutdown\n        kernel.disposed.connect(() => {\n            wsServer.close();\n            this._kernels.delete(kernelId);\n            this._kernelClients.delete(kernelId);\n        });\n        return {\n            id: kernel.id,\n            name: kernel.name\n        };\n    }\n    /**\n     * Restart a kernel.\n     *\n     * @param kernelId The kernel id.\n     */\n    async restart(kernelId) {\n        const kernel = this._kernels.get(kernelId);\n        if (!kernel) {\n            throw Error(`Kernel ${kernelId} does not exist`);\n        }\n        const { id, name } = kernel;\n        kernel.dispose();\n        return this.startNew({ id, name });\n    }\n    /**\n     * Shut down a kernel.\n     *\n     * @param id The kernel id.\n     */\n    async shutdown(id) {\n        var _a;\n        (_a = this._kernels.delete(id)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n/**\n * A namespace for Kernels statics.\n */\n(function (Kernels) {\n    /**\n     * The base url for the Kernels manager\n     */\n    Kernels.WS_BASE_URL = PageConfig.getBaseUrl().replace(/^http/, 'ws');\n})(Kernels || (Kernels = {}));\n","/**\n * A class to handle requests to /api/kernelspecs\n */\nexport class KernelSpecs {\n    /**\n     * Construct a new KernelSpecs.\n     *\n     * @param options The instantiation options.\n     */\n    constructor(options) {\n        this._specs = new Map();\n        this._factories = new Map();\n        // no-op\n    }\n    /**\n     * Get the kernel specs.\n     */\n    get specs() {\n        if (this._specs.size === 0) {\n            return null;\n        }\n        return {\n            default: 'python',\n            kernelspecs: Object.fromEntries(this._specs)\n        };\n    }\n    /**\n     * Get the kernel factories for the current kernels.\n     */\n    get factories() {\n        return this._factories;\n    }\n    /**\n     * Register a new kernel.\n     *\n     * @param options The options to register a new kernel.\n     */\n    register(options) {\n        const { spec, create } = options;\n        this._specs.set(spec.name, spec);\n        this._factories.set(spec.name, create);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernel:IKernelSpecs');\n"],"names":["Object","defineProperty","exports","value","serialize","deserialize","data","JSON","parse","buf","DataView","nbufs","getUint32","offsets","Error","i","push","jsonBytes","Uint8Array","slice","msg","TextDecoder","decode","buffers","start","stop","byteLength","deserializeBinary","_a","length","encoder","TextEncoder","origBuffers","undefined","jsonUtf8","encode","stringify","buffer","b","ArrayBuffer","isView","msgBuf","view","setUint32","set","serializeBinary","BaseKernel","constructor","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","_parent","id","name","sendMessage","_id","_name","_sendMessage","Promise","resolve","dispose","isDisposed","emit","_busy","header","msg_type","_kernelInfo","_execute","inputReply","content","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","stream","parentHeader","parentHeaderValue","message","KernelMessage","channel","msgType","session","displayData","_b","metadata","inputRequest","publishExecuteResult","publishExecuteError","updateDisplayData","clearOutput","handleComm","type","parent","execution_state","kernelInfoRequest","historyMsg","status","history","_executeInput","code","execution_count","executeMsg","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","E_CANCELED","Semaphore","_maxConcurrency","_cancelError","_queue","_value","acquire","locked","isLocked","ticketPromise","reject","_dispatch","runExclusive","callback","thisArg","_arguments","generator","release","P","fulfilled","step","next","e","rejected","result","done","then","apply","_currentReleaser","releaser","cancel","forEach","ticket","nextTicket","shift","released","Mutex","cancelError","_semaphore","Kernels","_kernels","ObservableMap","_clients","_kernelClients","kernelspecs","_kernelspecs","factory","factories","get","mutex","hook","kernelId","clientId","socket","kernel","add","on","async","handleMessage","processMsg","removeClient","delete","disposed","connect","onclose","UUID","kernelUrl","WS_BASE_URL","runningKernel","console","warn","send","clients","ready","Set","wsServer","URL","url","searchParams","keys","readyState","WebSocket","close","startNew","PageConfig","replace","KernelSpecs","_specs","Map","_factories","size","default","fromEntries","register","spec","create","IKernels","Token","IKernelSpecs"],"sourceRoot":""}