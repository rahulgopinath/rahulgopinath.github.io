{"version":3,"file":"9524.6137e5a5e11212337e54.js","mappings":"0KAgBIA,E,wDACJ,SAAWA,GACPA,EAAWC,UAAY,wBAD3B,CAEGD,IAAeA,EAAa,KAiG/B,QA7FmB,CACfE,SAUJ,SAA4BC,EAAKC,EAAYC,EAASC,GAElD,MAAMC,EAAQH,EAAWI,KAAK,cACxBC,EAAK,CACPC,KAAM,OACNC,YAAa,OACbC,WAAY,OACZC,YAAaN,EAAMO,GAAG,aACtBC,WAAY,CAAC,SACbC,UAAW,CAAC,aACZC,KAAM,EAAAC,WAEVf,EAAIgB,YAAYC,YAAYX,GAE5B,MAAMY,EAAU,IAAI,EAAAC,kBAAkB,CAClCZ,KAAMH,EAAMO,GAAG,eACfS,UAAW,CAAC,QACZC,WAAY,CAAC,QACbC,UAAU,IAGRC,EAAU,IAAI,EAAAC,cAAc,CAC9BC,UAAW,eAuDf,OApDItB,GACKA,EAASuB,QAAQH,EAAS,CAC3BI,QAAS,kBACTC,KAAMC,IAAU,CAAGC,KAAMD,EAAOE,QAAQD,KAAMZ,QAAS,gBACvDX,KAAMsB,GAAUA,EAAOE,QAAQD,OAGvC9B,EAAIgB,YAAYgB,iBAAiBd,GACjCA,EAAQe,cAAcC,SAAQ,CAACC,EAAQN,KACnC,IAAIO,EAAIC,EAEHd,EAAQe,IAAIT,GAEjBA,EAAOE,QAAQQ,YAAYL,SAAQ,KAC1BX,EAAQiB,KAAKX,MAItBA,EAAOY,eAAeP,SAAQ,KAC1BlC,EAAI0C,SAASC,qBAAqB9C,EAAWC,cAEjD+B,EAAOe,MAAM9B,KAAOR,EAAGQ,KACvBe,EAAOe,MAAMC,UAAoC,QAAvBT,EAAK9B,EAAGuC,iBAA8B,IAAPT,EAAgBA,EAAK,GAC9EP,EAAOe,MAAME,UAAoC,QAAvBT,EAAK/B,EAAGwC,iBAA8B,IAAPT,EAAgBA,EAAK,MAIlFrC,EAAI0C,SAASK,WAAWlD,EAAWC,UAAW,CAC1CkD,MAAO5C,EAAMO,GAAG,mBAChBsC,UAAW,MAAQ1B,EAAQ2B,cAC3BC,UAAW,KACP,MAAMC,EAAU7B,EAAQ2B,cACxB,QAAKE,IAIwC,IAD7BA,EAAQC,QAAQC,QACjBC,QAAQ,kBAE3BC,QAAS,KACL,MAAMJ,EAAU7B,EAAQ2B,cACxB,IAAKE,EACD,OAAO,EAEXA,EAAQK,SAAWL,EAAQK,WAG/BvD,GACAA,EAAQwD,QAAQ,CACZ/B,QAAS9B,EAAWC,UACpB6D,SAAUvD,EAAMO,GAAG,qBAGpBY,GAtFPqC,GAAI,0CACJC,SAAU,EAAAC,mBACVC,SAAU,CAAC,EAAAC,aACXC,SAAU,CAAC,EAAAC,gBAAiB,EAAAC,iBAC5BC,WAAW","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/htmlviewer-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module htmlviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { HTMLViewerFactory, IHTMLViewerTracker } from '@jupyterlab/htmlviewer';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { html5Icon } from '@jupyterlab/ui-components';\n/**\n * Command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.trustHTML = 'htmlviewer:trust-html';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The HTML file handler extension.\n */\nconst htmlPlugin = {\n    activate: activateHTMLViewer,\n    id: '@jupyterlab/htmlviewer-extension:plugin',\n    provides: IHTMLViewerTracker,\n    requires: [ITranslator],\n    optional: [ICommandPalette, ILayoutRestorer],\n    autoStart: true\n};\n/**\n * Activate the HTMLViewer extension.\n */\nfunction activateHTMLViewer(app, translator, palette, restorer) {\n    // Add an HTML file type to the docregistry.\n    const trans = translator.load('jupyterlab');\n    const ft = {\n        name: 'html',\n        contentType: 'file',\n        fileFormat: 'text',\n        displayName: trans.__('HTML File'),\n        extensions: ['.html'],\n        mimeTypes: ['text/html'],\n        icon: html5Icon\n    };\n    app.docRegistry.addFileType(ft);\n    // Create a new viewer factory.\n    const factory = new HTMLViewerFactory({\n        name: trans.__('HTML Viewer'),\n        fileTypes: ['html'],\n        defaultFor: ['html'],\n        readOnly: true\n    });\n    // Create a widget tracker for HTML documents.\n    const tracker = new WidgetTracker({\n        namespace: 'htmlviewer'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: 'HTML Viewer' }),\n            name: widget => widget.context.path\n        });\n    }\n    app.docRegistry.addWidgetFactory(factory);\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // Track the widget.\n        void tracker.add(widget);\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Notify the application when the trust state changes so it\n        // can update any renderings of the trust command.\n        widget.trustedChanged.connect(() => {\n            app.commands.notifyCommandChanged(CommandIDs.trustHTML);\n        });\n        widget.title.icon = ft.icon;\n        widget.title.iconClass = (_a = ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n    });\n    // Add a command to trust the active HTML document,\n    // allowing script executions in its context.\n    app.commands.addCommand(CommandIDs.trustHTML, {\n        label: trans.__('Trust HTML File'),\n        isEnabled: () => !!tracker.currentWidget,\n        isToggled: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            const sandbox = current.content.sandbox;\n            return sandbox.indexOf('allow-scripts') !== -1;\n        },\n        execute: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            current.trusted = !current.trusted;\n        }\n    });\n    if (palette) {\n        palette.addItem({\n            command: CommandIDs.trustHTML,\n            category: trans.__('File Operations')\n        });\n    }\n    return tracker;\n}\n/**\n * Export the plugins as default.\n */\nexport default htmlPlugin;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","trustHTML","activate","app","translator","palette","restorer","trans","load","ft","name","contentType","fileFormat","displayName","__","extensions","mimeTypes","icon","html5Icon","docRegistry","addFileType","factory","HTMLViewerFactory","fileTypes","defaultFor","readOnly","tracker","WidgetTracker","namespace","restore","command","args","widget","path","context","addWidgetFactory","widgetCreated","connect","sender","_a","_b","add","pathChanged","save","trustedChanged","commands","notifyCommandChanged","title","iconClass","iconLabel","addCommand","label","isEnabled","currentWidget","isToggled","current","content","sandbox","indexOf","execute","trusted","addItem","category","id","provides","IHTMLViewerTracker","requires","ITranslator","optional","ICommandPalette","ILayoutRestorer","autoStart"],"sourceRoot":""}