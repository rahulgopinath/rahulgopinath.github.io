{"version":3,"file":"6465.d4d0d9807bccb324da30.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/pyolite-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/pyolite-kernel/lib/_pypi.js"],"sourcesContent":["import { URLExt, PageConfig } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport worker from './worker?raw';\nimport { PIPLITE_WHEEL } from './_pypi';\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyoliteKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        super(options);\n        this._executeDelegate = new PromiseDelegate();\n        this._ready = new PromiseDelegate();\n        const blob = new Blob([this.buildWorkerScript(options).join('\\n')]);\n        this._worker = new Worker(window.URL.createObjectURL(blob));\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n        this._ready.resolve();\n    }\n    /**\n     * Build a list of literal strings to use in the worker\n     *\n     * Subclasses could use overload this to customize pre-loaded behavior, replace\n     * the worker, or any number of other tricks.\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    buildWorkerScript(options) {\n        const { pyodideUrl } = options;\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const { origin } = window.location;\n        const pypi = URLExt.join(origin, PageConfig.getOption('appUrl'), 'build/pypi');\n        const pipliteUrls = [...(options.pipliteUrls || []), URLExt.join(pypi, 'all.json')];\n        const pipliteWheelUrl = URLExt.join(pypi, PIPLITE_WHEEL);\n        return [\n            // first we need the pyodide initialization scripts...\n            `importScripts(\"${options.pyodideUrl}\");`,\n            // ...we also need the location of the index of pyodide-built js/WASM...\n            `var indexURL = \"${indexUrl}\";`,\n            // ...and the piplite wheel...\n            `var _pipliteWheelUrl = \"${pipliteWheelUrl}\";`,\n            // ...and the locations of custom wheel APIs and indices...\n            `var _pipliteUrls = ${JSON.stringify(pipliteUrls)};`,\n            // ...but maybe not PyPI...\n            `var _disablePyPIFallback = ${JSON.stringify(!!options.disablePyPIFallback)};`,\n            // ...finally, the worker... which _must_ appear last!\n            worker.toString()\n        ];\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        console.log(`Dispose worker for kernel ${this.id}`);\n        this._worker.terminate();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle, msg.parentHeader);\n                break;\n            }\n            case 'input_request': {\n                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };\n                this.inputRequest(bundle, msg.parentHeader);\n                break;\n            }\n            case 'reply': {\n                const bundle = msg.results;\n                this._executeDelegate.resolve(bundle);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };\n                this.clearOutput(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : { execution_count: 0, data: {}, metadata: {} };\n                this.publishExecuteResult(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle, msg.parentHeader);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);\n                break;\n            }\n            default:\n                this._executeDelegate.resolve({\n                    data: {},\n                    metadata: {}\n                });\n                break;\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Pyolite: A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const result = await this._sendRequestMessageToWorker('execute-request', content);\n        return {\n            execution_count: this.executionCount,\n            ...result\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._sendRequestMessageToWorker('complete-request', content);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._sendRequestMessageToWorker('inspect-request', content);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._sendRequestMessageToWorker('is-complete-request', content);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._sendRequestMessageToWorker('comm-info-request', content);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        this._worker.postMessage({\n            type: 'input-reply',\n            data: content,\n            parent: this.parent\n        });\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._sendRequestMessageToWorker('comm-open', msg);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._sendRequestMessageToWorker('comm-msg', msg);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._sendRequestMessageToWorker('comm-close', msg);\n    }\n    /**\n     * Send a message to the web worker\n     *\n     * @param type The message type to send to the worker.\n     * @param data The message to send to the worker.\n     */\n    async _sendRequestMessageToWorker(type, data) {\n        this._executeDelegate = new PromiseDelegate();\n        this._worker.postMessage({ type, data, parent: this.parent });\n        return await this._executeDelegate.promise;\n    }\n}\n","// this file is autogenerated from the wheels described in ../package.json\nexport * as allJSONUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/all.json';\nexport * as ipykernelWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/ipykernel-5.5.5-py3-none-any.whl';\nexport * as pipliteWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/piplite-0.1.0a19-py3-none-any.whl';\nexport * as pyoliteWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/pyolite-0.1.0a19-py3-none-any.whl';\nexport * as widgetsnbextensionWheelUrl from '!!file-loader?name=pypi/[name].[ext]&context=.!../pypi/widgetsnbextension-3.5.0-py3-none-any.whl';\nexport const PIPLITE_WHEEL = 'piplite-0.1.0a19-py3-none-any.whl';\n"],"names":["PyoliteKernel","BaseKernel","constructor","options","super","this","_executeDelegate","PromiseDelegate","_ready","blob","Blob","buildWorkerScript","join","_worker","Worker","window","URL","createObjectURL","onmessage","e","_processWorkerMessage","data","resolve","pyodideUrl","indexUrl","slice","lastIndexOf","origin","location","pypi","URLExt","PageConfig","pipliteUrls","pipliteWheelUrl","JSON","stringify","disablePyPIFallback","dispose","isDisposed","console","log","id","terminate","promise","msg","_a","_b","_c","_d","_e","_f","_g","type","bundle","name","text","stream","parentHeader","content","prompt","password","inputRequest","results","metadata","transient","displayData","updateDisplayData","wait","clearOutput","execution_count","publishExecuteResult","ename","evalue","traceback","publishExecuteError","handleComm","buffers","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","status","banner","help_links","url","result","_sendRequestMessageToWorker","executionCount","inputReply","postMessage","parent"],"sourceRoot":""}