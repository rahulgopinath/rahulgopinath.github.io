{"version":3,"file":"837.3f3cc7efe581172c624f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/contents/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/contents/lib/contents.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server-extension/lib/index.js"],"sourcesContent":["import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const IContents = new Token('@jupyterlite/contents:IContents');\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport localforage from 'localforage';\n/**\n * The name of the local storage.\n */\nconst STORAGE_NAME = 'JupyterLite Storage';\n/**\n * The number of checkpoints to save.\n */\nconst N_CHECKPOINTS = 5;\n/**\n * A list of mime types of text files\n */\nconst EXTRA_TEXT_MIME_TYPES = new Set([\n    'application/javascript',\n    'application/json',\n    'application/manifest+json',\n    'application/x-python-code',\n    'application/xml',\n    'image/svg+xml'\n]);\n/**\n * A class to handle requests to /api/contents\n */\nexport class Contents {\n    constructor() {\n        this._serverContents = new Map();\n        this._storage = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Offline Storage for Notebooks and Files',\n            storeName: 'files',\n            version: 1\n        });\n        this._counters = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Store the current file suffix counters',\n            storeName: 'counters',\n            version: 1\n        });\n        this._checkpoints = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Offline Storage for Checkpoints',\n            storeName: 'checkpoints',\n            version: 1\n        });\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the file is created.\n     */\n    async newUntitled(options) {\n        var _a, _b, _c;\n        const path = (_a = options === null || options === void 0 ? void 0 : options.path) !== null && _a !== void 0 ? _a : '';\n        const type = (_b = options === null || options === void 0 ? void 0 : options.type) !== null && _b !== void 0 ? _b : 'notebook';\n        const created = new Date().toISOString();\n        let dirname = PathExt.dirname(path);\n        const basename = PathExt.basename(path);\n        const extname = PathExt.extname(path);\n        const item = await this.get(dirname);\n        // handle the case of \"Save As\", where the path points to the new file\n        // to create, e.g. subfolder/example-copy.ipynb\n        let name = '';\n        if (path && !extname && item) {\n            // directory\n            dirname = `${path}/`;\n            name = '';\n        }\n        else if (dirname && basename) {\n            // file in a subfolder\n            dirname = `${dirname}/`;\n            name = basename;\n        }\n        else {\n            // file at the top level\n            dirname = '';\n            name = path;\n        }\n        let file;\n        switch (type) {\n            case 'directory': {\n                const counter = await this._incrementCounter('directory');\n                name = `Untitled Folder${counter || ''}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'text',\n                    mimetype: '',\n                    content: null,\n                    size: undefined,\n                    writable: true,\n                    type: 'directory'\n                };\n                break;\n            }\n            case 'file': {\n                const ext = (_c = options === null || options === void 0 ? void 0 : options.ext) !== null && _c !== void 0 ? _c : '.txt';\n                const counter = await this._incrementCounter('file');\n                name = name || `untitled${counter || ''}${ext}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'text',\n                    // TODO: handle mimetypes\n                    mimetype: 'text/plain',\n                    content: '',\n                    size: 0,\n                    writable: true,\n                    type: 'file'\n                };\n                break;\n            }\n            default: {\n                const counter = await this._incrementCounter('notebook');\n                name = name || `Untitled${counter || ''}.ipynb`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: 'application/json',\n                    content: Private.EMPTY_NB,\n                    size: JSON.stringify(Private.EMPTY_NB).length,\n                    writable: true,\n                    type: 'notebook'\n                };\n                break;\n            }\n        }\n        const key = file.path;\n        await this._storage.setItem(key, file);\n        return file;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    async copy(path, toDir) {\n        let name = PathExt.basename(path);\n        toDir = toDir === '' ? '' : `${toDir.slice(1)}/`;\n        // TODO: better handle naming collisions with existing files\n        while (await this.get(`${toDir}${name}`, { content: true })) {\n            const ext = PathExt.extname(name);\n            const base = name.replace(ext, '');\n            name = `${base} (copy)${ext}`;\n        }\n        const toPath = `${toDir}${name}`;\n        let item = await this.get(path, { content: true });\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        item = {\n            ...item,\n            name,\n            path: toPath\n        };\n        await this._storage.setItem(toPath, item);\n        return item;\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    async get(path, options) {\n        // remove leading slash\n        path = decodeURIComponent(path.replace(/^\\//, ''));\n        if (path === '') {\n            return await this._getFolder(path);\n        }\n        const item = await this._storage.getItem(path);\n        const serverItem = await this._getServerContents(path, options);\n        const model = (item || serverItem);\n        if (!model) {\n            return null;\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.content)) {\n            return {\n                ...model,\n                content: null,\n                size: undefined\n            };\n        }\n        // for directories, find all files with the path as the prefix\n        if (model.type === 'directory') {\n            const contentMap = new Map();\n            await this._storage.iterate((item, key) => {\n                const file = item;\n                // use an additional slash to not include the directory itself\n                if (key === `${path}/${file.name}`) {\n                    contentMap.set(file.name, file);\n                }\n            });\n            const serverContents = serverItem\n                ? serverItem.content\n                : Array.from((await this._getServerDirectory(path)).values());\n            for (const file of serverContents) {\n                if (!contentMap.has(file.name)) {\n                    contentMap.set(file.name, file);\n                }\n            }\n            const content = [...contentMap.values()];\n            return {\n                name: PathExt.basename(path),\n                path,\n                last_modified: model.last_modified,\n                created: model.created,\n                format: 'json',\n                mimetype: 'application/json',\n                content,\n                size: undefined,\n                writable: true,\n                type: 'directory'\n            };\n        }\n        return model;\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the file is renamed.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const path = decodeURIComponent(oldLocalPath);\n        const file = await this.get(path, { content: true });\n        if (!file) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const modified = new Date().toISOString();\n        const name = PathExt.basename(newLocalPath);\n        const newFile = {\n            ...file,\n            name,\n            path: newLocalPath,\n            last_modified: modified\n        };\n        await this._storage.setItem(newLocalPath, newFile);\n        // remove the old file\n        await this._storage.removeItem(path);\n        // remove the corresponding checkpoint\n        await this._checkpoints.removeItem(path);\n        // if a directory, recurse through all children\n        if (file.type === 'directory') {\n            let child;\n            for (child of file.content) {\n                await this.rename(URLExt.join(oldLocalPath, child.name), URLExt.join(newLocalPath, child.name));\n            }\n        }\n        return newFile;\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the file is saved.\n     */\n    async save(path, options = {}) {\n        var _a;\n        path = decodeURIComponent(path);\n        let item = (await this.get(path)) || (await this.newUntitled({ path }));\n        if (!item) {\n            return null;\n        }\n        // override with the new values\n        const modified = new Date().toISOString();\n        item = {\n            ...item,\n            ...options,\n            last_modified: modified\n        };\n        // process the file if coming from an upload\n        const ext = PathExt.extname((_a = options.name) !== null && _a !== void 0 ? _a : '');\n        if (options.content && options.format === 'base64') {\n            // TODO: keep base64 if not a text file (image)\n            const content = atob(options.content);\n            const nb = ext === '.ipynb';\n            item = {\n                ...item,\n                content: nb ? JSON.parse(content) : content,\n                format: nb ? 'json' : 'text',\n                type: nb ? 'notebook' : 'file'\n            };\n        }\n        await this._storage.setItem(path, item);\n        return item;\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     */\n    async delete(path) {\n        path = decodeURIComponent(path);\n        const toDelete = [];\n        // handle deleting directories recursively\n        await this._storage.iterate((item, key) => {\n            if (key === path || key.startsWith(`${path}/`)) {\n                toDelete.push(key);\n            }\n        });\n        await Promise.all(toDelete.map(async (p) => {\n            return Promise.all([\n                this._storage.removeItem(p),\n                this._checkpoints.removeItem(p)\n            ]);\n        }));\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    async createCheckpoint(path) {\n        var _a;\n        path = decodeURIComponent(path);\n        const item = await this.get(path, { content: true });\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const copies = ((_a = (await this._checkpoints.getItem(path))) !== null && _a !== void 0 ? _a : []).filter(item => !!item);\n        copies.push(item);\n        // keep only a certain amount of checkpoints per file\n        if (copies.length > N_CHECKPOINTS) {\n            copies.splice(0, copies.length - N_CHECKPOINTS);\n        }\n        await this._checkpoints.setItem(path, copies);\n        const id = `${copies.length - 1}`;\n        return {\n            id,\n            last_modified: item.last_modified\n        };\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    async listCheckpoints(path) {\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        return copies\n            .filter(item => !!item)\n            .map((file, id) => {\n            return {\n                id: id.toString(),\n                last_modified: file.last_modified\n            };\n        });\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    async restoreCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        const id = parseInt(checkpointID);\n        const item = copies[id];\n        await this._storage.setItem(path, item);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    async deleteCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        const id = parseInt(checkpointID);\n        copies.splice(id, 1);\n        await this._checkpoints.setItem(path, copies);\n    }\n    /**\n     * retrieve the contents for this path from the union of local storage and\n     * `api/contents/{path}/all.json`.\n     *\n     * @param path - The contents path to retrieve\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getFolder(path) {\n        const content = new Map();\n        await this._storage.iterate((item, key) => {\n            if (key.includes('/')) {\n                return;\n            }\n            const file = item;\n            content.set(file.path, file);\n        });\n        // layer in contents that don't have local overwrites\n        for (const file of (await this._getServerDirectory(path)).values()) {\n            if (!content.has(file.path)) {\n                content.set(file.path, file);\n            }\n        }\n        if (path && content.size === 0) {\n            return null;\n        }\n        return {\n            name: '',\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'json',\n            mimetype: 'application/json',\n            content: Array.from(content.values()),\n            size: undefined,\n            writable: true,\n            type: 'directory'\n        };\n    }\n    /**\n     * Attempt to recover the model from `{:path}/__all__.json` file, fall back to\n     * deriving the model (including content) off the file in `/files/`. Otherwise\n     * return `null`.\n     */\n    async _getServerContents(path, options) {\n        const name = PathExt.basename(path);\n        const parentContents = await this._getServerDirectory(URLExt.join(path, '..'));\n        let model = parentContents.get(name);\n        if (!model) {\n            return null;\n        }\n        model = model || {\n            name,\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'text',\n            mimetype: 'text/plain',\n            type: 'file',\n            writable: true,\n            content: null\n        };\n        if (options === null || options === void 0 ? void 0 : options.content) {\n            if (model.type === 'directory') {\n                const serverContents = await this._getServerDirectory(path);\n                model = { ...model, content: Array.from(serverContents.values()) };\n            }\n            else {\n                const fileUrl = URLExt.join(PageConfig.getBaseUrl(), 'files', path);\n                const response = await fetch(fileUrl);\n                if (!response.ok) {\n                    return null;\n                }\n                const mimetype = model.mimetype || response.headers.get('Content-Type');\n                if (model.type === 'notebook' ||\n                    (mimetype === null || mimetype === void 0 ? void 0 : mimetype.indexOf('json')) !== -1 ||\n                    path.match(/\\.(ipynb|[^/]*json[^/]*)$/)) {\n                    model = {\n                        ...model,\n                        content: await response.json(),\n                        format: 'json',\n                        mimetype: model.mimetype || 'application/json'\n                    };\n                }\n                else if (mimetype.indexOf('text') !== -1 ||\n                    EXTRA_TEXT_MIME_TYPES.has(mimetype)) {\n                    model = {\n                        ...model,\n                        content: await response.text(),\n                        format: 'text',\n                        mimetype: mimetype || 'text/plain'\n                    };\n                }\n                else {\n                    model = {\n                        ...model,\n                        content: btoa(String.fromCharCode(...new Uint8Array(await response.arrayBuffer()))),\n                        format: 'base64',\n                        mimetype: mimetype || 'octet/stream'\n                    };\n                }\n            }\n        }\n        return model;\n    }\n    /**\n     * retrieve the contents for this path from `__index__.json` in the appropriate\n     * folder.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getServerDirectory(path) {\n        const content = this._serverContents.get(path) || new Map();\n        if (!this._serverContents.has(path)) {\n            const apiURL = URLExt.join(PageConfig.getBaseUrl(), 'api/contents', path, 'all.json');\n            try {\n                const response = await fetch(apiURL);\n                const json = JSON.parse(await response.text());\n                for (const file of json['content']) {\n                    content.set(file.name, file);\n                }\n            }\n            catch (err) {\n                console.warn(`don't worry, about ${err}... nothing's broken. if there had been a\n          file at ${apiURL}, you might see some more files.`);\n            }\n            this._serverContents.set(path, content);\n        }\n        return content;\n    }\n    /**\n     * Increment the counter for a given file type.\n     * Used to avoid collisions when creating new untitled files.\n     *\n     * @param type The file type to increment the counter for.\n     */\n    async _incrementCounter(type) {\n        var _a;\n        const current = (_a = (await this._counters.getItem(type))) !== null && _a !== void 0 ? _a : -1;\n        const counter = current + 1;\n        await this._counters.setItem(type, counter);\n        return counter;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The content for an empty notebook.\n     */\n    Private.EMPTY_NB = {\n        metadata: {\n            orig_nbformat: 4\n        },\n        nbformat_minor: 4,\n        nbformat: 4,\n        cells: []\n    };\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Contents, IContents } from '@jupyterlite/contents';\nimport { IKernels, Kernels, IKernelSpecs, KernelSpecs } from '@jupyterlite/kernel';\nimport { JupyterServer, LiteServiceManager } from '@jupyterlite/server';\nimport { ISessions, Sessions } from '@jupyterlite/session';\nimport { ISettings, Settings } from '@jupyterlite/settings';\nimport { ITranslation, Translation } from '@jupyterlite/translation';\n/**\n * The contents service plugin.\n */\nconst contents = {\n    id: '@jupyterlite/server-extension:contents',\n    autoStart: true,\n    provides: IContents,\n    activate: (app) => {\n        return new Contents();\n    }\n};\n/**\n * The kernels service plugin.\n */\nconst kernels = {\n    id: '@jupyterlite/server-extension:kernels',\n    autoStart: true,\n    provides: IKernels,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        return new Kernels({ kernelspecs });\n    }\n};\n/**\n * The kernel spec service plugin.\n */\nconst kernelSpec = {\n    id: '@jupyterlite/server-extension:kernelspec',\n    autoStart: true,\n    provides: IKernelSpecs,\n    activate: (app) => {\n        return new KernelSpecs({});\n    }\n};\n/**\n * The sessions service plugin.\n */\nconst sessions = {\n    id: '@jupyterlite/server-extension:sessions',\n    autoStart: true,\n    provides: ISessions,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        return new Sessions({ kernels });\n    }\n};\n/**\n * The server plugin.\n */\nconst server = {\n    id: '@jupyterlite/server-extension:server',\n    autoStart: true,\n    requires: [IContents, IKernels, IKernelSpecs, ISessions, ISettings, ITranslation],\n    activate: (app, contents, kernels, kernelspecs, sessions, settings, translation) => {\n        const jupyterServer = new JupyterServer({\n            contents,\n            kernels,\n            kernelspecs,\n            sessions,\n            settings,\n            translation\n        });\n        const serviceManager = new LiteServiceManager({ server: jupyterServer });\n        app.registerServiceManager(serviceManager);\n    }\n};\n/**\n * The settings service plugin.\n */\nconst settings = {\n    id: '@jupyterlite/server-extension:settings',\n    autoStart: true,\n    provides: ISettings,\n    activate: (app) => {\n        return new Settings();\n    }\n};\n/**\n * The translation service plugin.\n */\nconst translation = {\n    id: '@jupyterlite/server-extension:translation',\n    autoStart: true,\n    provides: ITranslation,\n    activate: (app) => {\n        return new Translation();\n    }\n};\nconst plugins = [\n    contents,\n    kernels,\n    kernelSpec,\n    server,\n    sessions,\n    settings,\n    translation\n];\nexport default plugins;\n"],"names":["IContents","Token","STORAGE_NAME","EXTRA_TEXT_MIME_TYPES","Set","Contents","constructor","this","_serverContents","Map","_storage","name","description","storeName","version","_counters","_checkpoints","options","_a","_b","_c","path","type","created","Date","toISOString","dirname","PathExt","basename","extname","item","get","file","_incrementCounter","last_modified","format","mimetype","content","size","undefined","writable","ext","counter","Private","EMPTY_NB","JSON","stringify","length","key","setItem","toDir","slice","base","replace","toPath","Error","decodeURIComponent","_getFolder","getItem","serverItem","_getServerContents","model","contentMap","iterate","set","serverContents","Array","from","_getServerDirectory","values","has","oldLocalPath","newLocalPath","modified","newFile","removeItem","child","rename","URLExt","newUntitled","atob","nb","parse","toDelete","startsWith","push","Promise","all","map","async","p","copies","filter","splice","id","toString","checkpointID","parseInt","includes","fileUrl","PageConfig","response","fetch","ok","headers","indexOf","match","json","text","btoa","String","fromCharCode","Uint8Array","arrayBuffer","apiURL","err","console","warn","metadata","orig_nbformat","nbformat_minor","nbformat","cells","contents","autoStart","provides","activate","app","kernels","IKernels","requires","IKernelSpecs","kernelspecs","Kernels","kernelSpec","KernelSpecs","sessions","ISessions","Sessions","ISettings","ITranslation","settings","translation","jupyterServer","JupyterServer","serviceManager","LiteServiceManager","server","registerServiceManager","Settings","Translation"],"sourceRoot":""}