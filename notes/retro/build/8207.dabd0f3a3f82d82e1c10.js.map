{"version":3,"file":"8207.dabd0f3a3f82d82e1c10.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/shared-models/lib/ymodels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/shared-models/lib/utils.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\nconst deepCopy = (o) => JSON.parse(JSON.stringify(o));\nexport class YDocument {\n    constructor() {\n        this.isDisposed = false;\n        this.ydoc = new Y.Doc();\n        this.source = this.ydoc.getText('source');\n        this.ystate = this.ydoc.getMap('state');\n        this.undoManager = new Y.UndoManager([this.source], {\n            trackedOrigins: new Set([this])\n        });\n        this.awareness = new Awareness(this.ydoc);\n        this._changed = new Signal(this);\n    }\n    get dirty() {\n        return this.ystate.get('dirty');\n    }\n    set dirty(value) {\n        this.transact(() => {\n            this.ystate.set('dirty', value);\n        }, false);\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.ydoc.transact(f, undoable ? this : null);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.isDisposed = true;\n        this.ydoc.destroy();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        this.undoManager.clear();\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n}\nexport class YFile extends YDocument {\n    constructor() {\n        super();\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (event) => {\n            const changes = {};\n            changes.sourceChange = event.changes.delta;\n            this._changed.emit(changes);\n        };\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onStateChanged = (event) => {\n            const stateChange = [];\n            event.keysChanged.forEach(key => {\n                const change = event.changes.keys.get(key);\n                if (change) {\n                    stateChange.push({\n                        name: key,\n                        oldValue: change.oldValue,\n                        newValue: this.ystate.get(key)\n                    });\n                }\n            });\n            this._changed.emit({ stateChange });\n        };\n        this.ysource = this.ydoc.getText('source');\n        this.ysource.observe(this._modelObserver);\n        this.ystate.observe(this._onStateChanged);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.ysource.unobserve(this._modelObserver);\n        this.ystate.unobserve(this._onStateChanged);\n    }\n    static create() {\n        return new YFile();\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        this.transact(() => {\n            const ytext = this.ysource;\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n}\n/**\n * Shared implementation of the Shared Document types.\n *\n * Shared cells can be inserted into a SharedNotebook.\n * Shared cells only start emitting events when they are connected to a SharedNotebook.\n *\n * \"Standalone\" cells must not be inserted into a (Shared)Notebook.\n * Standalone cells emit events immediately after they have been created, but they must not\n * be included into a (Shared)Notebook.\n */\nexport class YNotebook extends YDocument {\n    constructor(options) {\n        super();\n        /**\n         * Handle a change to the list of cells.\n         */\n        this._onYCellsChanged = (event) => {\n            // update the type⇔cell mapping by iterating through the added/removed types\n            event.changes.added.forEach(item => {\n                const type = item.content.type;\n                if (!this._ycellMapping.has(type)) {\n                    this._ycellMapping.set(type, createCellFromType(type));\n                }\n                const cell = this._ycellMapping.get(type);\n                cell._notebook = this;\n                if (!this.disableDocumentWideUndoRedo) {\n                    cell._undoManager = this.undoManager;\n                }\n                else {\n                    cell._undoManager = new Y.UndoManager([cell.ymodel], {});\n                }\n            });\n            event.changes.deleted.forEach(item => {\n                const type = item.content.type;\n                const model = this._ycellMapping.get(type);\n                if (model) {\n                    model.dispose();\n                    this._ycellMapping.delete(type);\n                }\n            });\n            let index = 0;\n            // this reflects the event.changes.delta, but replaces the content of delta.insert with ycells\n            const cellsChange = [];\n            event.changes.delta.forEach((d) => {\n                if (d.insert != null) {\n                    const insertedCells = d.insert.map((ycell) => this._ycellMapping.get(ycell));\n                    cellsChange.push({ insert: insertedCells });\n                    this.cells.splice(index, 0, ...insertedCells);\n                    index += d.insert.length;\n                }\n                else if (d.delete != null) {\n                    cellsChange.push(d);\n                    this.cells.splice(index, d.delete);\n                }\n                else if (d.retain != null) {\n                    cellsChange.push(d);\n                    index += d.retain;\n                }\n            });\n            this._changed.emit({\n                cellsChange: cellsChange\n            });\n        };\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onMetadataChanged = (event) => {\n            if (event.keysChanged.has('metadata')) {\n                const change = event.changes.keys.get('metadata');\n                const metadataChange = {\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.getMetadata()\n                };\n                this._changed.emit({ metadataChange });\n            }\n        };\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onStateChanged = (event) => {\n            const stateChange = [];\n            event.keysChanged.forEach(key => {\n                const change = event.changes.keys.get(key);\n                if (change) {\n                    stateChange.push({\n                        name: key,\n                        oldValue: change.oldValue,\n                        newValue: this.ystate.get(key)\n                    });\n                }\n            });\n            this._changed.emit({ stateChange });\n        };\n        this.ycells = this.ydoc.getArray('cells');\n        this.ymeta = this.ydoc.getMap('meta');\n        this.ymodel = this.ydoc.getMap('model');\n        this.undoManager = new Y.UndoManager([this.ycells], {\n            trackedOrigins: new Set([this])\n        });\n        this._ycellMapping = new Map();\n        this._disableDocumentWideUndoRedo = options.disableDocumentWideUndoRedo;\n        this.ycells.observe(this._onYCellsChanged);\n        this.cells = this.ycells.toArray().map(ycell => {\n            if (!this._ycellMapping.has(ycell)) {\n                this._ycellMapping.set(ycell, createCellFromType(ycell));\n            }\n            return this._ycellMapping.get(ycell);\n        });\n        this.ymeta.observe(this._onMetadataChanged);\n        this.ystate.observe(this._onStateChanged);\n    }\n    get nbformat() {\n        return this.ystate.get('nbformat');\n    }\n    set nbformat(value) {\n        this.transact(() => {\n            this.ystate.set('nbformat', value);\n        }, false);\n    }\n    get nbformat_minor() {\n        return this.ystate.get('nbformatMinor');\n    }\n    set nbformat_minor(value) {\n        this.transact(() => {\n            this.ystate.set('nbformatMinor', value);\n        }, false);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.ycells.unobserve(this._onYCellsChanged);\n        this.ymeta.unobserve(this._onMetadataChanged);\n        this.ystate.unobserve(this._onStateChanged);\n    }\n    /**\n     * Get a shared cell by index.\n     *\n     * @param index: Cell's position.\n     *\n     * @returns The requested shared cell.\n     */\n    getCell(index) {\n        return this.cells[index];\n    }\n    /**\n     * Insert a shared cell into a specific position.\n     *\n     * @param index: Cell's position.\n     *\n     * @param cell: Cell to insert.\n     */\n    insertCell(index, cell) {\n        this.insertCells(index, [cell]);\n    }\n    /**\n     * Insert a list of shared cells into a specific position.\n     *\n     * @param index: Position to insert the cells.\n     *\n     * @param cells: Array of shared cells to insert.\n     */\n    insertCells(index, cells) {\n        cells.forEach(cell => {\n            this._ycellMapping.set(cell.ymodel, cell);\n            if (!this.disableDocumentWideUndoRedo) {\n                cell.undoManager = this.undoManager;\n            }\n        });\n        this.transact(() => {\n            this.ycells.insert(index, cells.map(cell => cell.ymodel));\n        });\n    }\n    /**\n     * Move a cell.\n     *\n     * @param fromIndex: Index of the cell to move.\n     *\n     * @param toIndex: New position of the cell.\n     */\n    moveCell(fromIndex, toIndex) {\n        this.transact(() => {\n            const fromCell = this.getCell(fromIndex).clone();\n            this.deleteCell(fromIndex);\n            this.insertCell(toIndex, fromCell);\n        });\n    }\n    /**\n     * Remove a cell.\n     *\n     * @param index: Index of the cell to remove.\n     */\n    deleteCell(index) {\n        this.deleteCellRange(index, index + 1);\n    }\n    /**\n     * Remove a range of cells.\n     *\n     * @param from: The start index of the range to remove (inclusive).\n     *\n     * @param to: The end index of the range to remove (exclusive).\n     */\n    deleteCellRange(from, to) {\n        this.transact(() => {\n            this.ycells.delete(from, to - from);\n        });\n    }\n    /**\n     * Returns the metadata associated with the notebook.\n     *\n     * @returns Notebook's metadata.\n     */\n    getMetadata() {\n        const meta = this.ymeta.get('metadata');\n        return meta ? deepCopy(meta) : {};\n    }\n    /**\n     * Sets the metadata associated with the notebook.\n     *\n     * @param metadata: Notebook's metadata.\n     */\n    setMetadata(value) {\n        this.ymeta.set('metadata', deepCopy(value));\n    }\n    /**\n     * Updates the metadata associated with the notebook.\n     *\n     * @param value: Metadata's attribute to update.\n     */\n    updateMetadata(value) {\n        // TODO: Maybe modify only attributes instead of replacing the whole metadata?\n        this.ymeta.set('metadata', Object.assign({}, this.getMetadata(), value));\n    }\n    /**\n     * Create a new YNotebook.\n     */\n    static create(disableDocumentWideUndoRedo) {\n        return new YNotebook({ disableDocumentWideUndoRedo });\n    }\n    /**\n     * Wether the the undo/redo logic should be\n     * considered on the full document across all cells.\n     *\n     * @return The disableDocumentWideUndoRedo setting.\n     */\n    get disableDocumentWideUndoRedo() {\n        return this._disableDocumentWideUndoRedo;\n    }\n}\n/**\n * Create a new shared cell given the type.\n */\nexport const createCellFromType = (type) => {\n    switch (type.get('cell_type')) {\n        case 'code':\n            return new YCodeCell(type);\n        case 'markdown':\n            return new YMarkdownCell(type);\n        case 'raw':\n            return new YRawCell(type);\n        default:\n            throw new Error('Found unknown cell type');\n    }\n};\n/**\n * Create a new standalone cell given the type.\n */\nexport const createStandaloneCell = (cellType, id) => {\n    switch (cellType) {\n        case 'markdown':\n            return YMarkdownCell.createStandalone(id);\n        case 'code':\n            return YCodeCell.createStandalone(id);\n        default:\n            // raw\n            return YRawCell.createStandalone(id);\n    }\n};\nexport class YBaseCell {\n    constructor(ymodel) {\n        /**\n         * The notebook that this cell belongs to.\n         */\n        this._notebook = null;\n        /**\n         * Whether the cell is standalone or not.\n         *\n         * If the cell is standalone. It cannot be\n         * inserted into a YNotebook because the Yjs model is already\n         * attached to an anonymous Y.Doc instance.\n         */\n        this.isStandalone = false;\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (events) => {\n            const changes = {};\n            const sourceEvent = events.find(event => event.target === this.ymodel.get('source'));\n            if (sourceEvent) {\n                changes.sourceChange = sourceEvent.changes.delta;\n            }\n            const outputEvent = events.find(event => event.target === this.ymodel.get('outputs'));\n            if (outputEvent) {\n                changes.outputsChange = outputEvent.changes.delta;\n            }\n            const modelEvent = events.find(event => event.target === this.ymodel);\n            if (modelEvent && modelEvent.keysChanged.has('metadata')) {\n                const change = modelEvent.changes.keys.get('metadata');\n                changes.metadataChange = {\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.getMetadata()\n                };\n            }\n            if (modelEvent && modelEvent.keysChanged.has('execution_count')) {\n                const change = modelEvent.changes.keys.get('execution_count');\n                changes.executionCountChange = {\n                    oldValue: change.oldValue,\n                    newValue: this.ymodel.get('execution_count')\n                };\n            }\n            // The model allows us to replace the complete source with a new string. We express this in the Delta format\n            // as a replace of the complete string.\n            const ysource = this.ymodel.get('source');\n            if (modelEvent && modelEvent.keysChanged.has('source')) {\n                changes.sourceChange = [\n                    { delete: this._prevSourceLength },\n                    { insert: ysource.toString() }\n                ];\n            }\n            this._prevSourceLength = ysource.length;\n            this._changed.emit(changes);\n        };\n        this.isDisposed = false;\n        this._undoManager = null;\n        this._changed = new Signal(this);\n        this.ymodel = ymodel;\n        const ysource = ymodel.get('source');\n        this._prevSourceLength = ysource ? ysource.length : 0;\n        this.ymodel.observeDeep(this._modelObserver);\n    }\n    get ysource() {\n        return this.ymodel.get('source');\n    }\n    get awareness() {\n        var _a;\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.awareness) || null;\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.notebook && undoable\n            ? this.notebook.transact(f)\n            : this.ymodel.doc.transact(f, this);\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get undoManager() {\n        var _a;\n        if (!this.notebook) {\n            return this._undoManager;\n        }\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.disableDocumentWideUndoRedo) ? this._undoManager\n            : this.notebook.undoManager;\n    }\n    /**\n     * Set the undoManager when adding new cells.\n     */\n    set undoManager(undoManager) {\n        this._undoManager = undoManager;\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.redo();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return !!this.undoManager && this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return !!this.undoManager && this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get notebook() {\n        return this._notebook;\n    }\n    /**\n     * Create a new YRawCell that can be inserted into a YNotebook\n     */\n    static create(id = UUID.uuid4()) {\n        const ymodel = new Y.Map();\n        const ysource = new Y.Text();\n        ymodel.set('source', ysource);\n        ymodel.set('metadata', {});\n        ymodel.set('cell_type', this.prototype.cell_type);\n        ymodel.set('id', id);\n        return new this(ymodel);\n    }\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        const cell = this.create(id);\n        cell.isStandalone = true;\n        new Y.Doc().getArray().insert(0, [cell.ymodel]);\n        cell._undoManager = new Y.UndoManager([cell.ymodel], {\n            trackedOrigins: new Set([cell])\n        });\n        return cell;\n    }\n    /**\n     * Clone the cell.\n     *\n     * @todo clone should only be available in the specific implementations i.e. ISharedCodeCell\n     */\n    clone() {\n        const ymodel = new Y.Map();\n        const ysource = new Y.Text(this.getSource());\n        ymodel.set('source', ysource);\n        ymodel.set('metadata', this.getMetadata());\n        ymodel.set('cell_type', this.cell_type);\n        ymodel.set('id', this.getId());\n        const Self = this.constructor;\n        const clone = new Self(ymodel);\n        // TODO The assignment of the undoManager does not work for a clone.\n        // See https://github.com/jupyterlab/jupyterlab/issues/11035\n        clone._undoManager = this.undoManager;\n        return clone;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.ymodel.unobserveDeep(this._modelObserver);\n    }\n    /**\n     * Gets the cell attachments.\n     *\n     * @returns The cell attachments.\n     */\n    getAttachments() {\n        return this.ymodel.get('attachments');\n    }\n    /**\n     * Sets the cell attachments\n     *\n     * @param attachments: The cell attachments.\n     */\n    setAttachments(attachments) {\n        this.transact(() => {\n            if (attachments == null) {\n                this.ymodel.delete('attachments');\n            }\n            else {\n                this.ymodel.set('attachments', attachments);\n            }\n        });\n    }\n    /**\n     * Get cell id.\n     *\n     * @returns Cell id\n     */\n    getId() {\n        return this.ymodel.get('id');\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ymodel.get('source').toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        const ytext = this.ymodel.get('source');\n        this.transact(() => {\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n        // @todo Do we need proper replace semantic? This leads to issues in editor bindings because they don't switch source.\n        // this.ymodel.set('source', new Y.Text(value));\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        throw new Error('A YBaseCell must not be constructed');\n    }\n    /**\n     * Returns the metadata associated with the notebook.\n     *\n     * @returns Notebook's metadata.\n     */\n    getMetadata() {\n        return deepCopy(this.ymodel.get('metadata'));\n    }\n    /**\n     * Sets the metadata associated with the notebook.\n     *\n     * @param metadata: Notebook's metadata.\n     */\n    setMetadata(value) {\n        this.transact(() => {\n            this.ymodel.set('metadata', deepCopy(value));\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: this.cell_type,\n            source: this.getSource(),\n            metadata: this.getMetadata()\n        };\n    }\n}\nexport class YCodeCell extends YBaseCell {\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        return 'code';\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    get execution_count() {\n        return this.ymodel.get('execution_count');\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    set execution_count(count) {\n        this.transact(() => {\n            this.ymodel.set('execution_count', count);\n        });\n    }\n    /**\n     * Execution, display, or stream outputs.\n     */\n    getOutputs() {\n        return deepCopy(this.ymodel.get('outputs').toArray());\n    }\n    /**\n     * Replace all outputs.\n     */\n    setOutputs(outputs) {\n        const youtputs = this.ymodel.get('outputs');\n        this.transact(() => {\n            youtputs.delete(0, youtputs.length);\n            youtputs.insert(0, outputs);\n        }, false);\n    }\n    /**\n     * Replace content from `start' to `end` with `outputs`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param outputs: New outputs (optional).\n     */\n    updateOutputs(start, end, outputs = []) {\n        const youtputs = this.ymodel.get('outputs');\n        const fin = end < youtputs.length ? end - start : youtputs.length - start;\n        this.transact(() => {\n            youtputs.delete(start, fin);\n            youtputs.insert(start, outputs);\n        }, false);\n    }\n    /**\n     * Create a new YCodeCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        const cell = super.create(id);\n        cell.ymodel.set('execution_count', 0); // for some default value\n        cell.ymodel.set('outputs', new Y.Array());\n        return cell;\n    }\n    /**\n     * Create a new YCodeCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        const cell = super.createStandalone(id);\n        cell.ymodel.set('execution_count', null); // for some default value\n        cell.ymodel.set('outputs', new Y.Array());\n        return cell;\n    }\n    /**\n     * Create a new YCodeCell that can be inserted into a YNotebook\n     *\n     * @todo clone should only be available in the specific implementations i.e. ISharedCodeCell\n     */\n    clone() {\n        const cell = super.clone();\n        const youtputs = new Y.Array();\n        youtputs.insert(0, this.getOutputs());\n        cell.ymodel.set('execution_count', this.execution_count); // for some default value\n        cell.ymodel.set('outputs', youtputs);\n        return cell;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'code',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            outputs: this.getOutputs(),\n            execution_count: this.execution_count\n        };\n    }\n}\nexport class YRawCell extends YBaseCell {\n    /**\n     * Create a new YRawCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'raw',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\nexport class YMarkdownCell extends YBaseCell {\n    /**\n     * Create a new YMarkdownCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Create a new YMarkdownCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'markdown',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\nexport default YNotebook;\n//# sourceMappingURL=ymodels.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map"],"names":["deepCopy","o","JSON","parse","stringify","YDocument","constructor","this","isDisposed","ydoc","source","getText","ystate","getMap","undoManager","trackedOrigins","Set","awareness","_changed","Signal","get","value","transact","set","f","undoable","dispose","destroy","canUndo","undoStack","length","canRedo","redoStack","undo","redo","clearUndoHistory","clear","YFile","super","_modelObserver","event","changes","sourceChange","delta","emit","_onStateChanged","stateChange","keysChanged","forEach","key","change","keys","push","name","oldValue","newValue","ysource","observe","unobserve","getSource","toString","setSource","ytext","delete","insert","updateSource","start","end","YNotebook","options","_onYCellsChanged","added","item","type","content","_ycellMapping","has","createCellFromType","cell","_notebook","disableDocumentWideUndoRedo","_undoManager","ymodel","deleted","model","index","cellsChange","d","insertedCells","map","ycell","cells","splice","retain","_onMetadataChanged","metadataChange","undefined","getMetadata","ycells","getArray","ymeta","Map","_disableDocumentWideUndoRedo","toArray","getCell","insertCell","insertCells","moveCell","fromIndex","toIndex","fromCell","clone","deleteCell","deleteCellRange","from","to","meta","setMetadata","updateMetadata","Object","assign","YCodeCell","YMarkdownCell","YRawCell","Error","createStandaloneCell","cellType","id","createStandalone","YBaseCell","isStandalone","events","sourceEvent","find","target","outputEvent","outputsChange","modelEvent","executionCountChange","_prevSourceLength","observeDeep","_a","notebook","doc","UUID","prototype","cell_type","create","getId","Self","unobserveDeep","getAttachments","setAttachments","attachments","toJSON","metadata","count","getOutputs","setOutputs","outputs","youtputs","updateOutputs","fin","execution_count","convertYMapEventToMapChange","action","createMutex","token"],"sourceRoot":""}