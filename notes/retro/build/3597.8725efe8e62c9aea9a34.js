"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[3597,9302],{39302:(e,t,s)=>{s.r(t),s.d(t,{ISettings:()=>c,Settings:()=>g});var n,i=s(5768),a=s(96111),r=s(75486),o=s.n(r);class g{constructor(){this._storage=o().createInstance({name:"JupyterLite Storage",description:"Offline Storage for Settings",storeName:"settings",version:1})}async get(e){let t=(await this.getAll()).settings.find((t=>t.id===e));return t||(t=await this._getFederated(e)),t}async getAll(){var e;const t=null!==(e=i.PageConfig.getOption("settingsUrl"))&&void 0!==e?e:"/",s=await(await fetch(i.URLExt.join(t,"all.json"))).json();return{settings:await Promise.all(s.map((async e=>{var t;const{id:s}=e,i=null!==(t=await this._storage.getItem(s))&&void 0!==t?t:e.raw;return{...n.override(e),raw:i,settings:a.parse(i)}})))}}async save(e,t){await this._storage.setItem(e,t)}async _getFederated(e){var t;const[s,r]=e.split(":");if(!n.isFederated(s))return;const o=i.PageConfig.getOption("fullLabextensionsUrl"),g=i.URLExt.join(o,s,"schemas",s,`${r}.json`),c=i.URLExt.join(o,s,"package.json"),l=await(await fetch(g)).json(),d=await(await fetch(c)).json(),f=null!==(t=await this._storage.getItem(e))&&void 0!==t?t:"{}",u=a.parse(f)||{};return n.override({id:e,raw:f,schema:l,settings:u,version:d.version||"3.0.8"})}}!function(e){const t=JSON.parse(i.PageConfig.getOption("settingsOverrides")||"{}");e.isFederated=function(e){let t;try{t=JSON.parse(i.PageConfig.getOption("federated_extensions"))}catch{return!1}for(const{name:s}of t)if(s===e)return!0;return!1},e.override=function(e){if(t[e.id]){e.schema.properties||(e.schema.properties={});for(const[s,n]of Object.entries(t[e.id]||{}))e.schema.properties[s].default=n}return e}}(n||(n={}));const c=new(s(93315).Token)("@jupyterlite/settings:ISettings")}}]);
//# sourceMappingURL=3597.8725efe8e62c9aea9a34.js.map