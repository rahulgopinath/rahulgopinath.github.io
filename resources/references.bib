%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Rahul Gopinath at 2016-12-01 11:05:28 -0800 


%% Saved with string encoding Unicode (UTF-8) 



@techreport{Sackman1963,
	Abstract = {Chronicles is introduced as an experimental recording vecihle which can regenerate an original computer test run in its entirety by playing back all the recorded inputs into operational program. Although the playback notion is ancient history, the successful practical application of total system playback is recent and new for complex systems such as SAGE. Chronicles recording in SAGE emerged from an exeprimental DCA model 8 design to its present experimental status in Model 9. Current applications of Chronicles in five SAGE studies are reviewed, demonstrating its versatility and some of the problems encountered in controlled system tests and exploratory investigations. A comparison with other SAGE recording vehicles indicates that chronicles increases the usefulness of conventional recording and makes possible entirely new types of recording. Some possibilities for its extended use in SAGE are suggested for military, training, and programming applications. methodological advantages and disadvantages of the regenerative recording concept are summed up for man-machine digital operating in real time. In genera, chronicles adds the ability to remember, completely reconstruct, and rigorously manipulate past digital system events. The major disadvantages lie in possible program design problems applied to some computer systems and in uneconomical use of chronicles for certain types of tests for which it is not suited. The overall utility of regenerative recording capability appears to be sufficiently important to be considered as an essential element in real time systems as contrasted with the traditional view of recording as a secondary support function. The chronicles capability is suggested as an integral part of the original design and life cycle for man machine digital systems.},
	Author = {Sackman, H.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sackman - 1963 - Unknown - Chronicles as a Regenerative Recording,System Testing, and Analysis Concept for SAGE and Other Real-Time Digi.pdf:pdf},
	Title = {{Chronicles as a Regenerative Recording,System Testing, and Analysis Concept for SAGE and Other Real-Time Digital Systems}},
	Year = {1963}}

@article{EdwardAYoungs1974,
	Author = {{Edward A Youngs}},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Edward A Youngs - 1974 - International Journal of Man-Machine Studies - Human Errors in Programming.pdf:pdf},
	Journal = {Int. J. Man. Mach. Stud.},
	Number = {3},
	Pages = {361--376},
	Title = {{Human Errors in Programming}},
	Volume = {6},
	Year = {1974}}

@article{Howden1976,
	Author = {Howden, William E},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Howden - 1976 - IEEE Transactions on Software Engineering - Reliability of the Path Analysis Testing Strategy.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Reliability of the Path Analysis Testing Strategy}},
	Year = {1976}}

@article{Budd1978,
	Author = {Budd, Timothy Alan and Lipton, Richard J},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Budd, Lipton - 1978 - Digest for the Workshop on Software Testing and Test Documentation - Proving Lisp Programs Using Test Data.pdf:pdf},
	Journal = {Dig. Work. Softw. Test. Test Doc.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {374--403},
	Title = {{Proving Lisp Programs Using Test Data}},
	Year = {1978}}

@article{Demillo1978a,
	Author = {Demillo, Richard A and Acree, A T and Budd, Timothy Alan and Lipton, Richard J and Sayward, Frederick G},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo et al. - 1978 - Unknown - Metainduction and Progam Mutation Realistic Software Validation (Mutation Analysis).pdf:pdf},
	Title = {{Metainduction and Progam Mutation: Realistic Software Validation (Mutation Analysis)}},
	Volume = {3},
	Year = {1978}}

@inproceedings{Budd1978a,
	Author = {Budd, Timothy Alan and Lipton, Richard J and Sayward, Frederick G and Demillo, Richard A},
	Booktitle = {Natl. Comput. Conf.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Budd et al. - 1978 - National Computer Conference - The design of a prototype mutation system for program testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {623--629},
	Title = {{The design of a prototype mutation system for program testing}},
	Year = {1978}}

@inproceedings{Burns1978,
	Abstract = {: A domain Strategy for computer program testing : Lee J White and Edward I Cohen The status of research on program mutation : Richard J Lipton and Fredrick G Sayward Proving Lisp Programs using Test Data : Timothy A Budd, Richard J Lipton},
	Author = {Burns, James E},
	Booktitle = {Work. Softw. Test. Test Doc.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Burns - 1978 - Workshop on Software Testing and Test Documentation - Stability of Test Data from Program Mutation.pdf:pdf},
	Title = {{Stability of Test Data from Program Mutation}},
	Year = {1978}}

@article{Demillo1978,
	Annote = {Uses Error Data from Youngs},
	Author = {Demillo, Richard A and Lipton, Richard J and Sayward, Frederick G},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo, Lipton, Sayward - 1978 - Computer - Hints on Test Data Selection Help for the practicing programmer.pdf:pdf},
	Journal = {Computer (Long. Beach. Calif).},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Hints on Test Data Selection: Help for the practicing programmer}},
	Year = {1978}}

@misc{Lipton1978,
	Author = {Lipton, Richard J and Seyward, Frederick J},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lipton, Seyward - 1978 - Unknown - The status of research on program mutation.pdf:pdf},
	Title = {{The status of research on program mutation}},
	Year = {1978}}

@techreport{Balwdin1979,
	Abstract = {A mutant of a program P is a program M which is derived from P by making same well-defined simple change In P. Some initial lnvestigations in the area of automatically detecting equlvalent mutants of a program are presented. The idea is based on the observation that compiler optimization can be considered a process of alterlng a program to an equivalent but more efficient mutant of the program. Thus, the inverse of compller optimization techniques can be seen as, in essence, equivalent mutatulon detectors.},
	Author = {Balwdin, Douglas},
	Booktitle = {DTIC},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Balwdin - 1979 - DTIC - Heuristics for Determining Equivalence of Program Mutations.pdf:pdf},
	Institution = {DTIC},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Heuristics for Determining Equivalence of Program Mutations}},
	Year = {1979}}

@article{Demillo1979a,
	Author = {Demillo, Richard A and Lipton, Richard J and Sayward, Frederick G},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo, Lipton, Sayward - 1979 - Software Testing Infotech State of the Art Report - Program mutation A new approach to program testing.pdf:pdf},
	Journal = {Softw. Test. Infotech State Art Rep.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Program mutation: A new approach to program testing}},
	Volume = {2},
	Year = {1979}}

@techreport{Demillo1980,
	Author = {Demillo, Richard A},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo - 1980 - Unknown - Mutation Analysis as a Tool for Software Quality Assurance.pdf:pdf},
	Title = {{Mutation Analysis as a Tool for Software Quality Assurance}},
	Year = {1980}}

@inproceedings{Budd,
	Abstract = {None},
	Author = {Budd, Timothy Alan and Demillo, Richard A and Lipton, Richard J and Sayward, Frederick G},
	Booktitle = {ACM SIGPLAN-SIGACT Symp. Princ. Program. Lang.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Budd et al. - 1980 - ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - Theoretical and empirical studies on using pr.pdf:pdf},
	Isbn = {0897910117},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {220--233},
	Title = {{Theoretical and empirical studies on using program mutation to test the functional correctness of programs}},
	Year = {1980}}

@phdthesis{AllenTroyAcree1980,
	Author = {{Allen Troy Acree}, Jr.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Allen Troy Acree - 1980 - Unknown - On Mutation.pdf:pdf},
	School = {Georgia Institue of Technology},
	Title = {{On Mutation}},
	Year = {1980}}

@phdthesis{Budd1980,
	Author = {Budd, Timothy Alan},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Budd - 1980 - Unknown - Mutation Analysis of Program Test Data.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	School = {Yale},
	Title = {{Mutation Analysis of Program Test Data}},
	Year = {1980}}

@article{Budd1982,
	Author = {Budd, Timothy Alan and Angluin, Dana},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Budd, Angluin - 1982 - Acta Informatica - Two Notions of Correctness and Their Relation to Testing.pdf:pdf},
	Journal = {Acta Inform.},
	Number = {1},
	Pages = {21--45},
	Title = {{Two Notions of Correctness and Their Relation to Testing}},
	Volume = {18},
	Year = {1982}}

@article{William1982,
	Author = {William, E},
	File = {:Users/rahul/Documents/Mendeley.Desktop/William - 1982 - Unknown - Weak Mutation Testing and Completeness of Test Sets.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {4},
	Pages = {78--85},
	Title = {{Weak Mutation Testing and Completeness of Test Sets}},
	Year = {1982}}

@article{StevenJ.Zeil1983,
	Author = {{Steven J. Zeil}},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Steven J. Zeil - 1983 - IEEE Transactions on Software Engineering - Testing for Perturbations of Program Statements.pdf:pdf},
	Issn = {0098-5589},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {may},
	Number = {3},
	Pages = {335--346},
	Title = {{Testing for Perturbations of Program Statements}},
	Volume = {SE-9},
	Year = {1983},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1703062},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TSE.1983.236870}}

@techreport{Demillo1983,
	Abstract = {Program Mutation is a method of assessing the quality of computer program test data. Test data is said to be adequate if a program behaves correctly on the data but incorrect programs fail. A mutation score assesses how close a given test is to being adequate. This report describes the status of research in program mutation. Topics covered include theoretical results, error classification, experimental studies, implementation strategies for a mutation analyzer, and field studies.},
	Author = {DeMillo, Richard A},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/DeMillo - 1983 - Unknown - Program Mutation An Approach to Software Testing.pdf:pdf},
	Institution = {Georgia Institute of Technology},
	Keywords = {mutation,toadd,unread},
	Mendeley-Tags = {mutation,toadd,unread},
	Title = {{Program Mutation: An Approach to Software Testing}},
	Year = {1983},
	Bdsk-Url-1 = {http://oai.dtic.mil/oai/oai?verb=getRecord%7B%5C&%7DmetadataPrefix=html%7B%5C&%7Didentifier=ADA135775}}

@techreport{Morell1984,
	Author = {Morell, Larry Joe},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Morell - 1984 - Unknown - A Theory of Error-Based Testing.pdf:pdf},
	Institution = {DTIC},
	Keywords = {mutation,toadd,unread},
	Mendeley-Tags = {mutation,toadd,unread},
	Title = {{A Theory of Error-Based Testing}},
	Year = {1984}}

@article{Hamlet,
	Author = {Hamlet, Richard G},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hamlet - 1987 - Information Processing - Probable Correctness Theory.pdf:pdf},
	Journal = {Inf. Process.},
	Title = {{Probable Correctness Theory}},
	Year = {1987}}

@article{King,
	Abstract = {Mutation analysis is a powerful technique for testing software systems. The Mothra software testing project uses mutation analysis as the basis for an integrated software testing environment. Mutation analysis requires executing many slightly differing versions of the same program to evaluate the quality of the data used to test the program. The current version of Mothra includes a complete language system that translates a program to be tested into intermediate code so that it and its mutated versions can be executed by an interpreter. In this paper, we discuss some of the unique requirements of a language system used in a mutation-based testing environment. We then describe how these requirements a ected the design and implementation of the Fortran 77 version of the Mothra system. We also describe the intermediate language used by Mothra and the features of the language system that are needed for software testing. The appendices contain a full description of the intermediate language and the mutation operators used by Mothra. The design and implementation techniques that were developed for Mothra are applicable for constructing not just software testing systems, but any type of program analysis system or language system for a special-purpose application. In particular, we discuss decisions made and techniques developed by the Mothra team that can be useful in such applications as debuggers, program measurement tools},
	Author = {King, K N and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/King, Offutt - 1987 - Unknown - A Fortran Language System for Mutation-Based Software Testing.pdf:pdf},
	Keywords = {fortran,mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {June 1987},
	Pages = {1--49},
	Title = {{A Fortran Language System for Mutation-Based Software Testing}},
	Year = {1987}}

@inproceedings{Morell1987,
	Abstract = {applicability for this approach.},
	Archiveprefix = {arXiv},
	Arxivid = {arXiv:1011.1669v3},
	Author = {Morell, Larry Joe},
	Booktitle = {Fifth Annu. Pacific Northwest Softw. Qual. Conf.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {arXiv:1011.1669v3},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Morell - 1987 - Fifth Annual Pacific Northwest Software Quality Conference - A model for code-based testing schemes.pdf:pdf},
	Isbn = {9788578110796},
	Issn = {1098-6596},
	Keywords = {icle},
	Pages = {309--325},
	Pmid = {25246403},
	Title = {{A model for code-based testing schemes}},
	Year = {1987},
	Bdsk-Url-1 = {http://dx.doi.org/10.1017/CBO9781107415324.004}}

@techreport{Mathur1988,
	Author = {Mathur, Aditya P and Krauser, Edward W},
	Institution = {Purdue University, West Lafayette, Indiana},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutant Unification for Improved Vectorization}},
	Year = {1988}}

@article{Weyuker1988,
	Author = {Weyuker, E J},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Weyuker - 1988 - Communications of the ACM - The evaluation of program-based software test data adequacy criteria.pdf:pdf},
	Journal = {Commun. ACM},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{The evaluation of program-based software test data adequacy criteria}},
	Year = {1988}}

@inproceedings{Woodward1988,
	Author = {Woodward, Martin R and Halewood, K},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Woodward, Halewood - 1988 - ISSTA - From Weak to Strong, Dead or Alive an Analysis of Some Mutationtesting Issues.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{From Weak to Strong, Dead or Alive? an Analysis of Some Mutationtesting Issues}},
	Year = {1988}}

@inproceedings{Morell1988,
	Author = {Morell, Larry Joe},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Morell - 1988 - ISSTA - Theoretical Insights Into Fault-Based Testing.pdf:pdf},
	Isbn = {0-8186-0868-4},
	Keywords = {mutation,read},
	Mendeley-Tags = {mutation,read},
	Pages = {45062},
	Publisher = {IEEE Comput. Soc. Press},
	Title = {{Theoretical Insights Into Fault-Based Testing}},
	Year = {1988},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5353},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/WST.1988.5353}}

@inproceedings{Wu1988,
	Author = {Wu, D and Hennell, M A and Hedley, D and Riddell, I J},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wu et al. - 1988 - ISSTA - A Practical Method for Software Quality Control via Program Mutation.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A Practical Method for Software Quality Control via Program Mutation}},
	Year = {1988}}

@inproceedings{Demillo1989,
	Author = {Demillo, Richard A},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo - 1989 - ICSE - Test Adequacy and Program Mutation.pdf:pdf},
	Keywords = {cited:jia2010,imp},
	Mendeley-Tags = {cited:jia2010,imp},
	Pages = {355--356},
	Title = {{Test Adequacy and Program Mutation}},
	Year = {1989}}

@misc{Marick1989,
	Author = {Marick, Brian},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Marick - 1989 - Unknown - Experience with the cost of different coverage goals for testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {217},
	Title = {{Experience with the cost of different coverage goals for testing}},
	Year = {1989}}

@article{Offutt1989,
	Annote = {Morell says that it is not clear what simple faults and complex faults are.},
	Author = {Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt - 1989 - Unknown - The Coupling Effect Fact or Fiction.pdf:pdf},
	Isbn = {0897913426},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {131--140},
	Title = {{The Coupling Effect : Fact or Fiction?}},
	Year = {1989}}

@inproceedings{Agrawal,
	Abstract = {Mutation Analysis is a method of reliable testing of large software systems. It provides a method for assessing the adequacy of test data. Mothra is a mutation analysis based software testing environment that currently supports testing of Fortran 77 origrans. Work is underway to enhance this tool along several dimensions. One of these is the addition of multilingual capacity. C is one of the programs we plan to support. This report describes the mutant operators designed for the proposed ANSI C Programming language. Mutant operators are categorized using syntactic criteria. Such classification is expected to be useful for an implementor of a mutation based testing system. Another classification useful for the tester, is based on the nature of tests that can be conducted using mutation analysis. This classicifation exposes the generality and completeness of mutation based testing. Each mutation operator is introduced with illustrative examples. The rationale for supporting each is also provided. An appendix provides a cross-reference of all mutant operators for ease of referencing. The design described here is the result of long deliberations amongst the authors of this report in which several aspects of the C language and program development in C were examined. We intend this report to serve as a manual for the C mutant operators for researchers in Software Testing.},
	Annote = {{\#} Goals 
- Should be single step
- Syntactically correct
- Design and classification such that they can be selectively applied.
Classification: SOVC
- Statement Mu
- Operator Mu
- Variable Mu
- Constant Mu
{\#} Models errors in
- Selection of identifiers and constants
- Composition of expressions
- Composition of iterative or conditionals},
	Author = {Agrawal, Hiralal and Demillo, Richard A and Hathaway, Bob and Hsu, Willian and Krauser, Edward W and Martin, R J and Mathur, Aditya P and Spafford, Eugene H},
	Booktitle = {Tech. Rep. SERC-TR-41-P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Agrawal et al. - 1989 - Technical Report SERC-TR-41-P - Design of Mutant Operators for the C Programming Language.pdf:pdf},
	Keywords = {muation,mutation,review:emp,type:non-emp,unread},
	Mendeley-Tags = {mutation,unread},
	Publisher = {Software Engineering Research Center, Purdue University},
	Title = {{Design of Mutant Operators for the C Programming Language}},
	Volume = {8},
	Year = {1989}}

@article{Duncan1990,
	Author = {Duncan, I.M.M. and Robinson, D.J.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Duncan, Robinson - 1990 - Unknown - Ordered Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Ordered Mutation Testing}},
	Year = {1990}}

@article{Morell1990,
	Author = {Morell, Larry Joe},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Morell - 1990 - IEEE Transactions on Software Engineering - A Theory of Fault-Based Testing.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,read},
	Mendeley-Tags = {mutation,read},
	Number = {9036264},
	Pages = {844--857},
	Title = {{A Theory of Fault-Based Testing}},
	Volume = {I},
	Year = {1990}}

@article{Sahinoglu1990,
	Author = {Sahinoglu, M and Spafford, Eugene H},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A Bayes Sequential Statistical Procedure for Approving Software Products}},
	Year = {1990}}

@inproceedings{Woodward1990,
	Author = {Woodward, Martin R},
	Booktitle = {IEE Colloquim Softw. Test. Crit. Syst.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Woodward - 1990 - IEE Colloquim on Software Testing for Critical Systems - Mutation Testing-An Evolving Technique.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Testing-An Evolving Technique}},
	Year = {1990}}

@techreport{Horgan1990,
	Author = {Horgan, Joseph Robert and Mathur, Aditya P},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Weak Mutation is Probably Strong Mutation}},
	Year = {1990}}

@inproceedings{Marick1991,
	Author = {Marick, Brian},
	Booktitle = {Testing, Anal. Verif.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Marick - 1991 - Testing, analysis, and verification - The Weak Mutation Hypothesis.pdf:pdf},
	Keywords = {TAV4,mutation,unread},
	Mendeley-Tags = {TAV4,mutation,unread},
	Title = {{The Weak Mutation Hypothesis}},
	Year = {1991}}

@misc{Mathur1991a,
	Author = {Mathur, Aditya P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mathur - 1991 - Unknown - On the relative strengths of data flow and mutation based test adequacy criteria.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{On the relative strengths of data flow and mutation based test adequacy criteria}},
	Year = {1991}}

@article{Thevenod-Fosse1991,
	Author = {Thevenod-Fosse, Pascale and Waeselynck, H and Crouzet, Y},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Thevenod-Fosse, Waeselynck, Crouzet - 1991 - {\ldots} , 1991. FTCS-21. Digest {\ldots} - An experimental study on software structural testing dete.pdf:pdf},
	Journal = {{\ldots} , 1991. FTCS-21. Dig. {\ldots}},
	Title = {{An experimental study on software structural testing: deterministic versus random input generation}},
	Year = {1991},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=146694}}

@article{Offutt1991,
	Abstract = {Mutation unit level testing testing is a fault-based of software. technique for Weak mutation was proposed as a way to reduce the expense of mutation testing. Unfortunately, weak muta- tion is also expected to provide a weaker test of the software than mutation testing. This paper presents results from an implementation of weak mutation, where we compared the effectiveness versus the efficiency of weak mutation. Addition- ally, we examined several options in an attempt to find the most appropriate weak mutation. Our results way to implement indicate that weak mutation can be applied in a manner that is al- most as effective as mutation testing, and with significant computational savings.},
	Author = {Offutt, A Jefferson and Lee, Stephen D},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Lee - 1991 - Unknown - How Strong is Weak Mutation.pdf:pdf},
	Isbn = {089791449X},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {200--213},
	Title = {{How Strong is Weak Mutation?}},
	Year = {1991}}

@article{Krauser1991,
	Author = {Krauser, EW and Mathur, Aditya P and Rego, VJ},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Krauser, Mathur, Rego - 1991 - Software Engineering, IEEE Transactions on - High performance software testing on SIMD machines.pdf:pdf},
	Journal = {Softw. Eng. IEEE Trans.},
	Number = {5},
	Title = {{High performance software testing on SIMD machines}},
	Volume = {17},
	Year = {1991},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=90444}}

@article{Mathur1991,
	Annote = {One pager that first proposes the idea of constrained mutation. Just mentions that they are experimenting with constrained mutation},
	Author = {Mathur, Aditya P},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mathur - 1991 - Computer Software and Applications Conference, {\ldots} - Performance, effectiveness, and reliability issues in software test.pdf:pdf},
	Journal = {Comput. Softw. Appl. Conf. {\ldots}},
	Keywords = {constrained mutation,mutation,reviewed},
	Mendeley-Tags = {mutation,reviewed},
	Pages = {0--1},
	Title = {{Performance, effectiveness, and reliability issues in software testing}},
	Year = {1991},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=170248}}

@techreport{Demillo1991,
	Author = {Demillo, Richard A and Mathur, Aditya P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo, Mathur - 1991 - Unknown - On the Use of Software Artifacts to Evaluate the Effectiveness of Mutation Analysis for Detecting Err.pdf:pdf},
	Institution = {Purdue University},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{On the Use of Software Artifacts to Evaluate the Effectiveness of Mutation Analysis for Detecting Errors in Production Software}},
	Url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:On+the+Use+of+Software+Artifacts+to+Evaluate+the+Effectiveness+of+Mutation+Analysis+for+Detecting+Errors+in+Production+Software{\#}0 http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:On+the+use+of+software+artifacts+to+evaluate+the+effectiveness+of+mutation+analysis+for+detecting+errors+in+production+software{\#}0},
	Year = {1991}}

@incollection{Morell1992,
	Author = {Morell, Larry Joe and Deimel, Lionel E},
	Booktitle = {SEI Curric. Modul. SEI-CMM-9-2.0},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Morell, Deimel - 1992 - SEI Curriculum Module SEI-CMM-9-2.0 - Unit Analysis and Testing.pdf:pdf},
	Number = {June},
	Title = {{Unit Analysis and Testing}},
	Year = {1992}}

@article{DIKorchemyni1992,
	Author = {{DI Korchemyni}},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Application of Mutation Analysis to Evaluation of Program-testing Quality}},
	Year = {1992}}

@article{Voas1992,
	Author = {Voas, Jeffrey M and Miller, Keith W},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Voas, Miller - 1992 - Unknown - The Revealing Power of a Test Case.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {1--19},
	Title = {{The Revealing Power of a Test Case}},
	Year = {1992}}

@article{Offutt1996d,
	Abstract = {Fault based testing strategies test soft ware by focusing on specifc common types of faults. The coupling effect hypothesizes that test data sets that detect simple types of faults are sensitive enough to detect more complex types of faults. This paper describes empirical inestigations into the coupling effect over a specific class of soft ware faults. All of the results from this investigation support the validity of the coupling effect. The major conclusion from this in estigation is the fact that by explicitly testing for simple faults, we are also implicitly testing for more complicated faults, giving us confidence that fault based testing is an effective way to test software.},
	Author = {Offutt, A Jefferson},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt - 1992 - ACM Transactions on Software Engineering and Methodology - Investigations of the software testing coupling effect.pdf:pdf},
	Journal = {ACM Trans. Softw. Eng. Methodol.},
	Keywords = {coupling-effect,mutation,unread},
	Mendeley-Tags = {coupling-effect,mutation,unread},
	Pages = {1--21},
	Title = {{Investigations of the software testing coupling effect}},
	Year = {1992},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=125473}}

@inproceedings{Woodward1992,
	Author = {Woodward, Martin R},
	Booktitle = {IEE Colloquim Autom. Form. Methods Comput. Assist. Prototying},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{OBJTEST: an experimental testing tool for algebraic specifications}},
	Year = {1992}}

@article{Voas1992b,
	Author = {Voas, Jeffrey M. and Miller, Keith W.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Voas, Miller - 1992 - Software Reliability Engineering,1992. Third International Symposium on. IEEE - Improving the software development.pdf:pdf},
	Journal = {Softw. Reliab. Eng. Third Int. Symp. on. IEEE},
	Pages = {114--121},
	Title = {{Improving the software development process using testability research}},
	Year = {1992},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=285852}}

@article{Voas1992a,
	Author = {Voas, Jeffrey M},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Voas - 1992 - Software Engineering, IEEE Transactions on - PIE A dynamic failure-based technique.pdf:pdf},
	Journal = {Softw. Eng. IEEE Trans.},
	Pages = {1--21},
	Title = {{PIE: A dynamic failure-based technique}},
	Year = {1992},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=153381}}

@article{Offutt1992,
	Abstract = {Mutation testing is a fault-based method for testing software that is computationally expensive. Mothra is an interpreter-based mutation testing sys- tem that is centered around an interpreter. This paper presents a parallel implementation of Mothra's interpreter on a MIMD machine. The parallel interpreter, HyperMothra, is implemented on a sixteen processor Intel iPSC 2 hypercube. Our goal was to demonstrate that the expense of software testing schemes such as mutation can be reduced by using parallel pro- cessing, and we demonstrate this by measuring the performance gains of the parallel interpreter over the Mothra interpreter. Results are presented using ten test programs, three di erent static work distribution schemes, and various numbers of processors. On our test programs, we found that our parallel interpreter achieved almost linear speedup over Mothra's sequen- tial interpreter. With larger, faster high-performance computers available, mutation testing can be done at significantly less expense},
	Author = {Offutt, A Jefferson and Pargas, Roy P and Fichter, Scott V and Khambekar, Prashant K},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt et al. - 1992 - ICPP - Mutation Testing of Software Using a MIMD Computer.pdf:pdf},
	Journal = {ICPP},
	Keywords = {dosmarter,mutation,unread},
	Mendeley-Tags = {dosmarter,mutation,unread},
	Title = {{Mutation Testing of Software Using a MIMD Computer}},
	Year = {1992}}

@inproceedings{Untch1992,
	Author = {Untch, Roland H},
	Booktitle = {ACM-SE 30 Proc. 30th Annu. Southeast Reg. Conf.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Untch - 1992 - ACM-SE 30 Proceedings of the 30th annual Southeast regional conference - Mutation-based software testing using program sc.pdf:pdf},
	Isbn = {0897915062},
	Pages = {285--291},
	Title = {{Mutation-based software testing using program schemata}},
	Year = {1992},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=503749}}

@inproceedings{Weiss1993,
	Author = {Weiss, Stewart N and Fleyshgakker, Vladimir N},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Weiss, Fleyshgakker - 1993 - ISSTA - Improved Serial Algorithms.pdf:pdf},
	Isbn = {0897916085},
	Title = {{Improved Serial Algorithms}},
	Year = {1993}}

@article{Woodward1993,
	Author = {Woodward, Martin R},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Woodward - 1993 - Journal of Software Engineering - Errors in Algebraic Specifications and an Experimental Mutation Testing Tool.pdf:pdf},
	Journal = {J. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Errors in Algebraic Specifications and an Experimental Mutation Testing Tool}},
	Year = {1993}}

@inproceedings{Carver1993,
	Author = {Carver, R},
	Booktitle = {ITC},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Carver - 1993 - ITC - Mutation-Based Testing of Concurrent Programs.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation-Based Testing of Concurrent Programs}},
	Year = {1993}}

@article{Woodward1993a,
	Author = {Woodward, Martin R},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Woodward - 1993 - Unknown - Mutation Testng - Its Origin and Evolution.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Woodward - 1993 - Unknown - Mutation Testng - Its Origin and Evolution(2).pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Testng - Its Origin and Evolution}},
	Year = {1993}}

@article{Woodward1993b,
	Author = {Woodward, Martin R},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Woodward - 1993 - Information and Software Technology - Mutation testing - its origin and evolution.pdf:pdf},
	Journal = {Inf. Softw. Technol.},
	Title = {{Mutation testing - its origin and evolution}},
	Year = {1993}}

@article{Frankl1993,
	Author = {Frankl, Phyllis G},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Frankl - 1993 - IEEE Transactions on Software Engineering - Provable Improvements on Branch Testing.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Provable Improvements on Branch Testing}},
	Year = {1993}}

@article{Frankl1993a,
	Author = {Frankl, Phyllis G and Weiss, Stewart N},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Frankl, Weiss - 1993 - IEEE Transactions on Software Engineering - An experimental comparison of the effectiveness of branch testing and.pdf:pdf},
	Issn = {00985589},
	Journal = {IEEE Trans. Softw. Eng.},
	Number = {8},
	Pages = {774--787},
	Title = {{An experimental comparison of the effectiveness of branch testing and data flow testing}},
	Volume = {19},
	Year = {1993},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=238581},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/32.238581}}

@article{Wong1993,
	Author = {Wong, Weichen Eric},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wong - 1993 - Unknown - On Mutation and Data Flow.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {December},
	Title = {{On Mutation and Data Flow}},
	Year = {1993}}

@phdthesis{Ishbel1993,
	Author = {Ishbel, M M},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ishbel - 1993 - Unknown - Strong mutation testing strategies.pdf:pdf},
	Title = {{Strong mutation testing strategies}},
	Year = {1993}}

@article{Untch1993,
	Abstract = {Mutation analysis is a powerful technique for assessing and improving the quality of test data used to unit test software. Unfortunately, current automated mutation analysis systems su er from severe performance problems. This paper presents a new method for performing mutation analysis that uses program schemata to encode all mutants for a program into one metaprogram, which is subsequently compiled and run at speeds substantially higher than achieved by previous interpretive sys- tems. Preliminary performance improvements of over 300{\%} are reported. This method has the additional advantages of being easier to implement than interpretive systems, being simpler to port across a wide range of hardware and software platforms, and using the same compiler and run-time support system that is used during development and or deployment.},
	Author = {Untch, Roland H and Offutt, A Jefferson and Harrold, Mary Jean},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Untch, Offutt, Harrold - 1993 - ACM SIGSOFT Software Engineering Notes - Mutation analysis using mutant schemata.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Untch, Offutt, Harrold - 1993 - ACM SIGSOFT Software Engineering Notes - Mutation analysis using mutant schemata.pdf:pdf},
	Isbn = {0897916085},
	Journal = {ACM SIGSOFT Softw. Eng. Notes},
	Keywords = {fault-based testing,mutation,mutation anal-,mutation analysis,program schemata,software testing,unread,ysis},
	Mendeley-Tags = {mutation,unread},
	Pages = {139--148},
	Title = {{Mutation analysis using mutant schemata}},
	Year = {1993},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=154265}}

@article{Offutt1993,
	Abstract = {Mutation Testing is a technique for unit testing software that although powerful, is computationally expensive. The principal expense of mutation is that many variants of the test program, called mutants, must be repeatedly executed. Selective mutation is a way to approximate mutation testing that saves execution by reducing the number of mutants that must be executed. This paper reports experimental results that compare selective mutation testing to standard or non selective mutation testing. The results support the hypothesis that selective mutation is almost as strong as non selective mutation; in experimental trials selective mutation provides almost the same coverage as non selective mutation with significant reductions in cost.},
	Annote = {60{\%} reduction with less than 1{\%} reduction in accuracy.},
	Author = {Offutt, A Jefferson and Rothermel, Gregg and Zapf, Christian},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Rothermel, Zapf - 1993 - ICSE - An experimental evaluation of selective mutation.pdf:pdf},
	Journal = {ICSE},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {100--107},
	Title = {{An experimental evaluation of selective mutation}},
	Year = {1993}}

@article{Offutt1994a,
	Author = {Offutt, A Jefferson and Tewary, Kanupriya},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Tewary - 1994 - Unknown - Experiments with Data Flow and Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--13},
	Title = {{Experiments with Data Flow and Mutation Testing}},
	Year = {1994}}

@article{Wong1994,
	Author = {Wong, Weichen Eric and Horgan, Joseph Robert and London, Saul and Mathur, Aditya P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wong et al. - 1994 - Unknown - Effect of Test Set Size and Block Coverage on the Fault Detection Effectiveness.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Effect of Test Set Size and Block Coverage on the Fault Detection Effectiveness}},
	Year = {1994}}

@inproceedings{Mathur:1994:TCM:197530.197554,
	Address = {New York, NY, USA},
	Author = {Mathur, Aditya P and Wong, Weichen Eric},
	Booktitle = {Proc. 22Nd Annu. ACM Comput. Sci. Conf. Scaling Up Meet. Chall. Complex. Real-world Comput. Appl. Meet. Chall. Complex. Real-world Comput. Appl.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Isbn = {0-89791-634-4},
	Pages = {38--45},
	Publisher = {ACM},
	Series = {CSC '94},
	Title = {{A Theoretical Comparison Between Mutation and Data Flow Based Test Adequacy Criteria}},
	Year = {1994},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/197530.197554},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/197530.197554}}

@article{PintoFerrazFabbriSCDelamaro1994,
	Author = {{Pinto Ferraz Fabbri}, SC and Delamaro, Marcio Eduardo and Maldonado, Jose Carlos and Masiero, Paulo Cesar},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Pinto Ferraz Fabbri et al. - 1994 - Unknown - Mutation Analysis Testing for Finite State Machines.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Analysis Testing for Finite State Machines}},
	Year = {1994}}

@techreport{Cline1994,
	Author = {Cline, Melissa S. and Werner, Linda L.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Cline, Werner - 1994 - Unknown - An empirical study of the branch coverage of different classes.pdf:pdf},
	Institution = {University of Californi, Santa Cruz},
	Title = {{An empirical study of the branch coverage of different classes}},
	Year = {1994}}

@article{Offutt1994,
	Author = {Offutt, A Jefferson and Lee, Stephen D},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Weak vs. Strong: An Empirical Comparison of Mutation Variants}},
	Year = {1994}}

@inproceedings{Wong1994a,
	Annote = {Evaluates six constrained mutation mechanisms for C.},
	Author = {Wong, Weichen Eric and Maldonado, Jose Carlos and Delamaro, Marcio Eduardo and Mathur, Aditya P},
	Booktitle = {Brazilian Symp. Softw. Eng.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wong et al. - 1994 - Brazilian Symposium of Software Engineering - Constrained Mutation in C programs.pdf:pdf},
	Keywords = {a,conatrainfd mutalion,fault dete,mutation,tion effectivenen,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {439--452},
	Title = {{Constrained Mutation in C programs}},
	Year = {1994}}

@incollection{Wong1994b,
	Abstract = {Although mutation has been empirically found to be effective in detecting faults, it often imposes unacceptable demands on computing and human resources because of the large number of mutants that need to be compiled and executed on one or more test cases. We designed a case study to explore two alternatives of mutation to reduce its cost without significantly deteriorating its strength and effectiveness. The alternatives are (1) constrained abs/ror mutation which examines only the abs and ror mutants and ignores the others, and (2) randomly selected 10{\%} mutation which examines only 10{\%} of the randomly selected mutants of each mutation operator in Mothra. Data collected during experimentation have shown that both alternatives provide a significant cost reduction in terms of the number of test cases required to satisfy an adequacy criterion and the number of mutants to be examined. Such gain is accompanied by a small strength loss in the ability to distinguish non-equivalent mutants and cover feasible all-uses. In terms of decreasing order of fault detection effectiveness the ranking is mutation, constrained abs/ror mutation, all-uses, and randomly selected 10{\%} mutation. These data suggest that examining only a small percentage of the mutants may be a useful heuristic for evaluating and constructing test sets in practice.},
	Author = {Wong, Weichen Eric and Mathur, Aditya P and Maldonado, Jose Carlos},
	Booktitle = {Softw. Qual. Product. Theory, Pract. Train.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Versus All-uses: An Empirical Evaluation of Cost, Strength and Effectiveness}},
	Year = {1994}}

@inproceedings{Fleyshgakker1994a,
	Author = {Fleyshgakker, Vladimir N and Weiss, Stewart N},
	Booktitle = {Proc. 1994 ACM SIGSOFT Int. Symp. Softw. Test. Anal.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Fleyshgakker, Weiss - 1994 - Proceedings of the 1994 ACM SIGSOFT international symposium on Software testing and analysis - Efficient mu.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {185--195},
	Title = {{Efficient mutation analysis: A new approach}},
	Year = {1994},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=187179}}

@article{Mathur1994,
	Author = {Mathur, Aditya P and Wong, Weichen Eric},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{An Empirical Comparison of Mutation and Data Flow Based Test Adequacy Criteria}},
	Year = {1994}}

@article{Hutchins1994,
	Author = {Hutchins, Monica and Foster, Herb and Goradia, Tarak and Ostrand, Thomas},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hutchins et al. - 1994 - Unknown - Experiments on the Effectiveness of Criteria and Controlflow-Based Test Adequacy.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {191--200},
	Title = {{Experiments on the Effectiveness of Criteria and Controlflow-Based Test Adequacy}},
	Year = {1994}}

@article{Offutt1996,
	Abstract = {Mutation testing is a fault-based technique for unit level software testing. Weak mutation was proposed as a way to reduce the expense of mutation testing. Unfortunately, weak mutation is also expected to provide a weaker test of the software than mutation testing does. This paper presents results from an implementation of weak mutation, which we used to evaluate the effectiveness versus the e ciency of weak mutation. Additionally, we examined several options in an attempt to find the most appropriate way to implement weak mutation. Our results indicate that weak mutation can be applied in a manner that is almost as effective as mutation testing, and with significant computational savings.},
	Author = {Offutt, A Jefferson and Lee, Stephen D},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Lee - 1994 - Unknown - An Empirical Evaluation of Weak Mutation.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--20},
	Title = {{An Empirical Evaluation of Weak Mutation}},
	Year = {1994}}

@article{Demillo1994,
	Author = {Demillo, Richard A and Mathur, Aditya P},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A Two Dimensional Scheme To Evaluate The Adequacy Of Fault Tolerance Testing}},
	Year = {1994}}

@techreport{Offutt1994b,
	Abstract = {Equivalencer},
	Author = {Offutt, A Jefferson and Pan, Jie},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Pan - 1994 - Unknown - Using constraints to detect equivalant mutants.pdf:pdf},
	Pages = {1--55},
	Title = {{Using constraints to detect equivalant mutants}},
	Year = {1994}}

@article{Agrawal1994,
	Author = {Agrawal, Hiralal},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Agrawal - 1994 - POPL - Dominators , Super Blocks , and Program Coverage.pdf:pdf},
	Journal = {POPL},
	Keywords = {mutation,reviewed,unread},
	Mendeley-Tags = {mutation,reviewed,unread},
	Pages = {1--10},
	Title = {{Dominators , Super Blocks , and Program Coverage}},
	Year = {1994}}

@article{Hamlet1994,
	Author = {Hamlet, Dick},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hamlet - 1994 - Proceedings of 1994 IEEE International Symposium on Software Reliability Engineering - Connecting test coverage to softw.pdf:pdf},
	Isbn = {0-8186-6665-X},
	Journal = {Proc. 1994 IEEE Int. Symp. Softw. Reliab. Eng.},
	Pages = {158--165},
	Title = {{Connecting test coverage to software dependability}},
	Year = {1994},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=341368},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ISSRE.1994.341368}}

@article{Wah1995,
	Author = {Wah, K S How Tai},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wah - 1995 - Unknown - Fault Coupling in Finite Bijective Functions.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Fault Coupling in Finite Bijective Functions}},
	Year = {1995}}

@article{Wong1995,
	Author = {Wong, Weichen Eric and Mathur, Aditya P},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Fault Detection Effectiveness of Mutation and Data Flow Testing}},
	Year = {1995}}

@article{DeMillo1995,
	Author = {DeMillo, Richard A and Mathur, Aditya P and Wong, Weichen Eric and Frankl, Phyllis G and Weyuker, E J},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Some Critical Remarks on a Hierarchy of Fault-Detecting Abilities of Test Methods}},
	Year = {1995}}

@article{Wong1995a,
	Author = {Wong, Weichen Eric and Horgan, Joseph Robert},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wong, Horgan - 1995 - ICSE - Effect of test set minimization on fault detection effectiveness.pdf:pdf},
	Journal = {ICSE},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Effect of test set minimization on fault detection effectiveness}},
	Year = {1995},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=5071090}}

@inproceedings{Offutt1995,
	Abstract = {Program faults are artifacts that are widely studied? but there are man y aspects of faults that w e still do not understand? In addition to the simple fact that one importan t goal during testing is to cause failures? and thereb y detect faults? a full understanding of the c haracteristics of faults is crucial to sev eral researc h areas in testing? These include fault?based testing? testabilit ?m y utation testing? and the comparativ eev aluation of testing strategies? In this w orkshop paper? w e explore the fundamen tal nature of faults b y looking at the di?erences bet een a syn w tactic and seman tic c haracterization of faults? W e o?er de?nitions of these c haracteristics and explore the di?eren tiation? Speci?cally ? w e discuss the concept of ?size? of program faults ? the measuremen t of size pro vides in teresting and useful distinctions bet een the syn w tactic and seman tic c haracterization of faults? W e use the fault size observ ations to mak e sev eral predictions about testing and presen t preliminary data that supports this model? W e also use the model to o?er explanations about sev eral questions that ha ein v trigued testing researc hers?},
	Annote = {From Duplicate 2 (A semantic model of program faults - Offutt, A Jefferson; Hayes, J Huffman)

Defines what a simple fault (1-token) is},
	Author = {Offutt, A Jefferson and Hayes, J Huffman},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Hayes - 1995 - ISSTA - A Semantic Model of Program Faults.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Offutt, Hayes - 1995 - ISSTA - A Semantic Model of Program Faults.pdf:pdf},
	Issn = {01635948},
	Keywords = {fault seeding,faults and failures,mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {may},
	Number = {3},
	Pages = {1--12},
	Title = {{A Semantic Model of Program Faults}},
	Volume = {21},
	Year = {1995},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=226295.226317},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/226295.226317}}

@article{Wong1995b,
	Author = {Wong, Weichen Eric and Mathur, Aditya P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wong, Mathur - 1995 - Unknown - Reducing the Cost of Mutation Testing An Empirical Study.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {94},
	Pages = {185--196},
	Title = {{Reducing the Cost of Mutation Testing: An Empirical Study}},
	Volume = {1212},
	Year = {1995}}

@inproceedings{Offutt,
	Abstract = {This paper addresses the problem of reducing the size of test sets for regression testing and test output inspection? Since regression testing requires the execution of some? and in the w orst case? all test cases? reducing the n um ber of tests can ha e a large bene?t? Additionally v ? testers generally ha e v to examine the output of eac h test case? both during initial and regression testing? Since this is done b y hand? reducing the n um ber of outputs that need to be examined can reduce the cost of testing? W e observ e that for m utation?based test sets? the order in whic h the test cases are executed impacts the size of the test sets? This paper presen ts sev eral strategies for selecting a smaller n um ber of test cases b y reordering the test tests? W e illustrate our tec hnique using a proof?of?concept empirically study using m utation testing? ac hieving appro ximately a ??? reduction in size? and a corresponding reduction in the cost of regression testing? with a cost of only one extra run of the test case set? W e suggest that these results should be extendable to apply to an y test strategy that includes a quan ti?able measure of test case e?ectiv eness? suc h as data ?o w testing and branc h testing? and try it with statemen tco erage with v positiv e results? Twelfth},
	Author = {Offutt, A Jefferson and Pan, Jie and Voas, Jeffrey M},
	Booktitle = {Int. Conf. Test. Comput. Softw.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Pan, Voas - 1995 - International Conference on Testing Computer Software - Procedures for Reducing the Size of Coverage-based Te.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--11},
	Title = {{Procedures for Reducing the Size of Coverage-based Test Sets}},
	Year = {1995}}

@article{Offutta,
	Abstract = {Mutation testing is a technique for unit testing software that, although powerful, is computationally expensive. Recent engineering advances have given us techniques and algorithms for signi cantly reducing the cost of mutation testing. These techniques include a new algorithmic execution technique called schema-based mutation, an approximation technique called weak mutation, a reduction technique called selective mutation, and algorithms for automatic test data generation. This paper outlines a design for a system that will approximate mutation, but in a way that will be accessible to everyday programmers. We envision a system to which a programmer can submit a program unit, and get back a set of input output pairs that are guaranteed to form an e ective test of the unit by being close to mutation adequate.},
	Author = {Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt - 1995 - ICTCS - A Practical System for Mutation Testing Help for the Common Programmer.pdf:pdf},
	Journal = {ICTCS},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A Practical System for Mutation Testing : Help for the Common Programmer}},
	Year = {1995}}

@phdthesis{Untch1995,
	Author = {Untch, Roland H},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Untch - 1995 - Unknown - Schema-Based Mutation Analysis A New Test Data Adequacy Assessment Method.pdf:pdf},
	Keywords = {dosmarter,mutation},
	Mendeley-Tags = {dosmarter,mutation},
	Number = {December},
	Title = {{Schema-Based Mutation Analysis: A New Test Data Adequacy Assessment Method}},
	Year = {1995}}

@article{Keyser1988,
	Author = {Offutt, A Jefferson and Lee, Ammei and Rothermel, Gregg and Untch, Roland H and Zapf, Christian},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt et al. - 1996 - ACM Transactions on Software Engineering and Methodology - An experimental determination of sufficient mutation o.pdf:pdf},
	Journal = {ACM Trans. Softw. Eng. Methodol.},
	Number = {2},
	Pages = {99--118},
	Title = {{An experimental determination of sufficient mutation operators}},
	Volume = {5},
	Year = {1996}}

@article{Offutt1996e,
	Annote = {
        From Duplicate 1 ( 
        

        

        

        

        

        
          

          

          

        
        

        
          

        
        
          Detecting Equivalent Mutants and the Feasible Path Problem
        
        
          

        
        

        
          

          

          

        
        

        

        

        

        

         - Offutt, A Jefferson; Pan, Jie )

          

          

          

        
        

        

        

        

        

        

        

        

        

        

        

        

        

        

        

      },
	Author = {Offutt, A Jefferson and Pan, Jie},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Pan - 1996 - {\ldots} Safety. Process Security. Proceedings of the {\ldots} - Detecting Equivalent Mutants and the Feasible Path Problem.pdf:pdf},
	Isbn = {078033390X},
	Journal = {{\ldots} Safety. Process Secur. Proc. {\ldots}},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Detecting Equivalent Mutants and the Feasible Path Problem}},
	Year = {1996},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=507890}}

@article{Offutt1996c,
	Abstract = {Mutation analysis is a software testing technique that requires the tester to generate test data that will nd specific, well defined errors. Mutation testing executes many slightly di ering versions, called mutants, of the same program to evaluate the quality of the data used to test the program. Although these mutants are generated and executed e ciently by automated methods, many of the mutants are functionally equivalent to the original program and are not useful for testing. Recognizing and eliminating equivalent mutants is currently done by hand, a time-consuming and arduous task. This problem is currently a major obstacle to the practical application of mutation testing. This paper presents extensions to previous work in detecting equivalent mutants; specifically, algorithms for determining several classes of equivalent mutants are presented, discuss an implementation of these algorithms, and present results from using this implementation. These algorithms are based on data ow analysis and six compiler optimization techniques. Each of these techniques is described and how they are used to detect equivalent mutants. The design of the tool and some experimental results using it are also presented.},
	Author = {Offutt, A Jefferson and Craft, W Michael},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Craft - 1996 - Journal of Software Testing, Verification and Reliability - Using Compiler Optimization Techniques to Detect Equi.pdf:pdf},
	Journal = {J. Softw. Testing, Verif. Reliab.},
	Keywords = {compiler optimizations,experimental software engineering,mutation,mutation testing,software testing,testing,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {3},
	Pages = {1--26},
	Title = {{Using Compiler Optimization Techniques to Detect Equivalent Mutants}},
	Volume = {4},
	Year = {1996}}

@article{Zhu1996,
	Author = {Zhu, Hong},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhu - 1996 - IEEE Transactions on Software Engineering - A formal Analysis of the Subsume etween Software Test Adequacy.pdf:pdf},
	Isbn = {0098558919},
	Journal = {IEEE Trans. Softw. Eng.},
	Number = {4},
	Pages = {248--255},
	Title = {{A formal Analysis of the Subsume etween Software Test Adequacy}},
	Volume = {22},
	Year = {1996}}

@article{kaner1996software,
	Author = {Kaner, C},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kaner - 1996 - Proceedings of STAR - Software negligence and testing coverage.pdf:pdf},
	Journal = {Proc. STAR},
	Keywords = {Uploaded:Rahul,mutation,unread},
	Mendeley-Tags = {Uploaded:Rahul,mutation,unread},
	Pages = {313},
	Title = {{Software negligence and testing coverage}},
	Volume = {96},
	Year = {1996}}

@article{Offutt1996a,
	Abstract = {Mutation analysis is a method for testing software. It provides a method for assessing the adequacy of test data. This report describes the mutation operators de ned for the Ada programming language. The mutation operators are categorized using syntactic criteria, in a form suitable for an implementor of a mutation-based system, or a tester wishing to understand how mutation analysis can be used to test Ada programs. Each mutation operator is carefully de ned, and when appropriate, implementation notes and suggestions are provided. We include operators for all syntactic elements of Ada, including exception handling, generics, and tasking. A summary table listing all operators for Ada, and compared with C and Fortran operators is also provided. The design described here is the result of deliberations among the authors in which all aspects of the Ada language and software development in Ada were considered. These operators can also be viewed as the culmination of previous mutation operator de nitions for other languages. This report is intended to serve as a manual for the Ada mutation operators.},
	Author = {Offutt, A Jefferson and Voas, Jeffrey M and Payne, Jeff},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Voas, Payne - 1996 - Unknown - Mutation Operators for Ada.pdf:pdf},
	Keywords = {mutation,type:non-emp,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--37},
	Title = {{Mutation Operators for Ada}},
	Year = {1996}}

@article{Bergadano1996,
	Author = {Bergadano, Francesco and Gunetti, Daniele},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bergadano, Gunetti - 1996 - Unknown - Testing by Means of Inductive Learning.pdf:pdf},
	Keywords = {and phrases,mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Testing by Means of Inductive Learning}},
	Volume = {5},
	Year = {1996}}

@techreport{Voas1996,
	Author = {Offutt, A Jefferson and Voas, Jeffrey M},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Voas - 1996 - Unknown - Subsumption of condition coverage techniques by mutation testing.pdf:pdf},
	Keywords = {a family of testing,and that each branch,branch testing,condition coverage,condition coverage testing is,include a variety of,including,is executed,mutation testing,mutation testing is,of con-,on the logical ow,requirements,software testing,subsumption,techniques that are based,that each statement in,the condition coverage techniques,the program is executed,trol through a program},
	Pages = {1--14},
	Title = {{Subsumption of condition coverage techniques by mutation testing}},
	Year = {1996},
	Bdsk-Url-1 = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.7805}}

@inproceedings{Daran1996,
	Address = {New York, New York, USA},
	Author = {Daran, Muriel and Thevenod-Fosse, Pascale},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Daran, Thevenod-Fosse - 1996 - ISSTA - Software Error Analysis A Real Case Study Involving Real Faults and Mutations.pdf:pdf},
	Isbn = {0897917871},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {158--171},
	Publisher = {ACM Press},
	Title = {{Software Error Analysis: A Real Case Study Involving Real Faults and Mutations}},
	Year = {1996},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=229000.226313},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/229000.226313}}

@article{Offutt1996b,
	Abstract = {Mutation testing is a technique for unit testing software that although powerful is computationally expensive. The principal expense of mutation is that many variants of the test program called mutants must be repeatedly executed. This paper quantifies the expense of mutation in terms of the number of mutants that are created, then proposes and evaluates a technique that reduces the numberof mutants by an order of magnitude. Selective mutation reduces the cost of mutation testing by reducing the numberof mutants. This paper reports experimental results that compare selective mutation testing with standard or non selective mutation testing and results that quantify the savings achieved by selective mutation testing. The results support the hypothesis that selective mutation is almost as strong as non selective mutation; in experimental trials selective mutation provides almost the same coverage as non selective mutation, with a four fold or more reduction in the number of mutants.},
	Annote = {ES-Selective},
	Author = {Offutt, A Jefferson and Lee, Ammei and Rothermel, Gregg and Untch, Roland H and Zapf, Christian},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt et al. - 1996 - TOSEM - An Experimental Determination of Sufficient Mutant Operators.pdf:pdf},
	Journal = {TOSEM},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--23},
	Title = {{An Experimental Determination of Sufficient Mutant Operators}},
	Year = {1996}}

@article{Demillo1997,
	Abstract = {This paper presents a new technique for automatically generating test data. The technique is based on mutation analysis and creates test data that approximates relative-adequacy. The technique is a fault-based technique that uses algebraic constraints to describe test cases designed to nd particular types of faults. A set of tools, collectively called Godzilla, has been implemented that automatically generates constraints and solves them to create test cases for unit and module testing. Godzilla has been integrated with the Mothra testing system and has been used as an e ective way to generate test data that kills program mutants. The paper includes an initial list of constraints and discusses some of the problems that have been solved to develop the complete implementation of the technique.},
	Author = {Demillo, Richard A and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Demillo, Offutt - 1997 - IEEE Transactions on Software Engineering - Constraint Based Automatic Test Data Generation.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {September 1991},
	Pages = {1--18},
	Title = {{Constraint Based Automatic Test Data Generation}},
	Volume = {17},
	Year = {1997}}

@article{Hsueh1997,
	Abstract = {Dependability evaluation involves the study of failures and errors. The destructive nature of a crash and long error latency make it difficult to identify the causes of failures in the operational environment. It is particularly hard to recreate a failure scenario for a large, complex system. To identify and understand potential failures, we use an experiment-based approach for studying the dependability of a system. Such an approach is applied not only during the conception and design phases, but also during the prototype and opera- tional phases.1,2 To take an experiment-based approach, we must first understand a system's architecture, structure, and behavior. Specifically, we need to know its tol- erance for faults and failures, including its built-in detection and recovery mechanisms,3 and we need specific instruments and tools to inject faults, create failures},
	Author = {Hsueh, Mei-chen and Tsai, Timothy K and Iyer, Ravishankar K},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hsueh, Tsai, Iyer - 1997 - Unknown - Fault Injection Techniques and Tools.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {April},
	Pages = {75--82},
	Title = {{Fault Injection Techniques and Tools}},
	Year = {1997}}

@article{Frankl1997,
	Author = {Frankl, Phyllis G and Weiss, Stewart N and Hu, Cang},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{All-uses vs Mutation Testing: an Experimental Comparison of Effectiveness}},
	Year = {1997}}

@article{Voas1997,
	Author = {Voas, Jeffrey M},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Software fault injection: inoculating programs against errors}},
	Year = {1997}}

@article{Harrold1997,
	Annote = {Refers Mistake -{\textgreater} Fault -{\textgreater} Error -{\textgreater} Failure},
	Author = {Harrold, Mary Jean and Offutt, A Jefferson and Tewary, Kanupriya},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harrold, Offutt, Tewary - 1997 - Journal of Systems and Software - An approach to fault modeling and fault seeding using the program dep.pdf:pdf},
	Journal = {J. Syst. Softw.},
	Keywords = {dataflow testing,fault,fault modeling,fault seeding,mutation testing},
	Number = {November},
	Pages = {1--27},
	Title = {{An approach to fault modeling and fault seeding using the program dependence graph}},
	Volume = {94},
	Year = {1997},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121296001756}}

@article{Tsai1997,
	Author = {Tsai, Timothy K and Zhao, Hong and Hsueh, Mei-Chen and Iyer, Ravishankar K},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Path-based Fault Injection}},
	Year = {1997}}

@article{Zhu1997,
	Author = {Zhu, Hong and Hall, Patrick A. V. and May, John H. R.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhu, Hall, May - 1997 - ACM Computing Surveys - Software unit test coverage and adequacy.pdf:pdf},
	Issn = {03600300},
	Journal = {ACM Comput. Surv.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {dec},
	Number = {4},
	Pages = {366--427},
	Title = {{Software unit test coverage and adequacy}},
	Volume = {29},
	Year = {1997},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=267580.267590},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/267580.267590}}

@inproceedings{Michael1997,
	Abstract = {This paper presents an empirical study of an important aspect of software defect behavior: the propagation of data state errors. A data-state error occurs when a fault is executed and affects a program's data-state, and it is said to propagate if it affects the outcome of the execution. Our results show that data-state errors appear to have a property that is quite useful when simulating faulty code: for a given input, it appears that either all data state errors injected at a given location tend to propagate to the output, or else none of them do. These results are interesting because of what they in dicate about the behavior of data-state errors in software. They suggest that data state ermrs behave in an orderly way, and that the behavior of software may not be as unpredictable as it could theoretically be. Additionally, if all faults behave the same for a given input and a given location, then one can use simulation to get a good picture of how faults behave, regardless of whether the faults one has simulated are representative of real faults.},
	Author = {Michael, C.C. and Jones, R.C.},
	Booktitle = {COMPASS},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Michael, Jones - 1997 - COMPASS - On the uniformity of error propagation in software.pdf:pdf},
	Isbn = {0-7803-3979-7},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {68--76},
	Publisher = {Ieee},
	Title = {{On the uniformity of error propagation in software}},
	Year = {1997},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=613237},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/CMPASS.1997.613237}}

@inproceedings{Ur1998,
	Author = {Ur, Shmuel and Ziv, Avi},
	Booktitle = {STAR},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ur, Ziv - 1998 - STAR - Off-The-Shelf Vs . Custom Made Coverage Models , Which Is The One for You.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Off-The-Shelf Vs . Custom Made Coverage Models , Which Is The One for You ?}},
	Year = {1998}}

@article{Yoon1998,
	Author = {Yoon, Hoijin and Choi, Byoungju and Jeon, Jin-Ok},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation-Based Inter-Class Testing}},
	Year = {1998}}

@techreport{Kim1998,
	Author = {Kim, Sun-Woo},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kim - 1998 - Unknown - Testing Object-Oriented Programs Using Mutation Techniques.ps:ps},
	Institution = {Department of Computer Science, University of York},
	Title = {{Testing Object-Oriented Programs Using Mutation Techniques.}},
	Year = {1998}}

@article{Mckeeman1998,
	Author = {Mckeeman, William M},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mckeeman - 1998 - Digital Technical Journal - Differential Testing for Software.pdf:pdf},
	Journal = {Digit. Tech. J.},
	Number = {1},
	Title = {{Differential Testing for Software}},
	Volume = {10},
	Year = {1998}}

@phdthesis{Barbosa1998,
	Abstract = {Mutation Analysis  one of the error based criteria  has been found to be effective on revealing faults. However, its high cost, due to the high number of mutants created, has motivated the proposition of many alternative approaches for its application. In this perspective, a relevant study resulted on the determination of a sufficient mutant operator set for Fortran, indicating that it is possible to have a large cost reduction of mutation testing, preserving a high mutation score. Some studies have also shown that the reduction on the effectiveness is not significant. This work aims to investigate pragmatic alternatives for mutation analysis application and, in this context, a procedure for the determination of a sufficient mutant operators set for C is proposed, using Proteum testing tool. Aiming to apply and validate the proposed procedure, two different groups of programs are used. For both of them, the sufficient mutant operator set presents very significant results in terms of cost reduction, with a very small reduction on the mutation score. Strategies to evolve and refine an essential mutant operator set to different application domains are also investigated.},
	Author = {Barbosa, Ellen Francine},
	Booktitle = {Brazilian Symp. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A contribution for the determination of a sufficient mutant operators set for C-program testing}},
	Year = {1998}}

@article{Offutt1998,
	Abstract = {Mutation testing is a technique for testing software units that has great potential for improving the quality of testing, and thereby increasing our ability to assure the high reliability of critical software. It will be shown that recent advances in mutation research have brought a practical mutation testing system closer to reality. One recent advance is a partial solution to the problem of automatically detecting equivalent mutant programs. Equivalent mutants are currently detected by hand, which makes it very expensive and time-consuming. The problem of detecting equivalent mutants is a speci c instance of a more general problem, commonly called the feasible path problem, which says that for certain structural testing criteria some of the test requirements are infeasible in the sense that the semantics of the program imply that no test case satis es the test requirements. Equivalent mutants, unreachable statements in path testing techniques, and infeasible DU-pairs in data ow testing are all instances of the feasible path problem. This paper presents a technique that uses mathematical constraints, originally developed for test data generation, to automatically detect some equivalent mutants and infeasible paths.},
	Author = {Offutt, A Jefferson and Pan, Jie},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Pan - 1998 - Software Testing, Verification and Reliability - Automatically Detecting Equivalent Mutants and Infeasible Paths.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Offutt, Pan - 1998 - Software Testing, Verification and Reliability - Automatically Detecting Equivalent Mutants and Infeasible Paths.ps:ps},
	Journal = {Softw. Testing, Verif. Reliab.},
	Keywords = {constraints,feasible path analysis,mutation,mutation testing,software testing,testing,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {3},
	Pages = {165--192},
	Title = {{Automatically Detecting Equivalent Mutants and Infeasible Paths}},
	Volume = {7},
	Year = {1998}}

@inproceedings{Frankl1998,
	Abstract = {This paper reports on an empirical evaluation of the fault-detecting ability of two white-box software testing techniques: decision coverage (branch testing) and the all-uses data flow testing criterion. Each subject program was tested using a very large number of randomly generated test sets. For each test set, the extent to which it satisfied the given testing criterion was measured and it was determined whether or not the test set detected a program fault. These data were used to explore the relationship between the coverage achieved by test sets and the likelihood that they will detect a fault.Previous experiments of this nature have used relatively small subject programs and/or have used programs with seeded faults. In contrast, the subjects used here were eight versions of an antenna configuration program written for the European Space Agency, each consisting of over 10,000 lines of C code.For each of the subject programs studied, the likelihood of detecting a fault increased sharply as very high coverage levels were reached. Thus, this data supports the belief that these testing techniques can be more effective than random testing. However, the magnitudes of the increases were rather inconsistent and it was difficult to achieve high coverage levels.},
	Author = {Frankl, Phyllis G and Iakounenko, Oleg},
	Booktitle = {ACM SIGSOFT FSE},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Further empirical studies of test effectiveness}},
	Year = {1998}}

@article{Tsai1999,
	Author = {Tsai, Timothy K and Hsueh, Mei-Chen and Zhao, Hong and Kalbarczyk, Zbigniew and Iyer, Ravishankar K},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Stress-based and Path-based Fault Injection}},
	Year = {1999}}

@article{Mresa1999,
	Abstract = {This paper investigates the mutation scores achieved by individual operators of the Mothra mutation system and their associated costs in order to determine themost efficient operators. The cost ofmutation analysis includes both test set generation and equivalent mutant detection. The score and cost information is then used as a heuristic for choosing a subset of the operators for use in efficient selective mutation testing. Experiments were performed using a sample of 11 programs and a number of test sets for each program. The results show that the use of efficient operators can provide significant efficiency gains for selective mutation if the acceptable mutation score is not very close to one. When mutation scores very close to one are required, a randomly selected proportion of the mutants provides a more efficient strategy than a subset of efficient operators. KEYWORDS:},
	Author = {Mresa, Elfurjani S and Bottaci, Leonardo},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mresa, Bottaci - 1999 - Unknown - Efficiency of mutation operators and selective mutation strategies An empirical study.pdf:pdf},
	Keywords = {efficiency,mutation,mutation operators,selective mutation testing,software testing,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--22},
	Title = {{Efficiency of mutation operators and selective mutation strategies : An empirical study}},
	Year = {1999}}

@article{Hierons1999,
	Author = {Hierons, Robert M and Harman, Mark},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hierons, Harman - 1999 - Software Testing, Verification and Reliability - Using Program Slicing to Assist in the Detection of Equivalent.ps:ps},
	Journal = {Softw. Testing, Verif. Reliab.},
	Title = {{Using Program Slicing to Assist in the Detection of Equivalent Mutants}},
	Year = {1999}}

@inproceedings{Marick1999,
	Author = {Marick, Brian},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Marick - 1999 - Unknown - How to Misuse Code Coverage.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--13},
	Title = {{How to Misuse Code Coverage}},
	Year = {1999}}

@article{Offutt2000,
	Abstract = {This paper presen ts t o experimen w tal comparisons of data ?o wand m utation testing? These t o tec w hniques are widely considered to be e?ectiv e for unit?lev el soft are testing? but can w only be analytically compared to a limited exten t? W e compare the tec hniques b yev aluating the e?ectiv eness of test data dev eloped for eac h? F or a n um ber of programs? w e dev elop ten independen t sets of test data? ?v e to satisfy the m utation criterion? and ?v e to satisfy the all?uses data ?o w criterion? These test sets are dev eloped using automated tools? in a manner consisten t with the w y a test engineer migh a t be expected to generate test data in practice? W e use these test sets in t o separate experimen w ts? First w e measure the e?ectiv eness of the test data that w as dev eloped for one tec hnique in terms of the other tec hnique? Second? w e in estigat v e the abilit y of the test sets to ?nd faults? W e place a n um ber of faults in to eac hof our subject programs? and measure the n um ber of faults that are detected b y the test sets? Our results indicate that while both tec hniques are e?ectiv e? m utation?adequ ate test sets are closer to satisfying the data ?o w criterion? and detect more faults? KEY},
	Author = {Offutt, A Jefferson and Pan, Jie and Tewary, Kanupriya and Zhang, Tong},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt et al. - 2000 - Unknown - An Experimental Evaluation of Data Flow and Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--14},
	Title = {{An Experimental Evaluation of Data Flow and Mutation Testing}},
	Year = {2000}}

@article{Wah2000,
	Annote = {Considers test set or order 2, which happens when we use two test cases.

We can use an inductive argument which suggests that when n+1 test cases are used, the probability of masking goes down monotonically.

We might also consider tests of order 2 as (a1,a2), with range given by (b1,b2) and notice how the range changes.},
	Author = {Wah, K S How Tai},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wah - 2000 - Unknown - A theoretical study of fault coupling.pdf:pdf},
	Keywords = {alternate,coupled,coupling ratio,degeneracy structure,double-fault,fault coupling,fault-based testing,mutation,proper,single-fault,test set,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {March 1999},
	Pages = {3--45},
	Title = {{A theoretical study of fault coupling}},
	Year = {2000}}

@article{Souza2000,
	Abstract = {Many researchers have pursued the establishment of a low-cost, effective testing and validation strategy at the program level as well as at the specification level. Mutation Testing is an error-based approach, originally introduced for program testing, that provides testers a systematic way to evaluate how good a given test set is. Some studies have also investigated its use to generate test sets. In this article, the application of Mutation Testing for validating Estelle specifications is proposed. A mutation operator set for Estelle -- one of the crucial points for effectively applying Mutation Testing -- is defined, addressing: the validation of the behavior of the modules, the communication among modules and the architecture of the specification. In this scope, these operators can be taken as a fault model. Considering this context, a strategy for validating Estelle-based specification is proposed and exemplified using the Alternating-bit protocol. 1.},
	Author = {de Souza, Simone do Rocio Senger and Maldonado, Jose Carlos and Fabbri, Sandra Camargo Pinto Ferraz and de Souza, Wanderley Lopes},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Souza et al. - 2000 - Unknown - Mutation Testing Applied to Estelle Specifications.pdf:pdf},
	Isbn = {0769504930},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {c},
	Pages = {1--10},
	Title = {{Mutation Testing Applied to Estelle Specifications}},
	Volume = {00},
	Year = {2000}}

@inproceedings{Offuttc,
	Abstract = {Mutation testing is a powerful but computationally expensive technique for unit testing software. This expense has prevented mutation from becoming widely used in practical situations, but recent engineering advances have given us techniques and algorithms for significantly reducing the cost of mutation testing. These techniques include a new algorithmic execution technique called weak mutation, a reduction technique called selective mutation, heuristics for detecting equivalent mutants and algorithms for automatic test data generation. This paper reviews experimentation with these advances and outlines a design for a system that will approximate mutation, but in a way that will be accessible to every day programmers. We envision a system to which a programmer can submit a program unitand get back a set of input/output pairs that are guaranteed to form an effective test of the unit by being close to mutation adequate. We believe this system could be efficient enough to be adopted by leading-edge software developers. Full automation in unit testing has the potential to dramatically change the economic balance between testing and development by reducing the cost of testing from the major part of total development cost to a fraction.},
	Author = {Offutt, A Jefferson and Untch, Roland H},
	Booktitle = {Mutat. 2000 Mutat. Test. Twent. Twenty First Centuries},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Untch - 2000 - Mutation 2000 Mutation Testing in the Twentieth and the Twenty First Centuries - Mutation 2000 Uniting the Orthog.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation 2000: Uniting the Orthogonal}},
	Year = {2000}}

@inproceedings{Kim,
	Abstract = {The program mutation is a testing technique that assesses the quality of test input data by examining whether the test data can distinguish a set of alternate programs (representing specific types of faults) from the program under test. We have extended the conventional mutation method to be applicable for object-oriented (OO) programs. The method, termed Class Mutation, is a form of OO-directed selective mutation testing that focuses on plausible flaws related to the unique features in OO (Java) programming. This paper introduces the Class Mutation technique and describes the results of the case study performed to investigate the applicability of the technique. 1},
	Author = {Kim, Sunwoo and Clark, John A and Mcdermid, John A},
	Booktitle = {Net. Object Days},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kim, Clark, Mcdermid - 2000 - Net. Object Days - Class Mutation Mutation Testing for Object-Oriented Programs.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {9--12},
	Title = {{Class Mutation : Mutation Testing for Object-Oriented Programs}},
	Year = {2000}}

@article{Maldonado2001,
	Author = {Maldonado, Jose Carlos and Barbosa, Ellen Francine and Vincenzi, Auri Marcelo Rizzo and Delamaro, Marcio Eduardo},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Maldonado et al. - 2001 - Unknown - Evaluating N-selective mutation for C programs.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Evaluating N-selective mutation for C programs}},
	Year = {2001}}

@article{Harman2001,
	Annote = {Equivalent Mutants : How to avoid them},
	Author = {Harman, Mark and Hierons, Robert M and Danicic, Sebastian},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harman, Hierons, Danicic - 2001 - Mutation testing for the new century - The relationship between program dependence and mutation analys.pdf:pdf},
	Journal = {Mutat. Test. new century},
	Keywords = {dependence analysis,equivalent mutant detection,slicing,test data generation},
	Title = {{The relationship between program dependence and mutation analysis}},
	Year = {2001},
	Bdsk-Url-1 = {http://link.springer.com/content/pdf/10.1007/978-1-4757-5939-6%7B%5C_%7D4.pdf}}

@book{Maldonado2001a,
	Abstract = {The quality of the W{\&}T --- Verification, Validation and Testing --- activity is extremely relevant to the software development process. The establishment of a low-cost, effective testing and validation strategy and the development of supporting tools have been pursued by many researchers. This presentation discusses the main architectural and operational aspects of a family of tools that support specification and program testing based on mutation. The testing of C programs is supported by Proteum/IM 2.0, at the unit and at the integration level as well. Proteum is an acronym for PROgram Testing Using Mutants. At the specification level the application of mutation testing for validating Reactive Systems (RS) specifications based on Finite State Machines (FSM), Statecharts and Petri Nets is support by Proteum/RS.},
	Author = {Maldonado, Jose Carlos and Delamaro, Marcio Eduardo and Fabbri, Sandra Camargo Pinto Ferraz and Simao, Adenilso da Silva and Sugeta, Tatiana and Vincenzi, Auri Marcelo Rizzo and Masiero, Paulo Cesar},
	Booktitle = {Mutat. Test. New Century},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {pp 113--116},
	Title = {{Proteum: A Family of Tools to Support Specification and Program Testing Based on Mutation}},
	Year = {2001}}

@phdthesis{Katz2001,
	Author = {Katz, Sagi},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Katz - 2001 - Unknown - Techniques for increaseing Coverage of Formal Verification.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Techniques for increaseing Coverage of Formal Verification}},
	Year = {2001}}

@inproceedings{Wah2001,
	Author = {Wah, K S How Tai},
	Booktitle = {Mutat. Test. new century},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wah - 2001 - Mutation testing for the new century - Theoretical insights into the coupling effect.pdf:pdf},
	Isbn = {9781441948885},
	Keywords = {alternate,coupling effect,domain-to-range ratio,drr,fault size,multi-fault,phrases,proper test set,single-fault,survival ratio},
	Title = {{Theoretical insights into the coupling effect}},
	Year = {2001}}

@article{Vincenzi2001,
	Author = {Vincenzi, Auri Marcelo Rizzo and Maldonado, Jose Carlos and Barbosa, Ellen Francine and Delamaro, Marcio Eduardo},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Vincenzi et al. - 2001 - Unknown - Unit and integration testing strategies for C programs using mutation.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Unit and integration testing strategies for C programs using mutation}},
	Year = {2001}}

@article{Chevalley2001,
	Author = {Chevalley, P},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Applying Mutation Analysis for Object-oriented Programs Using a Reflective Approach}},
	Year = {2001}}

@article{Elbaum,
	Author = {Elbaum, Sebastian and Gable, David and Rothermel, Gregg},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Elbaum, Gable, Rothermel - 2001 - {\ldots} International Conference on Software {\ldots} - The impact of software evolution on code coverage infor.pdf:pdf},
	Isbn = {0-7695-1189-9},
	Journal = {{\ldots} Int. Conf. Softw. {\ldots}},
	Pages = {170--179},
	Publisher = {IEEE Comput. Soc},
	Title = {{The impact of software evolution on code coverage information}},
	Year = {2001},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=972727%20http://dl.acm.org/citation.cfm?id=848646},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSM.2001.972727}}

@article{Jackson2001,
	Author = {Jackson, D and Woodward, Martin R},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Parallel firm mutation of Java programs}},
	Year = {2001}}

@article{Barbosa2001,
	Abstract = {Mutation testing (MT) has been found to be effective at revealing faults. However, its high cost of application, due to the high number of mutants created and the effort to determine the equivalent ones, has motivated the proposition of alternative approaches for its application. One of them, named `selective mutation', aims to reduce the number of generated mutants through a reduction in the number of mutant operators. A previous relevant study resulted in the proposition of a sufficient mutant operators set for FORTRAN, indicating that it is possible to have a large cost reduction in MT application, whilst preserving a high MT score. This work investigates procedures for the determination of a sufficient mutant operators set for C programs with the perspective of contributing to the establishment of low-cost, effective mutation-based testing strategies},
	Annote = {* Consider mutant operators that determine a high mutation score


- An adequate test suite for that mutation operator should kill a high {\%} of the entire set of mutation operators


* Consider one operator of each operator class
- e.g


* Evaluate empirical inclusion among the operators
* Establish incremental strategy
* Consider muops that provide an incremetn in mutation score
* Consider mutagens with high strength.


- Strength of an operator against another: The {\%} of mutants due to the second operator that is not caught by adquate suite to another.},
	Author = {Barbosa, Ellen Francine and Maldonado, Jose Carlos and Vincenzi, Auri Marcelo Rizzo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Barbosa, Maldonado, Vincenzi - 2001 - Software Testing, Verification and Reliability - Toward the determination of sufficient mutant ope.pdf:pdf},
	Issn = {0960-0833},
	Journal = {Softw. Testing, Verif. Reliab.},
	Keywords = {mutation,mutation testing,software testing,sufficient mutant operators,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {jun},
	Number = {2},
	Pages = {113--136},
	Title = {{Toward the determination of sufficient mutant operators for C}},
	Volume = {11},
	Year = {2001},
	Bdsk-Url-1 = {http://doi.wiley.com/10.1002/stvr.226},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr.226}}

@article{Alexander2002,
	Abstract = {Although program faults are widely studied, there are many aspects of faults that we still do not understand, par- ticularly about OO software. In addition to the simple fact that one important goal during testing is to cause failures and thereby detect faults, a full understanding of the char- acteristics of faults is crucial to several research areas. The power that inheritance and polymorphism brings to the ex- pressiveness of programming languages also brings a num- ber of new anomalies and fault types. In prior work we presented a fault model for the appearance and realization of OO faults that are specific to the use of inheritance and polymorphism. Many of these faults cannot appear unless certain syntactic patterns are used. The patterns are based on language constructs, such as overriding methods that directly define inherited state variables and non-inherited methods that call inherited methods. If one of these syntac- tic patterns is used, then we say the software contains an anomaly and possibly a fault. This paper describes the syn- tactic patterns for each OO fault type. These syntactic pat- terns can potentially be foundwith an automatic tool. Thus, faults can be uncovered and removed early in development.},
	Author = {Alexander, Roger T and Offutt, A Jefferson and Bieman, James M},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Alexander, Offutt, Bieman - 2002 - Unknown - Syntactic Fault Patterns in OO Programs ∗.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Syntactic Fault Patterns in OO Programs ∗}},
	Year = {2002}}

@article{Chen2002,
	Author = {Chen, Wei and Untch, Roland H and Rothermel, Gregg and Elbaum, Sebastian and von Ronne, Jeffery},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Chen et al. - 2002 - Software Testing, Verification and Reliability - Can fault-exposure-potential estimates improve the fault detection.pdf:pdf},
	Issn = {0960-0833},
	Journal = {Softw. Testing, Verif. Reliab.},
	Keywords = {code coverage,correspondence to,corvallis,department of computer science,fault-exposure potential,oregon state university,professor gregg rothermel,software testing,test adequacy criteria},
	Month = {dec},
	Number = {4},
	Pages = {197--218},
	Title = {{Can fault-exposure-potential estimates improve the fault detection abilities of test suites?}},
	Volume = {12},
	Year = {2002},
	Bdsk-Url-1 = {http://doi.wiley.com/10.1002/stvr.257},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr.257}}

@article{Marcelo2002,
	Author = {Vincenzi, Auri Marcelo Rizzo and Nakagawa, Elisa Yumi and Maldonado, Jose Carlos and Delamaro, Marcio Eduardo and Aparecida, Roseli and Romero, Francelin},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Vincenzi et al. - 2002 - International Journal of Software Engineering and Knowledge Engineering - Bayesian-learning based guidelines to.pdf:pdf},
	Journal = {Int. J. Softw. Eng. Knowl. Eng.},
	Number = {6},
	Pages = {675--689},
	Title = {{Bayesian-learning based guidelines to determine equivalent mutants}},
	Volume = {12},
	Year = {2002}}

@article{Ma2002,
	Abstract = {The effectiveness of mutation testing depends heavily on the types of faults that the mutation operators are designed to represent. Therefore, the quality of the mutation opera- tors is key to mutation testing. Mutation testing has tradi- tionally been applied to procedural-based languages, and mutation operators have been developed to support most of their language features. Object-oriented programming languages contain new language features, most notably inheritance, polymor- phism, and dynamic binding. Not surprisingly, these lan- guage features allow new kinds of faults, some of which are not modeled by traditional mutation operators. Although mutation operators for OO languages have previously been suggested, our work in OO faults indicate that the previ- ous operators are insufficient to test these OO language features, particularly at the class testing level. This pa- per introduces a new set of class mutation operators for the OO language Java. These operators are based on spe- cific OO faults and can be used to detect faults involving inheritance, polymorphism, and dynamic binding, thus are useful for inter-class testing. An initial Java mutation tool has recently been completed, and a more powerful version is currently under construction.},
	Author = {Ma, Yu-Seung and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Offutt - 2002 - Unknown - Inter-Class Mutation Operators for Java.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {November},
	Title = {{Inter-Class Mutation Operators for Java}},
	Year = {2002}}

@inproceedings{May,
	Abstract = {Over time programming languages develop, paradigms evolve, development teams change. The effect of this is that test suites wear out, therefore these also need to evolve. Mutation testing is an effective fault- based testing approach, but it is computationally expensive. Any evolu- tionary based approach to this process needs to simultaneously manage execution costs. In this conceptual paper we adopt immune systems as a metaphor for the basis of an alternative mutation testing system. It is envisaged that through monitoring of the development environment, a minimal set of effective mutations and test cases can be developed - a 'vaccine' - that can be applied to the software development process to protect it from errors - from infections. 1},
	Author = {May, Peter and Mander, Keith and Timmis, Jon},
	Booktitle = {ICARIS},
	File = {:Users/rahul/Documents/Mendeley.Desktop/May, Mander, Timmis - 2003 - ICARIS - Software Vaccination An Artificial Immune System Approach to Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Software Vaccination : An Artificial Immune System Approach to Mutation Testing}},
	Year = {2003}}

@article{Aichernig2003,
	Author = {Aichernig, Bernhard K.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Aichernig - 2003 - Formal Aspects of Computing - Mutation Testing in the Refinement Calculus.pdf:pdf},
	Issn = {0934-5043},
	Journal = {Form. Asp. Comput.},
	Keywords = {abstraction,eration,formal methods,formal specifications,mutation,mutation testing,refinement,test-case gen-,test-coverage,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {nov},
	Number = {2-3},
	Pages = {280--295},
	Title = {{Mutation Testing in the Refinement Calculus}},
	Volume = {15},
	Year = {2003},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s00165-003-0011-8},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s00165-003-0011-8}}

@article{Derezinska2003,
	Abstract = {The quality of a test suite can be measured using mutation analysis. Groups of OO mutation operators are proposed for testing object-oriented features. The OO operators applied to UML specification and C++ code are illustrated by an example. Experimental results demonstrate effectiveness of different mutation operators and the reduction of functional test suite. 1.},
	Author = {Derezinska, Anna},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezinska - 2003 - Unknown - Object-Oriented Mutation to Asses the Quality of Tests.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {3--6},
	Title = {{Object-Oriented Mutation to Asses the Quality of Tests}},
	Year = {2003}}

@article{HowTaiWah2003,
	Abstract = {The focus in mutation testing is on the elimination of ?rst-order mutants. It is widely believed that there is a coupling e?ect between ?rst-order and higher-order mutants such that a test set that kills the former would be expected to kill the latter too; it follows that, if the belief is correct, there is no need whatsoever to bother with higher-order mutants. It turns out, in practice, that most higher-order mutants do get killed by such a test set, though a few somehow manage to survive. This is the ?rst of two papers dealing with the coupling e?ect from a theoretical standpoint. The overall results indicate that the hypothesis of a coupling e?ect is largely valid, provided the program is not too large; only a tiny proportion of higher-order mutants is expected to survive a test set that kills all ?rst-order mutants. The basis of the approach is that programs can be modelled as compositions of ?nite functions, the domain of which is assumed to be large. The problem is a complex one, so the present paper only considers the case where there is just one test data; the case where there are more than one test data is left to a second paper. The aim is not only to show that the coupling e?ect actually exists, but also to gain some understanding of the various factors underlying it.},
	Author = {{How Tai Wah}, K.S.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/How Tai Wah - 2003 - Science of Computer Programming - An analysis of the coupling effect I single test data.pdf:pdf},
	Issn = {01676423},
	Journal = {Sci. Comput. Program.},
	Keywords = {alternate,coupling e ect,expected,fault size,function degeneracy,multi-fault,mutation,number of survivors,proper test set,single-fault,survival ratio,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {aug},
	Number = {2-3},
	Pages = {119--161},
	Title = {{An analysis of the coupling effect I: single test data}},
	Volume = {48},
	Year = {2003},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0167642303000224},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/S0167-6423(03)00022-4}}

@inproceedings{Kim2003,
	Author = {Kim, Yong Woo},
	Booktitle = {CASCON},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kim - 2003 - CASCON - Efficient Use of Code Coverage in Large-Scale Software Development.pdf:pdf},
	Keywords = {1 the study is,2 to avoid repetition,800 kloc,approximately 19,based on a large,commercial product,coverage,line of code is,mutation,of the phrase code,the term,total,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Efficient Use of Code Coverage in Large-Scale Software Development}},
	Year = {2003}}

@inproceedings{Lyu2003,
	Abstract = {Software testing and software fault tolerance are two major techniques for developing reliable software systems, yet limited empirical data are available in the literature to evaluate their effectiveness. We conducted a major experiment to engage 34 programming teams to independently develop multiple software versions for an industry-scale critical flight application, and collected faults detected in these program versions. To evaluate the effectiveness of software testing and software fault tolerance, mutants were created by injecting real faults occurred in the development stage. The nature, manifestation, detection, and correlation of these faults were carefully investigated. The results show that coverage testing is generally an effective mean to detecting software faults, but the effectiveness of testing coverage is not equivalent to that of mutation coverage, which is a more truthful indicator of testing quality. We also found that exact faults found among versions are very limited. This result supports software fault tolerance by design diversity as a creditable approach for software reliability engineering. Finally we conducted domain analysis approach for test case generation, and concluded that it is a promising technique for software testing purpose. Keywords:},
	Author = {Lyu, Michael R and Huang, Zubin and Sze, Sam K.S and Cai, Xia},
	Booktitle = {ISSRE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lyu et al. - 2003 - ISSRE - An empirical study on testing and fault tolerance for software reliability engineering.pdf:pdf},
	Isbn = {0-7695-2007-3},
	Keywords = {data flow coverage testing,empirical study,mutation,mutation testing,selection of test,software fault tolerance,software testing is the,technique is software testing,the key issue in,the main fault removal,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {119--130},
	Publisher = {Ieee},
	Title = {{An empirical study on testing and fault tolerance for software reliability engineering}},
	Year = {2003},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1251036},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ISSRE.2003.1251036}}

@article{Ma2004,
	Author = {Ma, Yu-Seung and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Offutt - 2004 - Unknown - MuJava An Automated Class Mutation System.pdf:pdf},
	Keywords = {mutation,mutation testing,object-oriented programs,software testing,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--34},
	Title = {{MuJava : An Automated Class Mutation System}},
	Year = {2004}}

@article{Ziade2004,
	Author = {Ziade, Haissam and Ayoubi, Rafic and Velazco, Raoul},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ziade, Ayoubi, Velazco - 2004 - Unknown - A Survey on Fault Injection Techniques.pdf:pdf},
	Keywords = {fault injection,fault injector,fault simulation,fault tolerance,mutation,unread,vhdl fault models,vlsi circuits},
	Mendeley-Tags = {mutation,unread},
	Number = {2},
	Pages = {171--186},
	Title = {{A Survey on Fault Injection Techniques}},
	Volume = {1},
	Year = {2004}}

@article{Lee,
	Abstract = {Mutation testing is a fault-based testing technique which provides strong quality assurance. Mutation testing has a very long history for the procedural programs at unit-level testing, but the research on mutation testing of object-oriented programs is still immature. Recently, class mutation operators are proposed to detect object-oriented specific faults. However, any analysis has not been conducted on the class mutation operators. In this paper, we evaluate the orthogonality of the class mutation operators by some experiment. The experimental results show the high possibility that each class mutation operator has fault-revealing power that is not achieved by other mutation operators, i.e. orthogonal. Also, the results show that the number of mutants from the class mutation operators is small so that the cost is not so high as procedural programs.},
	Author = {Lee, Hyo-Jeong and Ma, Yu-Seong and Kwon, Yong-rae},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lee, Ma, Kwon - 2004 - APSEC - Empirical Evaluation of Orthogonality of Class Mutation Operators.pdf:pdf},
	Journal = {APSEC},
	Keywords = {class mutation operator,mutation,mutation testing,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Empirical Evaluation of Orthogonality of Class Mutation Operators}},
	Year = {2004}}

@inproceedings{Adamopoulos2004,
	Author = {Adamopoulos, Konstantions and Harman, Mark and Hierons, Robert M},
	Booktitle = {GECCO},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Adamopoulos, Harman, Hierons - 2004 - GECCO - How to Overcome the Equivalent Mutant Problem and Achieve Tailored Selective Mutation usin.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Adamopoulos, Harman, Hierons - 2004 - GECCO - How to Overcome the Equivalent Mutant Problem and Achieve Tailored Selective Mutation u(2).pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{How to Overcome the Equivalent Mutant Problem and Achieve Tailored Selective Mutation using Co-evolution}},
	Year = {2004}}

@article{Okun2004,
	Abstract = {Mutation analysis is a fault-based testing technique that uses mutation operators to introduce small changes into a program or specification, producing mutants, and then chooses test cases to distinguish the mutants from the original. Mutation operators differ in the coverage they get. They also differ in the number of mutants they generate. Consequently, selecting mutation operators is an important problem whose solution affects the effectiveness and cost of mutation testing. We use the automated test generation and evaluation method that combines a model checker and mutation analysis. We define a set of mutation operators and implement a mutation gener- ator for specifications written in SMV, a popular model checker. To select the most effective mutation operators and sets of operators, we compare them using both theoretical and experimental methods. We construct mutation detection conditions and develop a technique to theoretically compare mutation operators. We apply mutation coverage and pairwise coverage metrics to empirically compare the effectiveness of mutation operators. To detect a fault in a program, a test case must cause the fault to affect the outputs, not just intermediate variables. We develop a method that uses a model checker to guarantee that tests cause visible output failures. We find that mutation operators form a hierarchy with respect to detection capability; we can skip a test for a mutation from an easier-to-detect mutation operator in the hierarchy, provided that we detect a corresponding mutation from a harder-to-detect operator. Our theoretical technique allows us to prove that the hierarchy applies to arbitrary logic expressions, whereas previous results apply only to logic expressions in disjunctive normal form. Based on analysis and empirical evaluation, we recommend mutation operators and sets of mutation operators that yield good test coverage at a reduced cost. Our experiments show that specification-based mutation can be applied to test programs; it gets good program-based coverage. Our method for guaranteeing fault visibility is very effective for black-box testing of programs which have a large intermediate state. This thesis shows that specification-based mutation can be used to economically generate effective tests.},
	Author = {Okun, Vadim},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Okun - 2004 - Unknown - Specification Mutation for Test Generation and Analysis.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Specification Mutation for Test Generation and Analysis}},
	Year = {2004}}

@article{Juristo2004,
	Author = {Juristo, Natalia and Moreno, AM and Vegas, Sira},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Juristo, Moreno, Vegas - 2004 - Empirical Software Engineering - Reviewing 25 years of testing technique experiments.pdf:pdf},
	Journal = {Empir. Softw. Eng.},
	Keywords = {empirical body of knowledge,testing,testing techniques},
	Pages = {7--44},
	Title = {{Reviewing 25 years of testing technique experiments}},
	Year = {2004},
	Bdsk-Url-1 = {http://link.springer.com/article/10.1023/B:EMSE.0000013513.48963.1b}}

@article{Offutt2004,
	Abstract = {Mutation is a powerful but complicated and computation- ally expensive testing method. Mutation is also a valuable experimental research technique that has been used in many studies. Mutation has been experimentally compared with other test criteria, and also used to support experimental comparisons of other test criteria, by using mutants as a method to create faults. In effect, mutation is often used as a ``gold standard'' for experimental evaluations of test methods. This paper presents a publicly available mutation system for Java that supports both traditional statement- level mutants and newer inter-class mutants. MuJava can be freely downloaded and installed with relative ease under both Unix and Windows. MuJava is offered as a free service to the community and we hope that it will promote the use of mutation analysis for experimental research in software testing.},
	Author = {Offutt, A Jefferson and Ma, Yu-Seung and Kwon, Yong-Rae},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Ma, Kwon - 2004 - ACM SIGSOFT SEN - An experimental mutation system for Java.pdf:pdf},
	Issn = {01635948},
	Journal = {ACM SIGSOFT SEN},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {sep},
	Number = {5},
	Pages = {1},
	Title = {{An experimental mutation system for Java}},
	Volume = {29},
	Year = {2004},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1022494.1022537},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1022494.1022537}}

@article{Aichernig2004,
	Abstract = {This article discusses mutation testing strategies in the context of refinement. Here, a novel generalization of mutation testing techniques is presented to be applied to contracts ranging from formal specifications to programs. It is demonstrated that refinement and its dual abstraction are the key notions leading to a precise and yet simple theory of mutation testing. The refinement calculus of Back and von Wright is used to express the concepts like contracts, useful mutations, test-cases and test-coverage},
	Author = {Aichernig, Bernhard K.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Aichernig - 2004 - Unknown - Contract-based Mutation Testing in the Refinement Calculus.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Contract-based Mutation Testing in the Refinement Calculus}},
	Year = {2004}}

@article{Kapoor2005,
	Author = {Kapoor, Kalpesh and Bowen, Jonathan P},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Ordering Mutants to Minimise Test Effort in Mutation Testing}},
	Year = {2005}}

@article{Lau2005,
	Abstract = {Kuhn, followed by Tsuchiya and Kikuno, have developed a hierarchy of relationships among several common types of faults (such as variable and expression faults) for specification-based testing by studying the corresponding fault detection conditions. Their analytical results can help explain the relative effectiveness of various fault-based testing techniques previously proposed in the literature. This article extends and complements their studies by analyzing the relationships between variable and literal faults, and among literal, operator, term, and expression faults. Our analysis is more comprehensive and produces a richer set of findings that interpret previous empirical results, can be applied to the design and evaluation of test methods, and inform the way that test cases should be prioritized for earlier detection of faults. Although this work originated from the detection of faults related to specifications, our results are equally applicable to program-based predicate testing that involves logic expressions.},
	Author = {Lau, Man F. and Yu, Yuen T.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lau, Yu - 2005 - ACM Transactions on Software Engineering and Methodology - An extended fault class hierarchy for specification-based te.pdf:pdf},
	Isbn = {1049331X (ISSN)},
	Issn = {1049331X},
	Journal = {ACM Trans. Softw. Eng. Methodol.},
	Number = {3},
	Pages = {247--276},
	Title = {{An extended fault class hierarchy for specification-based testing}},
	Volume = {14},
	Year = {2005},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1072997.1072998}}

@article{Do2005,
	Author = {Do, Hyunsook and Rothermel, Gregg},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Do, Rothermel - 2005 - 21st IEEE International Conference on Software Maintenance (ICSM'05) - A controlled experiment assessing test cas.pdf:pdf},
	Isbn = {0-7695-2368-4},
	Journal = {21st IEEE Int. Conf. Softw. Maint.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {411--420},
	Publisher = {Ieee},
	Title = {{A controlled experiment assessing test case prioritization techniques via mutation faults}},
	Year = {2005},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1510136},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSM.2005.9}}

@article{Bevan2005,
	Author = {Bevan, Jennifer and Whitehead, E James and Kim, Sunghun and Godfrey, Michael},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bevan et al. - 2005 - Unknown - Facilitating Software Evolution Research with Kenyon.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Facilitating Software Evolution Research with Kenyon}},
	Year = {2005}}

@article{Seater2005,
	Author = {Seater, Robert and Dennis, Gregory},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Seater, Dennis - 2005 - Unknown - Automated Test Data Generation with SAT.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Automated Test Data Generation with SAT}},
	Year = {2005}}

@article{Masud2005,
	Abstract = {In this paper, we propose a model to reveal faults and kill mutant using Genetic Algorithms. The model first instruments the source and mutant program and divides in small units. Instead of checking the entire program, it tries to find fault in each unit or kills each mutant unit. If any unit survives, the new test data is generated using Genetic Algorithm with special fitness function. The output of each test for each unit is recorded to detect the faulty unit. In this strategy, the source program and the mutant are instrumented in such a way that the input and output behavior of each unit can be traced. A checker module is used to compare and trace the output of each unit. A complete architecture of the model is proposed in the paper.},
	Author = {Masud, Mehedi and Nayak, Amiya and Avenue, King Edward},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Masud, Nayak, Avenue - 2005 - Unknown - A Strategy for Mutation Testing Using Genetic Algorithms.pdf:pdf},
	Isbn = {0780388860},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {May},
	Pages = {1049--1052},
	Title = {{A Strategy for Mutation Testing Using Genetic Algorithms}},
	Year = {2005}}

@inproceedings{Scholive2005,
	Annote = {From Duplicate 1 (Mutation Sampling Technique for the Generation of Structural Test Data - Scholive, M; Beroulle, V; Robach, C; Flottes, Marie-Lise; Rouzeyre, Bruno)

Scholive, Beroulle and Robac proposed to choose a subset of mutants generated for each mutation operator. For four programs used in the experiment a subset con- taining 10{\%} of mutants was created. The testing results for the complete set of mutants and the subset were better (more mutants were killed) than testing with randomly chosen mutants.},
	Author = {Scholive, M and Beroulle, V and Robach, C and Flottes, Marie-Lise and Rouzeyre, Bruno},
	Booktitle = {DATE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Scholive et al. - 2005 - DATE - Mutation Sampling Technique for the Generation of Structural Test Data.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Scholive et al. - 2005 - DATE - Mutation Sampling Technique for the Generation of Structural Test Data.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {5--6},
	Title = {{Mutation Sampling Technique for the Generation of Structural Test Data}},
	Year = {2005}}

@article{Ma2005,
	Author = {Ma, Yu-Seung and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Offutt - 2005 - Unknown - Description of Class Mutation Mutation Operators for Java.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {1},
	Pages = {1--9},
	Title = {{Description of Class Mutation Mutation Operators for Java}},
	Year = {2005}}

@inproceedings{Andrews2005,
	Abstract = {The empirical assessment of test techniques plays an important role in software testing research. One common practice is to instrument faults, either manually or by using mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults; however, we do not know whether empirical results obtained this way lead to valid, representative conclusions. This paper investigates this important question based on a number of programs with comprehensive pools of test cases and known faults. It is concluded that, based on the data available thus far, the use of mutation operators is yielding trustworthy results (generated mutants are similar to real faults). Mutants appear however to be different from hand-seeded faults that seem to be harder to detect than real faults. Keywords},
	Address = {New York, New York, USA},
	Author = {Andrews, James H and Briand, Lionel C and Labiche, Y.},
	Booktitle = {ICSE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Andrews, Briand, Labiche - 2005 - ICSE - Is mutation an appropriate tool for testing experiments.pdf:pdf},
	Isbn = {1595939632},
	Keywords = {hand-seeded faults,mutants,mutation,real faults,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {402},
	Publisher = {ACM Press},
	Title = {{Is mutation an appropriate tool for testing experiments?}},
	Year = {2005},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1062455.1062530},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1062455.1062530}}

@article{Cai2005,
	Author = {Cai, Xia and Lyu, Michael R},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Cai, Lyu - 2005 - ACM SIGSOFT SEN - The Effect of Code Coverage on Fault Detection under Different Testing Profiles.pdf:pdf},
	Isbn = {1595931155},
	Journal = {ACM SIGSOFT SEN},
	Keywords = {all or part of,code coverage,fault detection,is granted without fee,mutation,or hard copies of,permission to make digital,personal or classroom use,provided that copies are,software testing,this work for,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--7},
	Title = {{The Effect of Code Coverage on Fault Detection under Different Testing Profiles}},
	Year = {2005}}

@article{Franzotte2006,
	Author = {Franzotte, Ledyv{\^{a}}nia and Vergilio, Silvia Regina},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Franzotte, Vergilio - 2006 - SEKE - Applying Mutation Testing to XML Schemas.pdf:pdf},
	Journal = {SEKE},
	Title = {{Applying Mutation Testing to XML Schemas}},
	Year = {2006}}

@inproceedings{Offutt2006,
	Abstract = {This paper presents results from empirical studies of objectoriented, class level mutation operators, using the automated analysis and testing tool MuJava. Class mutation operators modify OO programming language features such as inheritance, polymorphism, dynamic binding and encap- sulation. This paper presents data from 866 classes in six open-source programs. Several new class-level mutation operators are defined in this paper and an analysis of the number of mutants generated is provided. Techniques for eliminating some equivalent mutants are described and data from an automated tool are provided. One important result is that class-level mutation operators yield far more equivalent mutants than traditional, statementlevel, operators. Another is that there are far fewer class-level mutants than statementlevel mutants. Together, these data suggest that mutation for inter-class testing can be practically affordable.},
	Address = {New York, New York, USA},
	Author = {Offutt, A Jefferson and Ma, Yu-Seung and Kwon, Yong-Rae},
	Booktitle = {AST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Ma, Kwon - 2006 - AST - The class-level mutants of MuJava.pdf:pdf},
	Isbn = {1595934081},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {78},
	Publisher = {ACM Press},
	Title = {{The class-level mutants of MuJava}},
	Year = {2006},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1138929.1138945},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1138929.1138945}}

@article{Belli2006,
	Abstract = {This paper attempts to subsume the existing great variety of mutation operations to two basic operations, insertion and omission and their combinations. These basic operations are applied to different elements of graph-based models of increasing representation power. A case study applies the approach to these models for generating mutants of different features and compares the fault detection capacity of the mutants generated. 1.},
	Author = {Belli, Fevzi and Budnik, Christof J. and Wong, Weichen Eric},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Belli, Budnik, Wong - 2006 - ISSREW - Basic Operations for Generating Behavioral Mutants.pdf:pdf},
	Isbn = {0-7695-2897-X},
	Journal = {ISSREW},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {nov},
	Pages = {9--9},
	Publisher = {Ieee},
	Title = {{Basic Operations for Generating Behavioral Mutants}},
	Year = {2006},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4144728},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/MUTATION.2006.2}}

@incollection{Ralf2006,
	Author = {Ralf, L},
	Booktitle = {Test. Commun. Syst.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ralf - 2006 - Testing of Communicating Systems - Controllable combinatorial coverage in grammar-based testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Controllable combinatorial coverage in grammar-based testing}},
	Year = {2006}}

@inproceedings{Namina,
	Abstract = {A set of mutation operators is ``sufficient'' if it can be used for most purposes to replace a larger set. We describe in detail an experimental procedure for determining a set of suf- ficient C language mutation operators. We also describe several statistical analyses that determine sufficient subsets with respect to several different criteria, based on standard techniques for variable reduction.We have begun to carry out our experimental procedure on seven standard C subject programs. We present preliminary results that indicate that the procedure and analyses are feasible and yield useful information.},
	Author = {Namin, Akbar Siami and Andrews, James H},
	Booktitle = {Work. Mutat. Anal.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin, Andrews - 2006 - Workshop on Mutation Analysis - Finding Sufficient Mutation Operators via Variable Reduction.pdf:pdf},
	Keywords = {MUTATION06,mutation,unread},
	Mendeley-Tags = {MUTATION06,mutation,unread},
	Title = {{Finding Sufficient Mutation Operators via Variable Reduction}},
	Year = {2006}}

@article{Harman2006,
	Abstract = {Software testing allows programmers to determine the quality of the software. Mutation testing is a branch of software testing which does more than this. It helps determine whether the test cases that have been created, effectively detect all the possible faults in the software. This allows the development of better test sets, thus, ensuring that maximum software quality is achieved. This may seem very inviting to software testers, but there is a major issue being faced which has hindered the widespread use of mutation testing. Mutation testing works by seeding faults in the software program. Various mutation operators are used to create these faulty programs. These programs are called mutants. The mutants depict software faults that may be caused by programmers while writing the software. Test cases are then executed on these mutants to determine if they have been killed or not. Test sets that kill all the mutants are considered to be good as they successfully detect all the possible program faults. Sometimes, it is difficult to kill all the mutants. The reason is that some of the mutants, although syntactically different than the original program, are still semantically the same. Any test case will not be able to differentiate between the original program and the mutant. Such mutants are called equivalent mutants. This thesis targets this issue by determining which mutation operators create mutants, which are more probable to create equivalent mutants. A tool called MuJava is used for this purpose. An empirical analysis has been carried out for this purpose, which helps determine which mutation operators develop more equivalent mutants.},
	Author = {Harman, Mark},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harman - 2006 - Unknown - An Evaluation of Mutation Operators for Equivalent Mutants.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {September},
	Pages = {1--99},
	Title = {{An Evaluation of Mutation Operators for Equivalent Mutants}},
	Year = {2006}}

@inproceedings{Xu2006,
	Author = {Xu, Shiyi},
	Booktitle = {PRDC},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Xu - 2006 - PRDC - A New Approach to Improving the Test Effectiveness in Software Testing Using Fault Collapsing.pdf:pdf},
	Isbn = {0-7695-2724-8},
	Keywords = {fault dominance,fault equivalence,mutation,mutation testing,software testing,testing effectiveness,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {2},
	Pages = {73--80},
	Publisher = {Ieee},
	Title = {{A New Approach to Improving the Test Effectiveness in Software Testing Using Fault Collapsing}},
	Year = {2006},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4041890},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/PRDC.2006.10}}

@article{Do2006,
	Abstract = {Regression testing is an important activity in the software life cycle, but it can also be very expensive. To reduce the cost of regression testing, software testers may prioritize their test cases so that those which are more important, by some measure, are run earlier in the regression testing process. One potential goal of test case prioritization techniques is to increase a test suite's rate of fault detection (how quickly, in a run of its test cases, that test suite can detect faults). Previous work has shown that prioritization can improve a test suite's rate of fault detection, but the assessment of prioritization techniques has been limited primarily to hand-seeded faults, largely due to the belief that such faults are more realistic than automatically generated (mutation) faults. A recent empirical study, however, suggests that mutation faults can be representative of real faults and that the use of hand-seeded faults can be problematic for the validity of empirical results focusing on fault detection. We have therefore designed and performed two controlled experiments assessing the ability of prioritization techniques to improve the rate of fault detection of test case prioritization techniques, measured relative to mutation faults. Our results show that prioritization can be effective relative to the faults considered, and they expose ways in which that effectiveness can vary with characteristics of faults and test suites. More importantly, a comparison of our results with those collected using hand-seeded faults reveals several implications for researchers performing empirical studies of test case prioritization techniques in particular and testing techniques in general. Index},
	Author = {Do, Hyunsook and Rothermel, Gregg},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Do, Rothermel - 2006 - Unknown - On the Use of Mutation Faults in Empirical Assessments of Test Case Prioritization Techniques.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{On the Use of Mutation Faults in Empirical Assessments of Test Case Prioritization Techniques}},
	Year = {2006}}

@article{Offutt1971,
	Abstract = {This paper presents an abstract view of mutation analysis. Mutation was originally thought of as making changes to program source, but similar kinds of changes have been applied to other artifacts, including program specifications, XML, and input languages. This paper argues that mutation analysis is actually a way to modify any software artifact based on its syntactic description, and is in the same family of test generation methods that create inputs from syntactic descriptions. The essential characteristic of mutation is that a syntactic description such as a grammar is used to create tests. We call this abstract view grammar-based testing, and view it as an interface, which mutation analysis implements. This shift in view allows mutation to be defined in a general way, yielding three benefits. First, it provides a simpler way to understand mutation. Second, it makes it easier to develop future applications of mutation analysis, such as finite state machines and use case collaboration diagrams. The third benefit, which due to space limitations is not explored in this paper, is ensuring that existing techniques are complete according to the criteria defined here.},
	Author = {Offutt, A Jefferson and Ammann, Paul and Liu, Lisa Ling},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt, Ammann, Liu - 2006 - Unknown - Mutation Testing implements Grammar-Based Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Testing implements Grammar-Based Testing}},
	Year = {2006}}

@article{Li2006,
	Author = {Li, Zhenmin and Tan, Lin and Wang, Xuanhui and Lu, Shan and Zhou, Yuanyuan and Zhai, Chengxiang},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Li et al. - 2006 - Unknown - Have Things Changed Now -- An Empirical Study of Bug Characteristics in Modern Open Source Software.pdf:pdf},
	Isbn = {1595935762},
	Keywords = {bug characteristics,bug de-,empirical study,mutation,open source,security,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Have Things Changed Now ? -- An Empirical Study of Bug Characteristics in Modern Open Source Software}},
	Year = {2006}}

@article{Derezinska2006,
	Author = {Derezinska, Anna},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezinska - 2006 - Unknown - Quality Assessment of Mutation Operators Dedicated for C{\#} Programs.pdf:pdf},
	Isbn = {0769527183},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Quality Assessment of Mutation Operators Dedicated for C{\#} Programs}},
	Year = {2006}}

@techreport{Bradbury2006,
	Author = {Bradbury, Jeremy S},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bradbury - 2006 - Unknown - Using Mutation for the Assessment and Optimization of Tests and Properties.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {1--8},
	Title = {{Using Mutation for the Assessment and Optimization of Tests and Properties}},
	Year = {2006}}

@article{Kapoor2006,
	Author = {Kapoor, Kalpesh},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kapoor - 2006 - Innovations in Systems and Software Engineering - Formal Analysis of Coupling Hypothesis for Logical Faults.pdf:pdf},
	Issn = {1614-5046},
	Journal = {Innov. Syst. Softw. Eng.},
	Keywords = {boolean specification,fault-based testing,logical fault,mutation testing,software testing},
	Month = {may},
	Number = {2},
	Pages = {80--87},
	Title = {{Formal Analysis of Coupling Hypothesis for Logical Faults}},
	Volume = {2},
	Year = {2006},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s11334-006-0002-z},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s11334-006-0002-z}}

@inproceedings{Mayer2006,
	Author = {Mayer, Johannes and Schneckenburger, C},
	Booktitle = {ISESE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mayer, Schneckenburger - 2006 - ISESE - An empirical analysis and comparison of random testing techniques.pdf:pdf},
	Isbn = {1595932186},
	Keywords = {adaptive random testing,f-measure,p-measure,random testing,runtime,testing effec-,tiveness},
	Pages = {105--114},
	Title = {{An empirical analysis and comparison of random testing techniques}},
	Year = {2006},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=1159751}}

@article{Dura2006,
	Abstract = {The injection of faults has been widely used to evaluate fault tolerance mechanisms and to assess the impact of faults in computer systems. However, the injection of software faults is not as well understood as other classes of faults (e.g., hardware faults). In this paper, we analyze how software faults can be injected (emulated) in a source-code independent manner. We specifically address important emulation requirements such as fault representativeness and emulation accuracy. We start with the analysis of an extensive collection of real software faults. We observed that a large percentage of faults falls into well-defined classes and can be characterized in a very precise way, allowing accurate emulation of software faults through a small set of emulation operators. A new software fault injection technique (G-SWFIT) based on emulation operators derived from the field study is proposed. This technique consists of finding key programming structures at the machine code-level where high-level software faults can be emulated. The fault- emulation accuracy of this technique is shown. This work also includes a study on the key aspects that may impact the technique accuracy. The portability of the technique is also discussed and it is shown that a high degree of portability can be achieved},
	Author = {Duraes, Joao A and Medeira, Henrique S},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Duraes, Medeira - 2006 - Unknown - Emulation of Software Faults A Field Data Study and a Practical Approach.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {11},
	Pages = {849--867},
	Title = {{Emulation of Software Faults : A Field Data Study and a Practical Approach}},
	Volume = {32},
	Year = {2006}}

@article{Andrews2006a,
	Author = {Andrews, James H and Briand, Lionel C and Labiche, Yvan and Namin, Akbar Siami},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Andrews et al. - 2006 - Unknown - Using Mutation Analysis for Assessing and Comparing Testing Coverage Criteria.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {8},
	Pages = {608--624},
	Title = {{Using Mutation Analysis for Assessing and Comparing Testing Coverage Criteria}},
	Volume = {32},
	Year = {2006}}

@article{Singh2006,
	Author = {Singh, RK and Chandra, Pravin and Singh, Yogesh},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{An evaluation of boolean expression testing techniques}},
	Year = {2006}}

@inproceedings{Ma2006,
	Author = {Ma, Yu-Seung and Harrold, Mary Jean and Kwon, Yong-Rae},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Harrold, Kwon - 2006 - Unknown - Evaluation of Mutation Testing for Object-Oriented Programs.pdf:pdf},
	Isbn = {159593085X},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {869--872},
	Title = {{Evaluation of Mutation Testing for Object-Oriented Programs}},
	Year = {2006}}

@phdthesis{Mouelhi2007,
	Author = {Mouelhi, Tejeddine},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mouelhi - 2007 - Unknown - Mutation analysis applied to security tests Master of research in computer science report.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {June},
	Title = {{Mutation analysis applied to security tests Master of research in computer science report}},
	Year = {2007}}

@article{May2007,
	Abstract = {We present an Immune Inspired Algorithm, based on CLONALG, for software test data evolution. Generated tests are evaluated using themutation testing adequacy criteria, and used to direct the search for new tests. The effectiveness of this algorithm is compared against an elitist Genetic Algorithm, with effectiveness measured by the number of mutant executions needed to achieve a specificmutation score. Results indicate that the Immune Inspired Approach is consistently more effective than the Genetic Algorithm, generating higher mutation scoring test sets in less computational expense.},
	Author = {May, Peter and Timmis, Jon and Mander, Keith},
	File = {:Users/rahul/Documents/Mendeley.Desktop/May, Timmis, Mander - 2007 - Unknown - Immune and Evolutionary Approaches to Software Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {336--347},
	Title = {{Immune and Evolutionary Approaches to Software Mutation Testing}},
	Year = {2007}}

@article{Derezinska2007,
	Author = {Derezinska, Anna},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Advanced Mutation Operators Applicable in C$\backslash${\#} Programs}},
	Year = {2007}}

@article{Smith2007,
	Author = {Smith, Ben H and Williams, Laurie},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Smith, Williams - 2007 - Unknown - An Empirical Evaluation of the MuJava Mutation Operators.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{An Empirical Evaluation of the MuJava Mutation Operators}},
	Year = {2007}}

@article{Eldh2007,
	Author = {Eldh, Sigrid and Punnekkat, Sasikumar and Hansson, Hans and J{\"{o}}nsson, Peter and Ab, Ericsson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Eldh et al. - 2007 - Unknown - Component Testing Is Not Enough - A Study of Software Faults in Telecom Middleware.pdf:pdf},
	Keywords = {fault classification,fault distribution,software,testing},
	Pages = {74--89},
	Title = {{Component Testing Is Not Enough - A Study of Software Faults in Telecom Middleware}},
	Year = {2007}}

@article{Namin2007,
	Author = {Namin, Akbar Siami and Andrews, James H},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin, Andrews - 2007 - 29th International Conference on Software Engineering (ICSE'07 Companion) - On Sufficiency of Mutants.pdf:pdf},
	Isbn = {0-7695-2892-9},
	Journal = {29th Int. Conf. Softw. Eng. (ICSE'07 Companion)},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Month = {may},
	Pages = {73--74},
	Publisher = {Ieee},
	Title = {{On Sufficiency of Mutants}},
	Year = {2007},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4222686},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSECOMPANION.2007.56}}

@article{Martin2007,
	Author = {Martin, Evan and Xie, Tao},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Martin, Xie - 2007 - Unknown - A Fault Model and Mutation Testing of Access Control Policies.pdf:pdf},
	Isbn = {9781595936547},
	Keywords = {ac-,analogy between traditional software,cess control policies,fault model,figure 1,mutation testing,test generation,testing and pol-},
	Pages = {667--676},
	Title = {{A Fault Model and Mutation Testing of Access Control Policies}},
	Year = {2007}}

@article{Ellims2007,
	Author = {Ellims, Michael and Ince, Darrel and Petre, Marian},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ellims, Ince, Petre - 2007 - Testing Academic and Industrial Conference Practice and Research Techniques - MUTATION (TAICPART-MUTATION 2.pdf:pdf},
	Isbn = {0-7695-2984-4},
	Journal = {Test. Acad. Ind. Conf. Pract. Res. Tech. - Mutat. (TAICPART-MUTATION 2007)},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Month = {sep},
	Pages = {185--192},
	Publisher = {Ieee},
	Title = {{The Csaw C Mutation Tool: Initial Results}},
	Year = {2007},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4344123},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TAIC.PART.2007.28}}

@article{Bradbury2007,
	Author = {Bradbury, Jeremy S and Cordy, James R. and Dingel, Juergen},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bradbury, Cordy, Dingel - 2007 - {\ldots} Techniques-MUTATION, {\ldots} - Comparative assessment of testing and model checking using program mutat.pdf:pdf},
	Journal = {{\ldots} Tech. {\ldots}},
	Title = {{Comparative assessment of testing and model checking using program mutation}},
	Year = {2007},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=4344126}}

@phdthesis{May2007a,
	Author = {May, Peter},
	File = {:Users/rahul/Documents/Mendeley.Desktop/May - 2007 - Unknown - Test Data Generation Two Evolutionary Approaches to Mutation Testing.pdf:pdf},
	Number = {May},
	Title = {{Test Data Generation : Two Evolutionary Approaches to Mutation Testing}},
	Year = {2007}}

@article{DuBousquet2007,
	Author = {du Bousquet, Lydie and Delaunay, Michel},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation analysis for Lustre programs: Fault model description and validation}},
	Year = {2007}}

@article{Kim2008,
	Author = {Kim, Sunghun and Whitehead, E James and Zhang, Yi},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kim, Whitehead, Zhang - 2008 - IEEE Transactions on Software Engineering - Classifying Software Changes Clean or Buggy.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--41},
	Title = {{Classifying Software Changes : Clean or Buggy ?}},
	Year = {2008}}

@article{Shahriar2008,
	Abstract = {Format String Bugs (FSBs) make an implementation vulnerable to numerous types of malicious attacks. Testing an implementation against FSBs can avoid consequences due to exploits of FSBs such as denial of services, corruption of application states, etc. Obtaining an adequate test data set is essential for testing of FSBs. An adequate test data set contains effective test cases that can reveal FSBs. Unfortunately, traditional techniques do not address the issue of adequate testing of an application for FSB. Moreover, the application of source code mutation has not been applied for testing FSB. In this work, we apply the idea of mutation-based testing technique to generate an adequate test data set for testing FSBs. Our work addresses FSBs related to ANSI C libraries. We propose eight mutation operators to force the generation of adequate test data set. A prototype mutation-based testing tool named MUFORMAT is developed to generate mutants automatically and perform mutation analysis. The proposed operators are validated by using four open source programs having FSBs. The results indicate that the proposed operators are effective for testing FSBs.},
	Author = {Shahriar, Hossain and Zulkernine, Mohammad},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Shahriar, Zulkernine - 2008 - Unknown - Mutation-based Testing of Format String Bugs School of Computing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {229--238},
	Title = {{Mutation-based Testing of Format String Bugs School of Computing}},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HASE.2008.8}}

@article{Mouelhi2008,
	Author = {Mouelhi, Tejeddine and Fleurey, Frank and Baudry, Benoit},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mouelhi, Fleurey, Baudry - 2008 - Unknown - A Generic Metamodel For Security Policies Mutation.pdf:pdf},
	Isbn = {9780769533889},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{A Generic Metamodel For Security Policies Mutation}},
	Year = {2008}}

@article{Smith2008,
	Abstract = {Mutation testing has traditionally been used as a defect injection technique to assess the effectiveness of a test suite as represented by a ``mutation score.'' Recently, mutation test tools have become more efficient, and research in mutation analysis is experiencing growth. Mutation analysis entails adding or modifying test cases until the test suite is sufficient to detect as many mutants as possible and the mutation score is satisfactory. The augmented test suite resulting from mutation analysis may reveal latent faults and provides a stronger test suite to detect future errors which might be injected. Software engineers often look for guidance on how to augment their test suite using information provided by statement and/or branch coverage tools. As the use of mutation analysis grows, software engineers will want to know how the emerging technique compares with and/or complements coverage analysis for guiding the augmentation of an automated test suite. Additionally, software engineers can benefit from an enhanced understanding of efficient mutation analysis techniques. To address this need for additional information, we conducted an empirical study of the use of mutation analysis on two open source projects. Our results indicate that a focused effort on increasing mutation score leads to a corresponding increase in statement and branch coverage to the point that all three measures reach a maximum but leave some types of code structures uncovered. Mutation analysis guides the creation of additional ``common programmer error'' tests beyond those written to increase statement and branch coverage. We also found that 74{\%} of our chosen set of mutation operators is useful on average for producing new tests. The remaining 26{\%} of mutation operators did not produce new test cases because their mutants were immediately detected by the initial test suite, indirectly detected by test suites we added to detect other mutants or were not able to be detected by any test.},
	Author = {Smith, Ben H and Williams, Laurie},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Smith, Williams - 2008 - Empirical Software Engineering - On guiding the augmentation of an automated test suite via mutation analysis.pdf:pdf},
	Issn = {1382-3256},
	Journal = {Empir. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {aug},
	Number = {3},
	Pages = {341--369},
	Title = {{On guiding the augmentation of an automated test suite via mutation analysis}},
	Volume = {14},
	Year = {2008},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s10664-008-9083-7},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s10664-008-9083-7}}

@article{Jaiswal2008,
	Author = {Jaiswal, Updesh Kumar},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jaiswal - 2008 - Unknown - Killing Same and Different Location Multiple Mutants.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {July},
	Title = {{Killing Same and Different Location Multiple Mutants}},
	Year = {2008}}

@unpublished{Schuler2008,
	Author = {Schuler, David and Dallmeier, Valentin and Zeller, Andreas},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Dallmeier, Zeller - 2008 - Unknown - Useful Mutations Violate Invariants --- Equivalent Mutants do not.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Useful Mutations Violate Invariants --- Equivalent Mutants do not}},
	Year = {2008}}

@inproceedings{Jia2008a,
	Abstract = {This paper introduces MILU, a C mutation testing tool designed for both first order and higher order mutation test- ing. All previous mutation testing tools apply all possible mutation operators to the program under test. By contrast, MILU allows customization of the set of mutation opera- tors to be applied. To reduce runtime cost, MILU uses a novel `test harness' technique to embed mutants and their associated test sets into a single-invocation procedure. 1.},
	Author = {Jia, Yue and Harman, Mark},
	Booktitle = {2008 Eighth IEEE Int. Work. Conf. Source Code Anal. Manip.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2008 - 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation - Constructing Subtle Fa.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2008 - 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation - Constructing Subtle(2).pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2008 - 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation - Constructing Subtle(3).pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2008 - 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation - Constructing Subtle(4).pdf:pdf},
	Isbn = {978-0-7695-3353-7},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {sep},
	Pages = {249--258},
	Publisher = {Ieee},
	Title = {{Constructing Subtle Faults Using Higher Order Mutation Testing}},
	Year = {2008},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4637557},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/SCAM.2008.36}}

@inproceedings{Jia2008,
	Abstract = {This paper introduces MILU, a C mutation testing tool designed for both first order and higher order mutation test- ing. All previous mutation testing tools apply all possible mutation operators to the program under test. By contrast, MILU allows customization of the set of mutation opera- tors to be applied. To reduce runtime cost, MILU uses a novel `test harness' technique to embed mutants and their associated test sets into a single-invocation procedure. 1.},
	Author = {Jia, Yue and Harman, Mark},
	Booktitle = {TAIC PART Test. Acad. Ind. Conf.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2008 - 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation - Constructing Subtle Fa.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{MILU : A Customizable , Runtime-Optimized Higher Order Mutation Testing}},
	Year = {2008}}

@inproceedings{Weissleder2008,
	Author = {Wei{\ss}leder, Stephan},
	Booktitle = {GI Jahrestagung},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wei{\ss}leder - 2008 - GI Jahrestagung - Partition-Oriented Test Generation Example Freight Elevator.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {199--204},
	Title = {{Partition-Oriented Test Generation Example : Freight Elevator}},
	Year = {2008}}

@article{Munkby2008,
	Author = {Munkby, Gustav and Schupp, Sibylle},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Improving Fault Injection of Soft Errors Using Program Dependencies}},
	Year = {2008}}

@unpublished{Ecott2008,
	Author = {Ecott, Stacey},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ecott - 2008 - Unknown - Fault-based testing of Web Applications.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {1--3},
	Title = {{Fault-based testing of Web Applications}},
	Year = {2008}}

@article{Guderlei2008,
	Author = {Guderlei, R and Just, Rene},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Journal = {Softw. Test. {\ldots}},
	Title = {{Benchmarking testing strategies with tools from mutation analysis}},
	Year = {2008},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=4567034}}

@article{Shahriar2008a,
	Abstract = {Testing is an indispensable mechanism for assuring software quality. One of the key issues in testing is to obtain a test data set that is able to effectively test an implementation. An adequate test data set consists of test cases that can expose faults in a software implementation. Mutation- based testing can be employed to obtain adequate test data sets, and numerous mutation operators have been proposed to date to measure the adequacy of test data sets that reveal functional faults. However, implementations that pass functionality tests are still vulnerable to malicious attacks. Despite the rigorous use of various existing testing techniques, many vulnerabilities are discovered after the deployment of software implementations, such as buffer overflows (BOF), SQL injections, and format string bugs (FSB). Successful exploitations of these vulnerabilities may result in severe consequences such as denial of services, application state corruptions, and information leakage. Many approaches have been proposed to detect these vulnerabilities. Unfortunately, very few approaches address the issue of testing implementations against vulnerabilities. Moreover, these approaches do not provide an indication whether a test data set is adequate for vulnerability testing or not. We believe that bringing the idea of traditional functional test adequacy to vulnerability testing can help address the issue of test adequacy. In this thesis, we apply the idea of mutation-based adequate testing to perform vulnerability testing of buffer overflows, SQL injections, and format string bugs. We propose mutation operators to force the generation of adequate test data sets for these vulnerabilities. The operators mutate source code to inject the vulnerabilities in the library function calls and unsafe implementation language elements. The mutants generated by the operators are killed by test cases that expose these vulnerabilities. We propose distinguishing or killing criteria for mutants that consider varying symptoms of exploitations. Three prototype tools are developed to automatically generate mutants and perform mutation analysis with input test cases and the effectiveness of the proposed operators is evaluated on several open source programs containing known vulnerabilities. The results indicate that the proposed operators are effective for testing the vulnerabilities, and the mutation-based vulnerability testing process ensures the quality of the applications against these vulnerabilities.},
	Author = {Shahriar, Hossain},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Shahriar - 2008 - Unknown - Mutation based Testing of Buffer Overflows, SQL Injections and Format String Bugs.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation based Testing of Buffer Overflows, SQL Injections and Format String Bugs}},
	Year = {2008}}

@inproceedings{Kupferman2008,
	Author = {Kupferman, Orna and Li, Wenchao and Seshia, Sanjit A},
	Booktitle = {Int. Conf. Form. Methods Comput. Aided Des.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kupferman, Li, Seshia - 2008 - International Conference on Formal Methods in Computer Aided Design - A Theory of Mutations with Applicat.pdf:pdf},
	Title = {{A Theory of Mutations with Applications to Vacuity , Coverage , and Fault Tolerance}},
	Year = {2008}}

@article{Hussain2008,
	Author = {Hussain, Shamila},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hussain - 2008 - Unknown - Mutation Clustering.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Clustering}},
	Year = {2008}}

@phdthesis{Namin2008a,
	Author = {Namin, Akbar Siami},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin - 2008 - Unknown - Mutation Analysis in Software Testing.pdf:pdf},
	Isbn = {9780494430927},
	Title = {{Mutation Analysis in Software Testing}},
	Year = {2008}}

@inproceedings{Namin2008,
	Abstract = {Mutants are automatically-generated, possibly faulty variants of programs. The mutation adequacy ratio of a test suite is the ratio of non-equivalent mutants it is able to identify to the total number of non-equivalent mutants. This ratio can be used as a measure of test effectiveness. However, it can be expensive to calculate, due to the large number of different mutation operators that have been proposed for generating the mutants. In this paper, we address the problem of finding a small set of mutation operators which is still sufficient for measuring test ef- fectiveness. We do this by defining a statistical analysis procedure that allows us to identify such a set, together with an associated lin- ear model that predicts mutation adequacy with high accuracy. We confirm the validity of our procedure through cross-validation and the application of other, alternative statistical analyses. Categories},
	Author = {Namin, Akbar Siami and Andrews, James H and Murdoch, Duncan J},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin, Andrews, Murdoch - 2008 - ICSE - Sufficient Mutation Operators for Measuring Test Effectiveness.pdf:pdf},
	Isbn = {9781605580791},
	Keywords = {mutation,mutation analysis,testing effectiveness,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {351--360},
	Title = {{Sufficient Mutation Operators for Measuring Test Effectiveness}},
	Year = {2008}}

@article{Basso2009,
	Author = {Basso, Tania and Moraes, Regina L O and Sanches, Bruno P and Jino, Mario},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Basso et al. - 2009 - Unknown - An Investigation of Java Faults Operators Derived from a Field Data Study on Java Software Faults.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{An Investigation of Java Faults Operators Derived from a Field Data Study on Java Software Faults}},
	Year = {2009}}

@article{Aichernig2009,
	Abstract = {This paper presents a theory of testing that integrates into Hoare and He's Unifying Theory of Programming (UTP). We give test cases a denotational semantics by viewing them as specification predicates. This reformulation of test cases allows for relating test cases via refinement to specifications and programs. Having such a refinement order that integrates test cases, we develop a testing theory for fault-based testing. Fault-based testing uses test data designed to demonstrate the absence of a set of pre-specified faults. A well-known fault-based technique is mutation testing. In mutation testing, first, faults are injected into a program by altering (mutating) its source code. Then, test cases that can detect these errors are designed. The assumption is that other faults will be caught, too. In this paper, we apply the mutation technique to both, specifications and programs. Using our theory of testing, two new test case generation laws for detecting injected (anticipated) faults are presented: one is based on the semantic level of UTP design predicates, the other on the algebraic properties of a small programming language.},
	Author = {Aichernig, Bernhard K. and Jifeng, He},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Aichernig, Jifeng - 2009 - Formal Aspects of Computing - Mutation testing in UTP.pdf:pdf},
	Journal = {Form. Asp. Comput.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation testing in UTP}},
	Year = {2009}}

@article{Hook2009,
	Author = {Hook, Daniel Alan and Kelly, Diane},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hook, Kelly - 2009 - Computing in Science {\&} Engineering - Mutation Sensitivity Testing.pdf:pdf},
	Issn = {1521-9615},
	Journal = {Comput. Sci. Eng.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {40--47},
	Title = {{Mutation Sensitivity Testing}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5232788},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/MCSE.2009.157}}

@article{Li2009,
	Abstract = {With recent increased expectations for quality, and the growth of agile processes and test driven development, de- velopers are expected to do more and more effective unit testing. Yet, our knowledge of when to use the various unit level test criteria is incomplete. The paper presents results from a comparison of four unit level software test- ing criteria. Mutation testing, prime path coverage, edge- pair coverage, and all-uses testing were compared on two bases: the number of seeded faults found and the num- ber of tests needed to satisfy the criteria. The compari- son used a collection of Java classes taken from various sources and hand-seeded faults. Tests were designed and generatedmostly by hand with help from tools that compute test requirements and muJava. The findings are that mu- tation tests detected more faults and the other three crite- ria were very similar. The paper also presents a secondary measure, a cost benefit ratio, computed as the number of tests needed to detect each fault. Surprisingly, mutation re- quired the fewest number of tests. The paper also discusses some specific faults that were not found and presents anal- ysis for why not.},
	Author = {Li, Nan and Praphamontripong, Upsorn and Offutt, A Jefferson},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Li, Praphamontripong, Offutt - 2009 - ICSTW - An Experimental Comparison of Four Unit Test Criteria Mutation, Edge-Pair, All-Uses and Pr.pdf:pdf},
	Isbn = {978-0-7695-3671-2},
	Journal = {ICSTW},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {220--229},
	Publisher = {Ieee},
	Title = {{An Experimental Comparison of Four Unit Test Criteria: Mutation, Edge-Pair, All-Uses and Prime Path Coverage}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4976390},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2009.30}}

@article{Hamill2009,
	Author = {Hamill, Maggie and Goseva-Popstojanova, Katerina},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hamill, Goseva-Popstojanova - 2009 - IEEE Transactions on Software Engineering - Common Trends in Software Fault and Failure Data.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {4},
	Pages = {484--496},
	Title = {{Common Trends in Software Fault and Failure Data}},
	Volume = {35},
	Year = {2009}}

@article{Jay2009,
	Abstract = {Researchers have often commented on the high correlation between McCabe's Cyclomatic Complexity (CC) and lines of code (LOC). Many have believed this correlation high enough to justify adjusting CC by LOC or even substituting LOC for CC. However, from an empirical standpoint the relationship of CC to LOC is still an open one. We undertake the largest statistical study of this relationship to date. Employing modern regression techniques, we find the linearity of this relationship has been severely underestimated, so much so that CC can be said to have absolutely no explana-tory power of its own. This research presents evidence that LOC and CC have a stable practically perfect linear rela-tionship that holds across programmers, languages, code paradigms (procedural versus object-oriented), and software processes. Linear models are developed relating LOC and CC. These models are verified against over 1.2 million randomly selected source files from the SourceForge code repository. These files represent software projects from three target languages (C, C++, and Java) and a variety of programmer experience levels, software architectures, and de-velopment methodologies. The models developed are found to successfully predict roughly 90{\%} of CC's variance by LOC alone. This suggest not only that the linear relationship between LOC and CC is stable, but the aspects of code complexity that CC measures, such as the size of the test case space, grow linearly with source code size across lan-guages and programming paradigms.},
	Annote = {cor(log(ccn){\~{}}log(loc)) = 0.9},
	Author = {Jay, Graylin and Hale, Joanne E and Smith, Randy K and Hale, David and Kraft, Nicholas A and Ward, Charles},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jay et al. - 2009 - Journal of Software Engineering {\&} Applications - Cyclomatic Complexity and Lines of Code Empirical Evidence of a St.pdf:pdf},
	Journal = {J. Softw. Eng. Appl.},
	Keywords = {cyclomatic complexity,mutation,software complexity,software metrics,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {October},
	Pages = {137--143},
	Title = {{Cyclomatic Complexity and Lines of Code : Empirical Evidence of a Stable Linear Relationship}},
	Volume = {2009},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.4236/jsea.2009.23020}}

@inproceedings{Wang2009a,
	Abstract = {Data from projects worldwide show that many software projects fail and most are completed late or over budget. Unit testing is a simple but effective technique to improve software in terms of quality, flexibility, and time-to-market. A key idea of unit testing is that each piece of code needs its own tests and the best person to design those tests is the developer who wrote the software. However, generating tests for each unit by hand is very expensive, possibly pro- hibitively so. Automatic test data generation is essential to support unit testing and as unit testing is achievingmore at- tention, developers are using automated unit test data gen- eration tools more often. However, developers have very little information about which tools are effective. This ex- periment compared three well-known public-accessible unit test data generation tools, JCrasher, TestGen4j, and JUB. We applied them to Java classes and evaluated them based on their mutation scores. As a comparison, we created two additional sets of tests for each class. One test set con- tained random values and the other contained values to sat- isfy edge coverage. Results showed that the automatic test data generation tools generated tests with almost the same mutation scores as the random tests},
	Author = {Wang, Shuang and Offutt, A Jefferson},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wang, Offutt - 2009 - ICSTW - Comparison of Unit-Level Automated Test Generation Tools.pdf:pdf},
	Isbn = {978-0-7695-3671-2},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {210--219},
	Publisher = {Ieee},
	Title = {{Comparison of Unit-Level Automated Test Generation Tools}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4976389},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2009.36}}

@inproceedings{Grun2009,
	Author = {Grun, Bernhard J M and Schuler, David and Zeller, Andreas},
	Booktitle = {ICSTW},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Grun, Schuler, Zeller - 2009 - ICSTW - The Impact of Equivalent Mutants.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{The Impact of Equivalent Mutants}},
	Year = {2009}}

@article{Smitha,
	Abstract = {Mutation testing has historically been used to assess the fault-finding effectiveness of a test suite or other verification technique. Mutation analysis, rather, entails augmenting a test suite to detect all killable mutants. Concerns about the time efficiency of mutation analysis may prohibit its widespread, practical use. The goal of our research is to assess the effectiveness of the mutation analysis process when used by software testers to augment a test suite to obtain higher statement coverage scores. We conducted two empirical studies and have shown that mutation analysis can be used by software testers to effectively produce new test cases and to improve statement coverage scores in a feasible amount of time. Additionally, we find that our user study participants view mutation analysis as an effective but relatively expensive technique for writing new test cases. Finally, we have shown that the choice of mutation tool and operator set can play an important role in determining how efficient mutation analysis is for producing new test cases. 1.},
	Author = {Smith, Ben H and Williams, Laurie},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Smith, Williams - 2009 - Journal of Systems and Software - Should software testers use mutation analysis to augment a test set.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Smith, Williams - 2009 - Journal of Systems and Software - Should software testers use mutation analysis to augment a test set.pdf:pdf},
	Journal = {J. Syst. Softw.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Should software testers use mutation analysis to augment a test set?}},
	Year = {2009},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121209001368}}

@article{Polo2009,
	Abstract = {Although powerful, mutation is a computationally very expensive testing technique. In fact, its three main stages (mutant generation, mutant execution and result analysis) require many resources to be successfully accomplished. Thus, researchers have made important efforts to reduce its costs. This paper represents an additional effort in this sense. It describes the results of two experiments in which, by means of combining the original set of mutants and therefore obtaining a new set of mutants---each one with two faults---the number of mutants used is reduced to half. Results lead to believe that mutant combination does not decrease the quality of the test suite, whereas it supposes important savings in mutant execution and result analysis.},
	Author = {Polo, Macario and Piattini, Mario and Garcia-Rodriguez, Ignacio},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Polo, Piattini, Garcia-Rodriguez - 2009 - Unknown - Decreasing the cost of mutation testing with second-order mutants.pdf:pdf},
	Keywords = {cost reduction,mutant reduction,mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {June 2008},
	Pages = {111--131},
	Title = {{Decreasing the cost of mutation testing with second-order mutants}},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/stvr}}

@inproceedings{Delamare2009,
	Author = {Delamare, Romain and Baudry, Benoit and Rennes, Irisa Inria and Traon, Yves Le and Bretagne, It-telecom},
	Booktitle = {ICSTW},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delamare et al. - 2009 - ICSTW - AjMutator A Tool For The Mutation Analysis Of AspectJ Pointcut Descriptors.pdf:pdf},
	Title = {{AjMutator : A Tool For The Mutation Analysis Of AspectJ Pointcut Descriptors}},
	Year = {2009}}

@article{Jia2009,
	Abstract = {This paper introduces a new paradigm for Mutation Testing, which we call Higher Order Mutation Testing (HOM Testing). Traditional Mutation Test- ing considers only first order mutants, created by the injection of a single fault. Often these first order mutants denote trivial faults that are easily killed. Higher order mutants are created by the insertion of two or more faults. The paper introduces the concept of a subsuming HOM; one that is harder to kill than the first order mutants from which it is constructed. By definition, subsuming HOMs denote subtle fault combinations. The paper reports the results of an empirical study of HOM Testing using ten pro- grams, including several non trivial real--world subjects for which test suites are available.},
	Author = {Jia, Yue and Harman, Mark},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2009 - Information and Software Technology - Higher Order Mutation Testing.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2009 - Information and Software Technology - Higher Order Mutation Testing(2).pdf:pdf},
	Issn = {09505849},
	Journal = {Inf. Softw. Technol.},
	Keywords = {higher order mutant,mutation,mutation testing,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {oct},
	Number = {10},
	Pages = {1379--1393},
	Publisher = {Elsevier B.V.},
	Title = {{Higher Order Mutation Testing}},
	Volume = {51},
	Year = {2009},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0950584909000688},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.infsof.2009.04.016}}

@article{Adler2009,
	Address = {New York, New York, USA},
	Author = {Adler, Yoram and Farchi, Eitan and Klausner, Moshe and Pelleg, Dan and Raz, Orna and Shochat, Moran and Ur, Shmuel and Zlotnick, Aviad},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Adler et al. - 2009 - ISSTA - Advanced code coverage analysis using substring holes.pdf:pdf},
	Isbn = {9781605583389},
	Journal = {ISSTA},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {37},
	Publisher = {ACM Press},
	Title = {{Advanced code coverage analysis using substring holes}},
	Year = {2009},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1572272.1572278},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1572272.1572278}}

@inproceedings{Schuler,
	Abstract = {Mutation testing measures the adequacy of a test suite by seeding artificial defects (mutations) into a program. If a mutation is not detected by the test suite, this usually means that the test suite is not adequate. However, it may also be that the mutant keeps the program's semantics unchanged---and thus cannot be detected by any test. Such equivalent mutants have to be eliminated manually, which is tedious. We assess the impact of mutations by checking dynamic invari- ants. In an evaluation of our JAVALANCHE framework on seven industrial-size programs, we found that mutations that violate in- variants are significantly more likely to be detectable by a test suite. As a consequence, mutations with impact on invariants should be focused upon when improving test suites. With less than 3{\%} of equivalent mutants, our approach provides an efficient, precise, and fully automatic measure of the adequacy of a test suite.},
	Author = {Schuler, David and Dallmeier, Valentin and Zeller, Andreas},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Dallmeier, Zeller - 2009 - ISSTA - Efficient Mutation Testing by Checking Invariant Violations.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Schuler, Dallmeier, Zeller - 2009 - ISSTA - Efficient Mutation Testing by Checking Invariant Violations(2).pdf:pdf},
	Isbn = {9781605583389},
	Keywords = {and therefore is likely,code,detect the seeded defect,dynamic invariants,equivalent mutants,ilar,mutation,mutation testing,such,test managers can use,to miss sim-,true defects in the,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {69--79},
	Title = {{Efficient Mutation Testing by Checking Invariant Violations}},
	Year = {2009}}

@article{Andres2009,
	Author = {Andres, Cesar and Merayo, Mercedes G. and Molinero, Carlos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Andres, Merayo, Molinero - 2009 - 2009 International Conference on Software Testing, Verification, and Validation Workshops - Advantages.pdf:pdf},
	Isbn = {978-0-7695-3671-2},
	Journal = {2009 Int. Conf. Softw. Testing, Verif. Valid. Work.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {230--239},
	Publisher = {Ieee},
	Title = {{Advantages of Mutation in Passive Testing: An Empirical Study}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4976391},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2009.33}}

@inproceedings{Namin,
	Author = {Namin, Akbar Siami and Andrews, James H},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin, Andrews - 2009 - ISSTA - The Influence of Size and Coverage on Test Suite.pdf:pdf},
	Isbn = {9781605583389},
	Keywords = {coverage criteria,mutation,statistical analysis,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {57--67},
	Title = {{The Influence of Size and Coverage on Test Suite}},
	Year = {2009}}

@article{Derezinska2009,
	Author = {Derezi{\'{n}}ska, A},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezi{\'{n}}ska - 2009 - IMCSIT - An experimental case study to applying mutation analysis for SQL queries.pdf:pdf},
	Isbn = {9788360810224},
	Journal = {IMCSIT},
	Pages = {559--566},
	Title = {{An experimental case study to applying mutation analysis for SQL queries}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=5352785}}

@article{Shahriar2009,
	Author = {Shahriar, Hossain and Zulkernine, Mohammad},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{MUTEC: Mutation-based Testing of Cross Site Scripting}},
	Year = {2009}}

@article{Shan2009,
	Author = {Shan, Lijun},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Shan - 2009 - Computer - Generating Structurally Complex Test Cases by Data Mutation A Case Study of Testing an Automated Modelling Too.pdf:pdf},
	Journal = {Computer (Long. Beach. Calif).},
	Pages = {1--20},
	Title = {{Generating Structurally Complex Test Cases by Data Mutation : A Case Study of Testing an Automated Modelling Tool}},
	Year = {2009}}

@article{Roy2009,
	Author = {Roy, Chanchal K. and Cordy, James R.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Roy, Cordy - 2009 - 2009 International Conference on Software Testing, Verification, and Validation Workshops - A MutationInjection-Base.pdf:pdf},
	Isbn = {978-0-7695-3671-2},
	Journal = {2009 Int. Conf. Softw. Testing, Verif. Valid. Work.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {157--166},
	Publisher = {Ieee},
	Title = {{A Mutation/Injection-Based Automatic Framework for Evaluating Code Clone Detection Tools}},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4976382},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2009.18}}

@article{Ji2009,
	Author = {Ji, Changbin and Chen, Zhenyu and Xu, Baowen and Zhao, Zhihong},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ji et al. - 2009 - SEKE - A Novel Method of Mutation Clustering Based on Domain Analysis.pdf:pdf},
	Journal = {SEKE},
	Pages = {1--6},
	Title = {{A Novel Method of Mutation Clustering Based on Domain Analysis.}},
	Year = {2009},
	Bdsk-Url-1 = {http://www.researchgate.net/publication/221391313%7B%5C_%7DEnhancing%7B%5C_%7DProperty%7B%5C_%7DSpecification%7B%5C_%7DTools%7B%5C_%7DWith%7B%5C_%7DValidation%7B%5C_%7DTechniques/file/3deec52af54ccf046e.pdf%7B%5C#%7Dpage=447}}

@article{Suarez-cabal2009,
	Author = {Suarez-cabal, Ma Jose and Tuya, Javier},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Suarez-cabal, Tuya - 2009 - Unknown - Structural Coverage Criteria for Testing SQL Queries.pdf:pdf},
	Keywords = {database testing,mutation,sql testing,test adequacy criteria,test coverage},
	Mendeley-Tags = {mutation},
	Number = {3},
	Pages = {584--619},
	Title = {{Structural Coverage Criteria for Testing SQL Queries}},
	Volume = {15},
	Year = {2009}}

@article{Ma2009,
	Abstract = {Although mutation testing is potentially powerful, it is a computationally expensive testing method. To investigate how we can reduce the cost of object-oriented mutation testing, we have conducted empirical studies on class mutation operators. We applied class mutation operators to 866 classes contained in six open-source programs. An analysis of the number and the distribution of class mutants generated and preliminary data on the effectiveness of some operators are provided. Our study shows that the overall number of class mutants is smaller than for traditional mutants, which offers the possibility that class mutation can be made practically affordable. Keywords:},
	Author = {Ma, Yu-Seung and Kwon, Yong-rae and Kim, Sang-woon},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Kwon, Kim - 2009 - Unknown - Statistical Investigation on Class Mutation Operators.pdf:pdf},
	Keywords = {class,mutation,mutation testing,object-oriented,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {2},
	Pages = {140--150},
	Title = {{Statistical Investigation on Class Mutation Operators}},
	Volume = {31},
	Year = {2009}}

@phdthesis{Hook2009a,
	Author = {Hook, Daniel Alan},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hook - 2009 - Unknown - Using Code Mutation to Study Code Faults in Scientific Software.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {April},
	Title = {{Using Code Mutation to Study Code Faults in Scientific Software}},
	Year = {2009}}

@inproceedings{Groce2009a,
	Author = {Groce, Alex},
	Booktitle = {WODA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce - 2009 - WODA - ( Quickly ) Testing the Tester via Path Coverage.pdf:pdf},
	Isbn = {9781605586564},
	Keywords = {evaluation of test systems,mutation,regression test-,test frameworks,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {22--28},
	Title = {{( Quickly ) Testing the Tester via Path Coverage}},
	Year = {2009}}

@article{Abraham2009,
	Abstract = {Based on 1) research into mutation testing for general-purpose programming languages and 2) spreadsheet errors that have been reported in the literature, we have developed a suite of mutation operators for spreadsheets. We present an evaluation of the mutation adequacy of definition-use adequate test suites generated by a constraint-based automatic test-case generation system we have developed in previous work. The results of the evaluation suggest additional constraints that can be incorporated into the system to target mutation adequacy. In addition to being useful in mutation testing of spreadsheets, the operators can be used in the evaluation of error-detection tools and also for seeding spreadsheets with errors for empirical studies. We describe two case studies where the suite of mutation operators helped us carry out such empirical evaluations. The main contribution of this paper is a suite of mutation operators for spreadsheets that can be used for performing empirical evaluations of spreadsheet tools to indicate ways in which the tools can be improved.},
	Author = {Abraham, R and Erwig, Martin},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Abraham, Erwig - 2009 - IEEE Transactions on Software Engineering - Mutation Operators for Spreadsheets.pdf:pdf},
	Issn = {0098-5589},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {jan},
	Number = {1},
	Pages = {94--108},
	Title = {{Mutation Operators for Spreadsheets}},
	Volume = {35},
	Year = {2009},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4609389},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TSE.2008.73}}

@inproceedings{Xie,
	Abstract = {Recently parameterized unit testing has emerged as a promising and effective methodology to allow the separa- tion of (1) specifying external, black-box behavior (e.g., as- sumptions and assertions) by developers and (2) generat- ing and selecting internal, white-box test inputs (i.e., high- code-covering test inputs) by tools. A parameterized unit test (PUT) is simply a test method that takes parameters, specifies assumptions on the parameters, calls the code un- der test, and specifies assertions. The test effectiveness of PUTs highly depends on the way that they are written by developers. For example, if stronger assumptions are specified, only a smaller scope of test in- puts than intended are generated by tools, leading to false negatives in terms of fault detection. If weaker assertions are specified, erroneous states induced by the test execution do not necessarily cause assertion violations, leading to false negatives. Detecting these false negatives is challeng- ing since the insufficiently written PUTs would just pass. In this paper, we propose a novel mutation analysis approach for analyzing PUTs written by developers and identifying likely locations in PUTs for improvement. The proposed approach is a first step towards helping developers write better PUTs in practice.},
	Author = {Xie, Tao and Tillmann, Nikolai and Halleux, Jonathan De},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Xie, Tillmann, Halleux - 2009 - Unknown - Mutation Analysis of Parameterized Unit Tests.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Analysis of Parameterized Unit Tests}},
	Year = {2009}}

@article{Approach2009,
	Abstract = {Mutation Testing is considered to be one of the most powerful techniques for unit testing and at the same time one of the most expensive. The principal expense of mutation is the vast number of imposed test requirements, many of which cannot be satisfied. In order to overcome these limitations, researchers have proposed many cost reduction techniques, such as selective mutation, weak mutation and a novel approach based on mutant combination, which combines first order mutants to generate second order ones. An experimental comparison involving weak mutation, strong mutation and various proposed strategies was conducted. The experiment shows that all proposed approaches are quite effective in general as they result in high collateral coverage of strong mutation (approximately 95{\%}), while recording remarkable effort savings. Additionally, the results suggest that some of the proposed approaches are more effective than others making it possible to reduce the mutation testing application cost with only a limited impact on its effectiveness. 1},
	Author = {Papadakis, Mike and Malevris, Nicos and Kintis, Marinos},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Malevris, Kintis - 2009 - Unknown - Mutation Testing Strategies A Collateral Approach.pdf:pdf},
	Keywords = {Abstract:,Mutation testing,collateral coverage,higher order mutation,mutation,weak mutation},
	Mendeley-Tags = {mutation},
	Title = {{Mutation Testing Strategies: A Collateral Approach}},
	Year = {2009}}

@article{Simao2009,
	Author = {Simao, Adenilso da Silva and Maldonado, Jose Carlos and {da Silva Bigonha}, Roberto},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A transformational language for mutant description}},
	Year = {2009}}

@inproceedings{Untch2009,
	Abstract = {Mutation analysis evaluates the quality of a test suite based on its ability to reveal simple faults, termed mutations, in- jected in the program under test. Unfortunately, the need to execute many slightly different versions, or mutants, of a program makes mutation analysis a computationally expen- sive technique. This paper reports on a promising approach that reduces the cost of mutation analysis by reducing the number of mutants that need to be executed.},
	Author = {Untch, Roland H},
	Booktitle = {ACMSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Untch - 2009 - ACMSE - On reduced neighborhood mutation analysis using a single mutagenic operator.pdf:pdf},
	Isbn = {9781605584218},
	Keywords = {constrained mutation,mutation,mutation analysis,reduced neighborhood mutation,reviewed,software testing,sufficient mutant operators,unread},
	Mendeley-Tags = {mutation,reviewed,unread},
	Pages = {1--4},
	Title = {{On reduced neighborhood mutation analysis using a single mutagenic operator}},
	Year = {2009}}

@article{Fraser2010,
	Address = {New York, New York, USA},
	Author = {Fraser, Gordon and Zeller, Andreas},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Fraser, Zeller - 2010 - Proceedings of the 19th international symposium on Software testing and analysis - ISSTA '10 - Mutation-driven g.pdf:pdf},
	Isbn = {9781605588230},
	Journal = {Proc. 19th Int. Symp. Softw. Test. Anal. - ISSTA '10},
	Keywords = {Mutation analysis, test case generation, unit test},
	Pages = {147},
	Publisher = {ACM Press},
	Title = {{Mutation-driven generation of unit tests and oracles}},
	Year = {2010},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1831708.1831728},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1831708.1831728}}

@phdthesis{Analysis2010,
	Abstract = {Mutation testing is known as a very useful technique for measuring the effectiveness of a test data set and finding weak points of the test set. Mutation testing produces huge number of programs, called mutants, that are almost identical to the original program except only one statement. Equivalent mutants are mutants which result same output to the original program with any test data. Equivalent mutants are produced naturally in mutation testing process, and equivalent mutants are not detected by any test data. Therefore, an equivalent mutant degrades the effectiveness of mutation testing. Elimination of equivalent mutants is a very important problem in mutation testing. In this paper, we proposed three kinds of methods for detecting class-level equivalent mutants. These methods judge the equivalency of mutants through structural informations and behavioral information of the original program and mutants using static analysis. And we showed the effectiveness of our approach through experiments specifically designed for this research. We found that our approach can detect not a few of equivalent mutants and expected that the cost of mutation testing can be saved considerably. i},
	Author = {Jang, Won Ho},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jang - 2010 - Unknown - Equivalent Mutation Detection Methods for Class Level Mutation Analysis.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Equivalent Mutation Detection Methods for Class Level Mutation Analysis}},
	Year = {2010}}

@inproceedings{Kintis2010,
	Abstract = {Mutation testing while being a successful fault revealing technique for unit testing, it is a rather expensive one for practical use. To bridge these two aspects there is a need to establish approximation techniques able to reduce its expenses while maintaining its effectiveness. In this paper several second order mutation testing strategies are introduced, assessed and compared along with weak mutation against strong. The experimental results suggest that they both constitute viable alternatives for mutation as they establish considerable effort reductions without greatly affecting the test effectiveness. The experimental assessment of weak mutation suggests that it reduces significantly the number of the produced equivalent mutants on the one hand and that the test criterion it provides is not as weak as is thought to be on the other. Finally, an approximation of the number of first order mutants needed to be killed in order to also kill the original mutant set is presented. The findings indicate that only a small portion of a set of mutants needs to be targeted in order to be killed while the rest can be killed collaterally.},
	Author = {Kintis, Marinos and Papadakis, Mike and Malevris, Nicos},
	Booktitle = {2010 Asia Pacific Softw. Eng. Conf.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis, Papadakis, Malevris - 2010 - 2010 Asia Pacific Software Engineering Conference - Evaluating Mutation Testing Alternatives A Coll.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Kintis, Papadakis, Malevris - 2010 - 2010 Asia Pacific Software Engineering Conference - Evaluating Mutation Testing Alternatives A Coll.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Kintis, Papadakis, Malevris - 2010 - 2010 Asia Pacific Software Engineering Conference - Evaluating Mutation Testing Alternatives A Coll.pdf:pdf},
	Isbn = {978-1-4244-8831-5},
	Issn = {15301362},
	Keywords = {- mutation testing,Collateral coverage,Higher order mutation,Mutation testing,Weak mutation,collateral coverage,higher order mutation,mutation,printed,reviewed,unread,weak},
	Mendeley-Tags = {mutation,printed,reviewed,unread},
	Month = {nov},
	Pages = {300--309},
	Publisher = {Ieee},
	Title = {{Evaluating Mutation Testing Alternatives: A Collateral Experiment}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5693206},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/APSEC.2010.42}}

@article{Debroy2010,
	Author = {Debroy, Vidroha and Wong, Weichen Eric},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Debroy, Wong - 2010 - 2010 Third International Conference on Software Testing, Verification and Validation - Using Mutation to Automatic.pdf:pdf},
	Isbn = {978-1-4244-6435-7},
	Journal = {2010 Third Int. Conf. Softw. Testing, Verif. Valid.},
	Keywords = {even if the above,execution can be very,expensive and the number,fault localization,fault-fixing,mutant generation and,mutation,of possible,program debugging,software testing,were possible},
	Mendeley-Tags = {mutation},
	Pages = {65--74},
	Publisher = {Ieee},
	Title = {{Using Mutation to Automatically Suggest Fixes for Faulty Programs}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5477098},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2010.66}}

@inproceedings{Donaldson2010,
	Author = {Donaldson, Alastair F and He, Nannan and Kroening, Daniel and Philipp, R},
	Booktitle = {FMCO},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Donaldson et al. - 2010 - FMCO - Tightening Test Coverage Metrics A Case Study in Equivalence Checking using k -Induction.pdf:pdf},
	Title = {{Tightening Test Coverage Metrics : A Case Study in Equivalence Checking using k -Induction}},
	Year = {2010}}

@article{Belli2010,
	Author = {Belli, Fevzi and G{\"{u}}ler, Nevin and Hollmann, Axel},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Belli, G{\"{u}}ler, Hollmann - 2010 - Advances in Software {\ldots} - Model-Based Higher-Order Mutation Analysis.pdf:pdf},
	Journal = {Adv. Softw. {\ldots}},
	Keywords = {1 introduction and related,basic mutation operators,bugs by comparing the,coupling ef-,event sequence graphs,fect,goals of software testing,higher-order mutation analysis,is to reveal defects,one of the major,software testing,work},
	Pages = {164--173},
	Title = {{Model-Based Higher-Order Mutation Analysis}},
	Year = {2010},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/978-3-642-17578-7%7B%5C_%7D17}}

@inproceedings{Haschemi2010,
	Author = {Haschemi, Siamak and Wei{\ss}leder, Stephan},
	Booktitle = {TAIC PART Test. Acad. Ind. Conf.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Haschemi, Wei{\ss}leder - 2010 - TAIC PART Testing Academic {\&} Industrial Conference - A Generic Approach to Run Mutation Analysis.pdf:pdf},
	Title = {{A Generic Approach to Run Mutation Analysis}},
	Year = {2010}}

@article{Ahmed2010,
	Author = {Ahmed, Zaheed and Zahoor, Muhammad and Younas, Irfan},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ahmed, Zahoor, Younas - 2010 - 2010 The 2nd International Conference on Computer and Automation Engineering (ICCAE) - Mutation operators.pdf:pdf},
	Isbn = {978-1-4244-5569-0},
	Journal = {2010 2nd Int. Conf. Comput. Autom. Eng.},
	Keywords = {- mutation testing,class mutation operators,mutation,state-based mutation operators,traditional mutation operators},
	Mendeley-Tags = {mutation},
	Month = {feb},
	Pages = {614--618},
	Publisher = {Ieee},
	Title = {{Mutation operators for object-oriented systems: A survey}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5451692},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICCAE.2010.5451692}}

@article{Sridharan2010,
	Author = {Sridharan, Mohan and Namin, Akbar Siami},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sridharan, Namin - 2010 - Unknown - A Probabilistic Model for Effective Mutation Testing.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Sridharan, Namin - 2010 - Unknown - A Probabilistic Model for Effective Mutation Testing(2).pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{A Probabilistic Model for Effective Mutation Testing}},
	Year = {2010}}

@inproceedings{Clark2010a,
	Abstract = {Mutation testing is a powerful and flexible test technique. Traditional mutation testing makes a small change to the syntax of a description (usually a program) in order to create a mutant. A test set is considered to be good if it distinguishes between the original description and all of the (functionally non- equivalent) mutants. These mutants can be seen as representing potential small slips and thus mutation testing aims to produce a test set that is good at finding such slips. It has also been argued that a test set that finds such small changes is likely to find larger changes. This paper introduces a new approach to mutation testing, called semantic mutation testing. Rather than mutate the description, semantic mutation testing mutates the semantics of the language in which the description is written. The mutations of the semantics of the language represent possible misunderstandings of the description language and thus capture a different class of faults. Since the likely misunderstandings are highly context dependent, this context should be used to determine which semantic mutants should be produced. The approach is illustrated through examples with statecharts and C code. In addition, a semantic mutation testing tool for C is proposed.},
	Author = {Clark, John A and Dan, Haitao and Hierons, Robert M},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Clark, Dan, Hierons - 2010 - ICSTW - Semantic Mutation Testing.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Clark, Dan, Hierons - 2010 - ICSTW - Semantic Mutation Testing.pdf:pdf},
	Isbn = {9780769540504},
	Keywords = {ac,brunel,clark,cs,dan,email addresses,haitao,haitao dan,hierons,jac,john a,misunderstandings,mutation,mutation testing,of computer programming,preprint submitted to science,rob,robert m,semantics,uk,unread,york},
	Mendeley-Tags = {mutation,unread},
	Pages = {100--109},
	Title = {{Semantic Mutation Testing}},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2010.8}}

@article{Madeyski2010,
	Author = {Madeyski, Lech and Radyk, N.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Madeyski, Radyk - 2010 - IET Software - Judy -- a mutation testing tool for Java.pdf:pdf},
	Issn = {17518806},
	Journal = {IET Softw.},
	Number = {1},
	Pages = {32},
	Title = {{Judy -- a mutation testing tool for Java}},
	Volume = {4},
	Year = {2010},
	Bdsk-Url-1 = {http://digital-library.theiet.org/content/journals/10.1049/iet-sen.2008.0038},
	Bdsk-Url-2 = {http://dx.doi.org/10.1049/iet-sen.2008.0038}}

@article{Papadakis2010a,
	Address = {New York, New York, USA},
	Author = {Papadakis, Mike and Malevris, Nicos and Kallia, Maria},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Malevris, Kallia - 2010 - Proceedings of the 5th Workshop on Automation of Software Test - AST '10 - Towards automating the g.pdf:pdf},
	Isbn = {9781605589701},
	Journal = {Proc. 5th Work. Autom. Softw. Test - AST '10},
	Keywords = {[Electronic Manuscript],automated test case generation,concolic execution,execution,genetic algorithms,mutation,mutation testing,symbolic},
	Mendeley-Tags = {mutation},
	Pages = {111--118},
	Publisher = {ACM Press},
	Title = {{Towards automating the generation of mutation tests}},
	Year = {2010},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1808266.1808283},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1808266.1808283}}

@inproceedings{Bottaci2010,
	Abstract = {It is commonly accepted that strong typing is useful for revealing programmer errors and so the use of dynamically typed languages increases the importance of software testing. Mutation analysis is a demanding software testing criterion. Although mutation analysis has been applied to procedural languages, and object oriented languages, little work has been done on the mutation analysis of programs written in dynamically typed languages. Mutation analysis depends on the substitution and modifi- cation of program elements. In a strongly typed language, the declared type of the mutated element, a variable or operator, can be used to avoid generating type-incorrect substitutions or modifications. In a dynamically typed language, this type information is not available and so a much greater range of mutations are potentially applicable but many of the resulting mutants are likely to be incompetent (too easily killed). This paper describes a mutation analysis method in which the definition of mutants is performed at run-time when type information is available. The type information can be used to avoid generating incompetent mutants},
	Author = {Bottaci, Leonardo},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bottaci - 2010 - ICSTW - Type Sensitive Application of Mutation Operators for Dynamically Typed Programs.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Bottaci - 2010 - ICSTW - Type Sensitive Application of Mutation Operators for Dynamically Typed Programs.pdf:pdf},
	Isbn = {978-1-4244-6773-0},
	Keywords = {-software testing,dynamically,javascript,mutation,mutation analysis,typed languages,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {126--131},
	Publisher = {Ieee},
	Title = {{Type Sensitive Application of Mutation Operators for Dynamically Typed Programs}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5463640},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2010.56}}

@article{Jia2010,
	Abstract = {Mutation Testing is a fault--based software testing technique that has been widely studied for over three decades. The literature on Mutation Testing has contributed a set of approaches, tools, developments and empirical results. This paper provides a comprehensive analysis and survey of Mutation Test- ing. The paper also presents the results of several development trend analyses. These analyses provide evidence that Mutation Testing techniques and tools are reaching a state of maturity and applicability, while the topic of Mutation Testing itself is the subject of increasing interest.},
	Author = {Jia, Yue and Harman, Mark},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2010 - Unknown - An Analysis and Survey of the Development of Mutation Testing.pdf:pdf},
	Keywords = {mutation,survey,unread},
	Mendeley-Tags = {mutation,survey,unread},
	Pages = {1--31},
	Title = {{An Analysis and Survey of the Development of Mutation Testing}},
	Year = {2010}}

@inproceedings{Harman2010,
	Abstract = {We argue that higher order mutants are potentially better able to simulate real faults and to reveal insights into bugs than the restricted class of first order mutants. The Mutation Testing community has previously shied away from Higher Order Mutation Testing believing it to be too expensive and therefore impractical. However, this paper argues that Search Based Software Engineering can provide a solution to this apparent problem, citing results from recent work on search based optimization techniques for constructing higher order mutants. We also present a research agenda for the development of Higher Order Mutation Testing.},
	Author = {Harman, Mark and Jia, Yue and Langdon, William B},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harman, Jia, Langdon - 2010 - ICSTW - A Manifesto for Higher Order Mutation Testing.pdf:pdf},
	Isbn = {978-1-4244-6773-0},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {80--89},
	Publisher = {Ieee},
	Title = {{A Manifesto for Higher Order Mutation Testing}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5463719},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2010.13}}

@article{Hampton2010,
	Author = {Hampton, Mark and Harman, Mark and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hampton, Harman, Offutt - 2010 - Unknown - Open Challenges in Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Open Challenges in Mutation Testing}},
	Year = {2010}}

@inproceedings{Jagannath2010,
	Abstract = {Mutation testing is a well known technique for estimating and improving the quality of test suites. Given a test suite T for a system S, mutation testing systematically creates mutants of S and executes T to measure how many mutants T detects. If T does not detect some (non-equivalent) mutants, T can be improved by adding test cases that detect those mutants. Mutants are created by applying mutation operators. Mutation operators are important because they define the characteristics of the system that are tested as well as the characteristics that are improved in the test suite. While mutation operators are well defined for a number of programming paradigms such as sequential or multi-threaded, to the best of our knowledge, mutation operators have not been defined for the actor programming model. In this paper, we define and classify mutation operators that can be used for mutation testing of actor programs.},
	Author = {Jagannath, Vilas and Gligoric, Milos and Lauterburg, Steven and Marinov, Darko and Agha, Gul},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jagannath et al. - 2010 - ICSTW - Mutation Operators for Actor Systems.pdf:pdf},
	Isbn = {978-1-4244-6773-0},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {157--162},
	Publisher = {Ieee},
	Title = {{Mutation Operators for Actor Systems}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5463644},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2010.6}}

@article{Schuler2010,
	Author = {Schuler, David and Zeller, Andreas},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2010 - 2010 Third International Conference on Software Testing, Verification and Validation - (Un-)Covering Equivalent.pdf:pdf},
	Isbn = {978-1-4244-6435-7},
	Journal = {2010 Third Int. Conf. Softw. Testing, Verif. Valid.},
	Keywords = {-mutation testing,4,a mutation leaves the,cannot,code coverage,dynamic analysis,hours,it is possible that,more,mutation,program,s,semantics unchanged,significant,such an equivalent mutation,the second problem is,within a few cpu},
	Mendeley-Tags = {mutation},
	Number = {Section II},
	Pages = {45--54},
	Publisher = {Ieee},
	Title = {{(Un-)Covering Equivalent Mutants}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5477100},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2010.30}}

@article{Traon2010,
	Author = {Traon, Yves Le and Mouelhi, Tejeddine and Fleurey, Frank and Baudry, Benoit},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Traon et al. - 2010 - Unknown - Language-specific vs. language-independent approaches embedding semantics on a metamodel for testing an.pdf:pdf},
	Keywords = {-metamodeling,mde methodology,mutation,security},
	Mendeley-Tags = {mutation},
	Title = {{Language-specific vs. language-independent approaches : embedding semantics on a metamodel for testing and verifying access control policies}},
	Year = {2010}}

@article{Mateo,
	Abstract = {Mutation analysis has been applied to many testing problems, including functional programs in numerous languages, specifications, network protocols, web services, and security policies. Program mutation, where mutation analysis is applied to programs, has been applied to the unit level (functions and methods), integration of pairs of functions, and individual classes. However, program mutation has not been applied to the problem of testing multiple classes or entire software programs, that is, there is no system level mutation. This paper introduces a project on the problem of multi-class and system level mutation testing. The technical differences between using mutation to test single classes and multiple classes are explored, and new system level mutation operators are defined. A new execution style for detecting killed mutants, Flexible Weak Mutation, is introduced. A support tool, Bacterio, is currently under construction. Keywords-},
	Author = {Mateo, Pedro Reales and Usaola, Macario Polo and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo, Usaola, Offutt - 2010 - ICSTW - Mutation at System and Functional Levels.pdf:pdf},
	Journal = {ICSTW},
	Keywords = {- mutation,flexible weak,muation,mutation,mutation process,system testing,testing,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation at System and Functional Levels}},
	Year = {2010}}

@article{Wang2010,
	Author = {Wang, Huai and Zhai, Ke and Tse, T H},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wang, Zhai, Tse - 2010 - Unknown - Correlating Context-Awareness and Mutation Analysis for Pervasive Computing Systems.pdf:pdf},
	Keywords = {context diversity,mutation analysis,pervasive},
	Pages = {1--11},
	Title = {{Correlating Context-Awareness and Mutation Analysis for Pervasive Computing Systems *}},
	Year = {2010}}

@inproceedings{Zhang,
	Abstract = {---Mutation testing has been used to assess and im- prove the quality of test inputs. Generating test inputs to achieve high mutant-killing ratios is important in mutation testing. However, existing test-generation techniques do not provide effective support for killing mutants in mutation testing. In this paper, we propose a general test-generation approach, called PexMutator, for mutation testing using Dynamic Symbolic Execution (DSE), a recent effective test-generation technique. Based on a set of transformation rules, PexMutator transforms a program under test to an instrumented meta-program that contains mutant-killing constraints. Then PexMutator uses DSE to generate test inputs for the meta-program. The mutant-killing constraints introduced via instrumentation guide DSE to generate test inputs to kill mutants automatically. We have implemented our approach as an extension for Pex, an automatic structural testing tool developed at Microsoft Research. Our preliminary experimental study shows that our approach is able to strongly killmore than 80{\%}of all themutants for the five studied subjects. In addition, PexMutator is able to outperform Pex, a state-of-the- art test-generation tool, in terms of strong mutant killing while achieving the same block coverage.},
	Author = {Zhang, Lingming and Xie, Tao and Zhang, Lu and Tillmann, Nikolai and Halleux, Jonathan De and Mei, Hong},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2010 - Unknown - Test Generation via Dynamic Symbolic Execution for Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Test Generation via Dynamic Symbolic Execution for Mutation Testing}},
	Year = {2010}}

@article{Langdon2010,
	Abstract = {It is said ninety percent of faults that survive manufacturer's testing procedures are complex. That is, the correspond- ing bug fix contains multiple changes. Higher order mutation testing is used to study defect interactions and their impact on software testing for fault finding. We adopt a multi-objective Pareto optimal approach using Monte Carlo sampling, genetic algorithms and genetic programming to search for higher order mutants which are both hard-to-kill and realistic. The space of complex faults (higher order mutants) is much larger than that of traditional first order mutations which correspond to simple faults, nevertheless search based approaches make this scalable. The problems of non-determinism and efficiency are overcome. Easy to detect faults may become harder to detect when they inter- act and impossible to detect single faults may be brought to light when code contains two such faults. We use strong typing and BNF grammars in search based mutation testing to find examples of both in ancient heavily optimised every day C code.},
	Annote = {Confirms Coupling Hypothesis
Talks about SuperMutants : Mutant Schemata

      },
	Author = {Langdon, William B and Harman, Mark and Jia, Yue},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Langdon, Harman, Jia - 2010 - Unknown - Efficient multi-objective higher order mutation testing with genetic programming.pdf:pdf},
	Keywords = {genetic algorithm,genetic programming,grammar based gp,higher order mutation,monte carlo,mutation,mutation testing,non-determinism,nsga-ii,pareto optimality,sbse,schedule,strongly typed gp,tcas,triangle,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {2416--2430},
	Title = {{Efficient multi-objective higher order mutation testing with genetic programming}},
	Volume = {83},
	Year = {2010}}

@inproceedings{Papadakis2010,
	Abstract = {Various mutation approximation techniques have been proposed in the literature in order to reduce the expenses of mutation. This paper presents results from an empirical study conducted for first and second order mutation testing strategies. Its scope is to evaluate the relative application cost and effectiveness of the different mutation strategies. The application cost was based: on the number of mutants, the equivalent ones and on the number of test cases needed to expose them by each strategy. Each strategy's effectiveness was evaluated by its ability to expose a set of seeded faults. The results indicate that on the one hand the first order mutation testing strategies can be in general more effective than the second order ones. On the other hand, the second order strategies can drastically decrease the number of the introduced equivalent mutants, generally forming a valid cost effective alternative to mutation testing.},
	Author = {Papadakis, Mike and Malevris, Nicos},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Malevris - 2010 - ICSTW - An Empirical Evaluation of the First and Second Order Mutation Testing Strategies.pdf:pdf},
	Isbn = {978-1-4244-6773-0},
	Keywords = {higher order mutation,mutation,mutation testing,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {90--99},
	Publisher = {Ieee},
	Title = {{An Empirical Evaluation of the First and Second Order Mutation Testing Strategies}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5463722},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2010.50}}

@article{Clark2010,
	Abstract = {preso},
	Author = {Clark, John A and Dan, Haitao and Hierons, Robert M},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Clark, Dan, Hierons - 2010 - Unknown - Semantic Mutation Testing An example cruise control.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Semantic Mutation Testing An example : cruise control}},
	Year = {2010}}

@article{Adra2010,
	Author = {Adra, Salem F and McMinn, Phil},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Mutation Operators for Agent-Based Models}},
	Year = {2010}}

@article{Sridharan2010a,
	Author = {Sridharan, Mohan and Namin, Akbar Siami},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sridharan, Namin - 2010 - 2010 IEEE 21st International Symposium on Software Reliability Engineering - Prioritizing Mutation Operators B.pdf:pdf},
	Isbn = {978-1-4244-9056-1},
	Journal = {2010 IEEE 21st Int. Symp. Softw. Reliab. Eng.},
	Keywords = {-mutation testing,bayesian reasoning,impor-,mutation,tance sampling,testing effectiveness},
	Mendeley-Tags = {mutation},
	Month = {nov},
	Pages = {378--387},
	Publisher = {Ieee},
	Title = {{Prioritizing Mutation Operators Based on Importance Sampling}},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5635074},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ISSRE.2010.16}}

@inproceedings{Praphamontripong,
	Abstract = {As our awareness of the complexities inherent in web applications grows, we find an increasing need for more sophisticated ways to test them. Many web application faults are a result of how web software components interact; sometimes client-server and sometimes server-server. This paper presents a novel solution to the problem of integration testing of web applications by using mutation analysis. New mutation operators are defined, a tool (webMuJava) that implements these operators is presented, and results from a case study applying the tool to test a small web application are presented. The results show that mutation analysis can help create tests that are effective at finding web application faults, as well as indicating several directions for improvement.},
	Author = {Praphamontripong, Upsorn and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Praphamontripong, Offutt - 2010 - Unknown - Applying Mutation Testing to Web Applications.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Applying Mutation Testing to Web Applications}},
	Year = {2010}}

@article{Natella2010,
	Author = {Natella, Roberto and Cotroneo, Domenico and Federico, Napoli and Claudio, Via},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Natella et al. - 2010 - Unknown - Representativeness Analysis of Injected Software Faults in Complex Software.pdf:pdf},
	Isbn = {9781424474998},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {437--446},
	Title = {{Representativeness Analysis of Injected Software Faults in Complex Software}},
	Year = {2010}}

@article{Jangra2010,
	Author = {Jangra, Ajay and Pahuja, Ruchi and Diwakar, Chander and {Priyanka Jangra}},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jangra et al. - 2010 - International Journal of Computer Science and Communication - Designing Robust Test Case using Mutation Testing.pdf:pdf},
	Journal = {Int. J. Comput. Sci. Commun.},
	Keywords = {automated test case,killed mutent,mutant,mutation,mutation testing,software testing},
	Mendeley-Tags = {mutation},
	Number = {2},
	Pages = {79--82},
	Title = {{Designing Robust Test Case using Mutation Testing}},
	Volume = {1},
	Year = {2010}}

@inproceedings{Schuler2010a,
	Author = {Schuler, David and Zeller, Andreas},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2010 - ICST - (Un) Covering Equivalent Mutants.pdf:pdf},
	Keywords = {-mutation testing,4,a mutation leaves the,cannot,code coverage,dynamic analysis,hours,it is possible that,more,program,s,semantics unchanged,significant,such an equivalent mutation,the second problem is,within a few cpu},
	Number = {Section II},
	Title = {{(Un) Covering Equivalent Mutants}},
	Year = {2010}}

@article{Ii2010,
	Author = {Ii, Donald W Mccormick},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ii - 2010 - Unknown - Towards a Sufficient Set of Mutation Operators for Structured Query Language ( SQL ).pdf:pdf},
	Keywords = {copyright 2010 donald w,database testing,mccormick ii,mutation testing,of mutation operators for,sql,sql testing,structured query language,test adequacy criteria,towards a sufficient set},
	Title = {{Towards a Sufficient Set of Mutation Operators for Structured Query Language ( SQL )}},
	Year = {2010}}

@inproceedings{Zhang2010,
	Annote = {Compares random selection of mutants to operator based selection. None of the operator based selection methods can outperform random selection of mutants.








Two step random selection- First pick a mutation operator
- Second pick a mutant generated by it.




- Subject programs are simens programs (7)




T: Selection technique, choosing T out of A mutants
ti is a test suite that can kill all in T
Eff(T) = average(mut.noneq score in all A| forall ti in n)
i.e ti is adequate for T
Uses 108 mutantion operators from proteum




- Selection technique for random: [50{\%},75{\%},100{\%}] * |Selected Muts|




- No operator based selection is better than random selection when
selecting same number of mutants.},
	Author = {Zhang, Lu and Hou, Shan-shan and Hu, Jun-jue and Xie, Tao and Mei, Hong},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2010 - ICSE - Is Operator-Based Mutant Selection Superior to Random Mutant Selection.pdf:pdf},
	Isbn = {9781605587196},
	Keywords = {mutation,mutation testing,printed,reviewed,test-adequacy criterion,unread},
	Mendeley-Tags = {mutation,printed,reviewed,unread},
	Title = {{Is Operator-Based Mutant Selection Superior to Random Mutant Selection ?}},
	Year = {2010}}

@article{Groce2011a,
	Author = {Groce, Alex},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce - 2011 - ASE - Coverage rewarded Test input generation via adaptation-based programming.pdf:pdf},
	Isbn = {978-1-4577-1639-3},
	Journal = {ASE},
	Keywords = {-software testing,mutation,reinforcement learning,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {nov},
	Pages = {380--383},
	Publisher = {Ieee},
	Title = {{Coverage rewarded: Test input generation via adaptation-based programming}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6100077},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ASE.2011.6100077}}

@article{Nica2011a,
	Author = {Nica, Simona and Nica, Mihai and Wotawa, Franz},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Nica, Nica, Wotawa - 2011 - Unknown - Detecting Equivalent Mutants by Means of Constraint Systems.pdf:pdf},
	Isbn = {9781612081687},
	Keywords = {-mutation testing,constraint satisfaction problem,distinguishing test,equivalent mutants,mutation,score},
	Mendeley-Tags = {mutation},
	Number = {c},
	Pages = {21--24},
	Title = {{Detecting Equivalent Mutants by Means of Constraint Systems}},
	Year = {2011}}

@article{Kumar2011,
	Author = {Kumar, Manoj and Hussain, Mohammad},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kumar, Hussain - 2011 - Unknown - A Framework for Performing Mutation Analysis and Deviants.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {4},
	Pages = {212--218},
	Title = {{A Framework for Performing Mutation Analysis and Deviants}},
	Year = {2011}}

@article{Harman,
	Abstract = {This paper introduces SHOM, a mutation-based test data generation approach that combines Dynamic Symbolic Ex- ecution and Search Based Software Testing. SHOM targets strong mutation adequacy and is capable of killing both first and higher order mutants. We report the results of an em- pirical study using 17 programs, including production indus- trial code from ABB and Daimler and open source code as well as previously studied subjects. SHOM achieved higher strong mutation adequacy than two recent mutation-based test data generation approaches, killing between 8{\%} and 38{\%} of those mutants left unkilled by the best performing previous approach.},
	Author = {Harman, Mark and Jia, Yue and Langdon, William B},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harman, Jia, Langdon - 2011 - Unknown - Strong Higher Order Mutation-Based Test Data Generation.pdf:pdf},
	Isbn = {9781450304436},
	Keywords = {mutation,mutation testing,test data generation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {212--222},
	Title = {{Strong Higher Order Mutation-Based Test Data Generation}},
	Year = {2011}}

@article{Dominguez-Jimenez2011,
	Author = {Dom{\'{i}}nguez-Jim{\'{e}}nez, JJ},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Dom{\'{i}}nguez-Jim{\'{e}}nez - 2011 - Information and Software Technology - Evolutionary mutation testing.pdf:pdf},
	Journal = {Inf. Softw. Technol.},
	Title = {{Evolutionary mutation testing}},
	Year = {2011},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S095058491100084X}}

@article{Staats2011,
	Author = {Staats, Matt and Whalen, Michael W. and Heimdahl, Mats P.E.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Staats, Whalen, Heimdahl - 2011 - Proceeding of the 33rd international conference on Software engineering - ICSE '11 - Programs, tests,.pdf:pdf},
	Isbn = {9781450304450},
	Journal = {Proceeding 33rd Int. Conf. Softw. Eng. - ICSE '11},
	Keywords = {testing formalism,theory of testing},
	Number = {January 2011},
	Pages = {391},
	Title = {{Programs, tests, and oracles}},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1985793.1985847},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1985793.1985847}}

@article{Kapoor2011a,
	Author = {Kapoor, Shalini},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kapoor - 2011 - Unknown - Test Case Effectiveness of Higher Order Mutation Testing.pdf:pdf},
	Keywords = {first order mutants,higher order mutants,mutation,mutation testing},
	Mendeley-Tags = {mutation},
	Number = {5},
	Pages = {1206--1211},
	Title = {{Test Case Effectiveness of Higher Order Mutation Testing}},
	Volume = {2},
	Year = {2011}}

@article{Blocher2011,
	Author = {Bl{\"{o}}cher, M},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bl{\"{o}}cher - 2011 - Unknown - State-Of-The-Art in Mutation Testing.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{State-Of-The-Art in Mutation Testing}},
	Year = {2011},
	Bdsk-Url-1 = {http://deeds05.deeds.informatik.tu-darmstadt.de/teaching/courses/SS11/isrs/reports/State-Of-The-Art%7B%5C_%7Din%7B%5C_%7DMutation%7B%5C_%7DTesting.pdf}}

@inproceedings{Namin2011,
	Address = {New York, New York, USA},
	Author = {Namin, Akbar Siami and Kakarla, Sahitya},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin, Kakarla - 2011 - ISSTA - The use of mutation in testing experiments and its sensitivity to external threats.pdf:pdf},
	Isbn = {9781450305624},
	Keywords = {experimental design,hand-seeded faults,mutants,mutation,mutation testing,real faults,statistical analysis,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {342},
	Publisher = {ACM Press},
	Title = {{The use of mutation in testing experiments and its sensitivity to external threats}},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=2001420.2001461},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2001420.2001461}}

@phdthesis{Orzeszyna2011,
	Author = {Orzeszyna, Wojciech},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Orzeszyna - 2011 - Unknown - Solutions to the equivalent mutants problem.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {June},
	Title = {{Solutions to the equivalent mutants problem :}},
	Year = {2011}}

@inproceedings{Nam2011,
	Author = {Nam, Jaechang and Schuler, David and Zeller, Andreas},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Nam, Schuler, Zeller - 2011 - ICSTW - Calibrated Mutation Testing.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Nam, Schuler, Zeller - 2011 - ICSTW - Calibrated Mutation Testing(2).pdf:pdf},
	Isbn = {978-1-4577-0019-4},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {mar},
	Pages = {376--381},
	Publisher = {Ieee},
	Title = {{Calibrated Mutation Testing}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5954436},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2011.57}}

@article{Kapoor2011,
	Abstract = {Mutation testing attempts to assess the quality of a test set by its ability to distinguish the program under test from its mutants. One of the main difficulties faced in practice is due to the large number of mutants that can be generated for a program under test. Earlier research to solve this problem has suggested variants of mutation testing, and finding an effective set of mutation operators referred to as selective mutation. This paper presents an approach for reducing the cost of testing by identifying hierarchies among first order mutants. The key idea is to evaluate the strength of a mutant with respect to other mutants and ignore weaker mutants during testing. Unlike previous approaches, our method is formal and it is guaranteed that the effectiveness of a test suite will be identical with what can be achieved using all mutants. The theory described here is also applicable to quantitative assessment of testing effort and can be used to guide successive testing steps in fault based testing. We present an empirical evaluation to find reductin in the test effort using mutant classification and show that it supports selective mutation.},
	Author = {Kapoor, Kalpesh},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kapoor - 2011 - Informatica - Mutant Hierarchies Support Selective Mutation.pdf:pdf},
	Journal = {Informatica},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {3},
	Pages = {331--342},
	Title = {{Mutant Hierarchies Support Selective Mutation}},
	Volume = {35},
	Year = {2011}}

@article{Just2011a,
	Author = {Just, Rene and Schweiggert, Franz and Kapfhammer, Gregory M.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just, Schweiggert, Kapfhammer - 2011 - 2011 26th IEEEACM International Conference on Automated Software Engineering (ASE 2011) - MAJOR An.ps:ps},
	Isbn = {978-1-4577-1639-3},
	Journal = {2011 26th IEEE/ACM Int. Conf. Autom. Softw. Eng. (ASE 2011)},
	Month = {nov},
	Pages = {612--615},
	Publisher = {Ieee},
	Title = {{MAJOR: An efficient and extensible tool for mutation analysis in a Java compiler}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6100138},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ASE.2011.6100138}}

@article{Ma2011,
	Author = {Ma, Yu-Seung and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Offutt - 2011 - Unknown - Description of Method-level Mutation Operators for Java.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--3},
	Title = {{Description of Method-level Mutation Operators for Java}},
	Year = {2011}}

@techreport{Arcaini2011,
	Author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Arcaini, Gargantini, Riccobene - 2011 - Unknown - Equivalence checking for NuSMV specifications.pdf:pdf},
	Pages = {1--15},
	Title = {{Equivalence checking for NuSMV specifications}},
	Year = {2011}}

@article{Mandal2011,
	Author = {Mandal, Ronny},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mandal - 2011 - Unknown - Towards Safe Mutation Testing in a Sandbox Environment Master of Science Thesis.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Towards Safe Mutation Testing in a Sandbox Environment Master of Science Thesis}},
	Year = {2011}}

@article{Madiraju2011,
	Author = {Madiraju, Pratyusha and Namin, Akbar Siami},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Madiraju, Namin - 2011 - 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops - Paraµ -.pdf:pdf},
	Isbn = {978-1-4577-0019-4},
	Journal = {2011 IEEE Fourth Int. Conf. Softw. Testing, Verif. Valid. Work.},
	Keywords = {-mutation testing,higher-order mutation,object-,oriented programs,software testing tools},
	Month = {mar},
	Pages = {351--356},
	Publisher = {Ieee},
	Title = {{Paraµ -- A Partial and Higher-Order Mutation Tool with Concurrency Operators}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5954433},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2011.34}}

@techreport{Miraz2011,
	Author = {Miraz, Matteo and Milano, Politecnico},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Miraz, Milano - 2011 - Unknown - Summary on the Human Competitiveness of TestFul.pdf:pdf},
	Pages = {1--6},
	Title = {{Summary on the Human Competitiveness of TestFul}},
	Year = {2011}}

@article{Belli2011,
	Author = {Belli, Fevzi and Beyazit, Mutlu and Hollmann, Axel and Guler, Nevin},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Belli et al. - 2011 - 2011 IEEE 35th Annual Computer Software and Applications Conference Workshops - Statistical Evaluation of Test Set.pdf:pdf},
	Isbn = {978-1-4577-0980-7},
	Journal = {2011 IEEE 35th Annu. Comput. Softw. Appl. Conf. Work.},
	Keywords = {-mutation analysis,event,model-based testing,mutation,sequence graphs,statistical evaluation},
	Mendeley-Tags = {mutation},
	Month = {jul},
	Pages = {180--183},
	Publisher = {Ieee},
	Title = {{Statistical Evaluation of Test Sets Using Mutation Analysis}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6032234},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/COMPSACW.2011.39}}

@article{Holzmann2011,
	Author = {Holzmann, Gerard J. and Joshi, Rajeev and Groce, Alex},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Holzmann, Joshi, Groce - 2011 - IEEE Transactions on Software Engineering - Swarm Verification Techniques.pdf:pdf},
	Issn = {0098-5589},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {nov},
	Number = {6},
	Pages = {845--857},
	Title = {{Swarm Verification Techniques}},
	Volume = {37},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5661793},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TSE.2010.110}}

@article{Just2011,
	Address = {New York, New York, USA},
	Author = {Just, Rene and Kapfhammer, Gregory M. and Schweiggert, Franz},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just, Kapfhammer, Schweiggert - 2011 - Proceeding of the 6th international workshop on Automation of software test - AST '11 - Using con.pdf:pdf},
	Isbn = {9781450305921},
	Journal = {Proceeding 6th Int. Work. Autom. Softw. test - AST '11},
	Keywords = {compiler-integrated,instrumentation,mutation,mutation analysis},
	Mendeley-Tags = {mutation},
	Pages = {50},
	Publisher = {ACM Press},
	Title = {{Using conditional mutation to increase the efficiency of mutation analysis}},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1982595.1982606},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1982595.1982606}}

@article{Offuttb,
	Abstract = {Context: The field of mutation analysis has been growing, both in the number of published papers and the number of active researchers. This special issue provides a sampling of recent advances and ideas. But do all the new researchers know where we started? Objective: To imagine where we are going, we must first know where we are. To understand where we are, we must know where we have been. This paper reviews past mutation analysis research, considers the present, then imagines possible future directions. Method: A retrospective study of past trends lets us the ability to see the current state of mutation research in a clear context, allowing us to imagine and then create future vectors. Results: The value of mutation has greatly expanded since the early view of mutation as an expensive way to unit test subroutines. Our understanding of what mutation is and how it can help has become much deeper and broader. Conclusion: Mutation analysis has been around for 35 years, but we are just now beginning to see its full potential. The papers in this issue and future mutation workshops will eventually allow us to realize this potential.},
	Annote = {Mutation Analysis: The use of well defined rules defined on syntactic descriptions to make systematic changes to the syntax or to objects developed from the syntax

        
Q] We have very little knowledge about what kinds of faults mutation is good at finding

        
128,129 -{\textgreater} Only a few tests kill most mutants
Mutate for improvement.},
	Author = {Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Offutt - 2011 - Information and Software Technology - A Mutation Carol Past , Present and Future.pdf:pdf},
	Journal = {Inf. Softw. Technol.},
	Keywords = {mutation,mutation testing,type:review,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {1--26},
	Title = {{A Mutation Carol : Past , Present and Future}},
	Year = {2011}}

@article{Hu,
	Abstract = {This paper presents results from empirical studies using object-oriented, class-level mutation operators. Class mutation operators modify OO programming language features such as inheritance, polymorphism, dynamic binding and encapsulation. Most previous empirical studies of mutation operators used statement-level operators; this study asked questions about the static and dynamic nature of class-level mutation operators. Results include statistics on the various types of mutants, how many are equivalent, new rules for avoiding creation of equivalent mutants, the difficulty of killing individual mutants, and the difficulty of killing mutants from the various operators. The paper draws conclusions about which mutation operators are more or less useful, leading to recommendations about how future OO mutation systems should be built.},
	Author = {Hu, Jingyu and Li, Nan and Offutt, A Jefferson},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hu, Li, Offutt - 2011 - ICSTW - An Analysis of OO Mutation Operators.pdf:pdf},
	Journal = {ICSTW},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{An Analysis of OO Mutation Operators}},
	Year = {2011}}

@inproceedings{Zhang2011a,
	Author = {Zhang, Zhiyi and You, Dongjiang and Chen, Zhenyu},
	Booktitle = {EAST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang, You, Chen - 2011 - EAST - Mutation Selection Some Could be Better than All.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Mutation Selection : Some Could be Better than All}},
	Year = {2011}}

@inproceedings{Ratcliff2011,
	Author = {Ratcliff, Sam and White, David R and Clark, John A},
	Booktitle = {GECCO},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ratcliff, White, Clark - 2011 - GECCO - Searching for invariants using genetic programming and mutation testing.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Searching for invariants using genetic programming and mutation testing}},
	Year = {2011}}

@inproceedings{Schuler2011,
	Author = {Schuler, David and Zeller, Andreas},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2011 - ICST - Assessing Oracle Quality with Checked Coverage.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2011 - ICST - Assessing Oracle Quality with Checked Coverage(2).pdf:pdf},
	Isbn = {978-1-61284-174-8},
	Keywords = {-test suite quality,coverage metrics,dynamic slic-,ing,jaxenexception,mutation,mutation testing,public void testvalidpaths,saxpathexception,throws,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {mar},
	Pages = {90--99},
	Publisher = {Ieee},
	Title = {{Assessing Oracle Quality with Checked Coverage}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5770598},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2011.32}}

@article{Aichernig2011,
	Author = {Aichernig, Bernhard K. and Brandl, Harald and Jobstl, Elisabeth and Krenn, Willibald},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Aichernig et al. - 2011 - 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation - Efficient Mutatio.pdf:pdf},
	Isbn = {978-1-61284-174-8},
	Journal = {2011 Fourth IEEE Int. Conf. Softw. Testing, Verif. Valid.},
	Keywords = {-test case generation,action,ioco,mutation,mutation testing,systems,unified modeling language},
	Mendeley-Tags = {mutation},
	Month = {mar},
	Pages = {120--129},
	Publisher = {Ieee},
	Title = {{Efficient Mutation Killers in Action}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5770601},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2011.57}}

@inproceedings{Fraser2011,
	Author = {Fraser, Gordon and Arcuri, Andrea},
	Booktitle = {Eur. Conf. Found. Softw. Eng.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Fraser, Arcuri - 2011 - European conference on Foundations of software engineering - Efficient Mutation Testing using Whole Test Suite G.pdf:pdf},
	Keywords = {-mutation testing,based testing,detecting such equivalent mutants,mutation,not exist,program and mutant does,search-,test case generation,testing classes,that would distinguish between,unfortunately,unit testing},
	Mendeley-Tags = {mutation},
	Number = {Section V},
	Title = {{Efficient Mutation Testing using Whole Test Suite Generation}},
	Year = {2011}}

@article{Papadakis2011,
	Author = {Papadakis, Mike and Malevris, Nicos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Malevris - 2011 - Software Quality Journal - Automatically performing weak mutation with the aid of symbolic execution, conco.pdf:pdf},
	Issn = {0963-9314},
	Journal = {Softw. Qual. J.},
	Keywords = {automated test case generation,concolic,execution,mutant schemata,mutation,mutation testing,search based testing,symbolic execution,weak mutation},
	Mendeley-Tags = {mutation},
	Month = {may},
	Number = {4},
	Pages = {691--723},
	Title = {{Automatically performing weak mutation with the aid of symbolic execution, concolic testing and search-based testing}},
	Volume = {19},
	Year = {2011},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s11219-011-9142-y},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s11219-011-9142-y}}

@article{Adler2011,
	Address = {New York, New York, USA},
	Author = {Adler, Yoram and Behar, Noam and Raz, Orna and Shehory, Onn and Steindler, Nadav and Ur, Shmuel and Zlotnick, Aviad},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Adler et al. - 2011 - ICSE - Code coverage analysis in practice for large systems.pdf:pdf},
	Isbn = {9781450304450},
	Journal = {ICSE},
	Keywords = {all or part of,code coverage analysis,mutation,or hard copies of,permission to make digital,substring hole analysis,system test,this work for,this work was done,unread,while working at ibm},
	Mendeley-Tags = {mutation,unread},
	Pages = {736},
	Publisher = {ACM Press},
	Title = {{Code coverage analysis in practice for large systems}},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1985793.1985897},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1985793.1985897}}

@article{Nica2011,
	Author = {Nica, Simona},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Nica - 2011 - 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation - On the Improvement of the Mut.pdf:pdf},
	Isbn = {978-1-61284-174-8},
	Journal = {2011 Fourth IEEE Int. Conf. Softw. Testing, Verif. Valid.},
	Keywords = {-mutation testing,constraint satisfaction problem,distinguishing test case,ejb mutation,mutation,mutation score},
	Mendeley-Tags = {mutation},
	Month = {mar},
	Pages = {423--426},
	Publisher = {Ieee},
	Title = {{On the Improvement of the Mutation Score Using Distinguishing Test Cases}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5770634},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2011.40}}

@article{Delamaro2011,
	Author = {Delamaro, Marcio Eduardo and Chaim, Marcos L. and Vincenzi, Auri Marcelo Rizzo and Jino, Mario and Maldonado, Jose Carlos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delamaro et al. - 2011 - SBES - Twenty-Five Years of Research in Structural and Mutation Testing.pdf:pdf},
	Isbn = {978-1-4577-2187-8},
	Journal = {SBES},
	Keywords = {mutation,survey,unread},
	Mendeley-Tags = {mutation,survey,unread},
	Month = {sep},
	Pages = {40--49},
	Publisher = {Ieee},
	Title = {{Twenty-Five Years of Research in Structural and Mutation Testing}},
	Year = {2011},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6065144},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/SBES.2011.16}}

@article{Jeevarathinam2011,
	Author = {Jeevarathinam, R and Thanamani, Antony Selvadoss},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jeevarathinam, Thanamani - 2011 - Unknown - A survey on mutation testing methods , fault classifications and automatic test cases genera.pdf:pdf},
	Keywords = {automatic test cases,mutation,mutation testing,software testing,survey},
	Mendeley-Tags = {mutation,survey},
	Number = {February},
	Pages = {113--117},
	Title = {{A survey on mutation testing methods , fault classifications and automatic test cases generation}},
	Volume = {70},
	Year = {2011}}

@article{Joanna,
	Author = {Strug, Joanna and Strug, Barbara},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Strug, Strug - 2012 - ICTSS - Machine Learning Approach in Mutation Testing.pdf:pdf},
	Journal = {ICTSS},
	Keywords = {machine{\_}learning},
	Mendeley-Tags = {machine{\_}learning},
	Title = {{Machine Learning Approach in Mutation Testing}},
	Year = {2012}}

@inproceedings{Mateo2012a,
	Author = {Mateo, Pedro Reales and Usaola, Macario Polo},
	Booktitle = {ICSM},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo, Usaola - 2012 - ICSM - Bacterio Java mutation testing tool A framework to evaluate quality of tests cases.pdf:pdf},
	Isbn = {9781467323123},
	Keywords = {-mutation testing,bacterio tool,mutation techniques},
	Pages = {646--649},
	Title = {{Bacterio: Java mutation testing tool: A framework to evaluate quality of tests cases}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=6405344}}

@inproceedings{Wu2012,
	Author = {Wu, Kun and Fang, Chunrong and Chen, Zhenyu and Zhao, Zhihong},
	Booktitle = {AST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wu et al. - 2012 - AST - Test Case Prioritization Incorporating Ordered Sequence of Program Elements.pdf:pdf},
	Isbn = {9781467318228},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {124--130},
	Title = {{Test Case Prioritization Incorporating Ordered Sequence of Program Elements}},
	Year = {2012}}

@article{Endo2012,
	Author = {Endo, Andre Takeshi and Simao, Adenilso da Silva},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Endo, Simao - 2012 - Unknown - An Experimental Study on Test Suite Characteristics , Cost , and Effectiveness of FSM-based Testing Metho.pdf:pdf},
	Title = {{An Experimental Study on Test Suite Characteristics , Cost , and Effectiveness of FSM-based Testing Methods}},
	Year = {2012}}

@inproceedings{Papadakis2012,
	Author = {Papadakis, Mike and {Le Traon}, Yves},
	Booktitle = {2012 IEEE Fifth Int. Conf. Softw. Testing, Verif. Valid.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Le Traon - 2012 - 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation - Using Mutants t.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Le Traon - 2012 - 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation - Using Mutant(2).pdf:pdf},
	Isbn = {978-0-7695-4670-4},
	Keywords = {- debugging,fault localization,mutation,mutation analysis,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {691--700},
	Publisher = {Ieee},
	Title = {{Using Mutants to Locate Unknown Faults}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6200171},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2012.159}}

@inproceedings{Ramler2012,
	Author = {Ramler, Rudolf and Kaspar, Thomas},
	Booktitle = {ICCCT},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ramler, Kaspar - 2012 - ICCCT - Applicability and Benefits of Mutation Analysis as an Aid for Unit Testing.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {920--925},
	Title = {{Applicability and Benefits of Mutation Analysis as an Aid for Unit Testing}},
	Year = {2012}}

@inproceedings{Oetsch2012,
	Author = {Oetsch, Johannes and Prischink, Michael and Schwengerer, Martin and Tompits, Hans},
	Booktitle = {Int. Conf. Princ. Knowl. Represent. Reason.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Oetsch et al. - 2012 - International Conference on Principles of Knowledge Representation and Reasoning - On the Small-Scope Hypothesi.pdf:pdf},
	Pages = {43--53},
	Title = {{On the Small-Scope Hypothesis for Testing Answer-Set Programs ∗}},
	Year = {2012}}

@article{Sun2012,
	Author = {Sun, Chang-ai and Wang, Guan and Cai, Kai-Yuan and Chen, Tsong Yueh},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sun et al. - 2012 - 2012 IEEE 36th Annual Computer Software and Applications Conference Workshops - Distribution-Aware Mutation Analysis.pdf:pdf},
	Isbn = {978-1-4673-2714-5},
	Journal = {2012 IEEE 36th Annu. Comput. Softw. Appl. Conf. Work.},
	Keywords = {-mutation analysis,mutation,performance,software testing},
	Mendeley-Tags = {mutation},
	Month = {jul},
	Pages = {170--175},
	Publisher = {Ieee},
	Title = {{Distribution-Aware Mutation Analysis}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6341570},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/COMPSACW.2012.40}}

@misc{Science2012a,
	Author = {Hassine, Jameleddine},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hassine - 2012 - Unknown - Preso Mutation Testing Development and Challenges.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {Icsea},
	Pages = {1--34},
	Title = {{Preso: Mutation Testing : Development and Challenges}},
	Year = {2012}}

@article{Fraser2012,
	Author = {Fraser, Gordon and Zeller, Andreas and Society, Ieee Computer},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Fraser, Zeller, Society - 2012 - Unknown - Mutation-Driven Generation of Unit Tests and Oracles.pdf:pdf},
	Number = {2},
	Pages = {278--292},
	Title = {{Mutation-Driven Generation of Unit Tests and Oracles}},
	Volume = {38},
	Year = {2012}}

@article{Aichernig2012,
	Author = {Aichernig, Bernhard K. and J{\"{o}}bstl, Elisabeth},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Aichernig, J{\"{o}}bstl - 2012 - Electronic Proceedings in Theoretical Computer Science - Towards Symbolic Model-Based Mutation Testing Combi.pdf:pdf},
	Issn = {2075-2180},
	Journal = {Electron. Proc. Theor. Comput. Sci.},
	Month = {feb},
	Number = {Mbt},
	Pages = {88--102},
	Title = {{Towards Symbolic Model-Based Mutation Testing: Combining Reachability and Refinement Checking}},
	Volume = {80},
	Year = {2012},
	Bdsk-Url-1 = {http://arxiv.org/abs/1202.6123v1},
	Bdsk-Url-2 = {http://dx.doi.org/10.4204/EPTCS.80.7}}

@article{Zhang2012,
	Author = {Zhang, Lingming and Marinov, Darko and Zhang, Lu and Khurshid, Sarfraz},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2012 - Unknown - Regression Mutation Testing.pdf:pdf},
	Isbn = {9781450314541},
	Keywords = {ing,mutation,mutation testing,regression mutation testing,regression test-,software evolution,static analysis},
	Mendeley-Tags = {mutation},
	Number = {1},
	Pages = {331--341},
	Title = {{Regression Mutation Testing}},
	Year = {2012}}

@article{Boonyakulsrirung2012,
	Author = {Boonyakulsrirung, Panya and Suwannasart, Taratip},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Boonyakulsrirung, Suwannasart - 2012 - Unknown - WeMuTe -- A Weak Mutation Testing Tool for.pdf:pdf},
	Isbn = {9789881925114},
	Title = {{WeMuTe -- A Weak Mutation Testing Tool for}},
	Volume = {I},
	Year = {2012}}

@article{Keramati2012,
	Abstract = {Empirical studies play an important role in measuring the effectiveness of software testing methods and coverage criteria. This has led us to develop an experimental research to study four major test coverage criteria based on the Control Flow Graphs extracted from the source code of programs. In this study, different implementations of an industrial problem are selected as subject programs and the effectiveness of Edge, Edge-Pair, Prime-Path and All-Path coverage criteria are measured for them by means of mutation analysis. Generating and evaluating large number of mutants without random selection in one hand, and running the experiment against entire input domain on the other hand, increased accuracy of the results and removed effect of using random mutants and test case pools in similar experimental studies. Analyzing the results, we discuss the effectiveness of these four coverage criteria, the effect of employing Sidetrip and Detour touring, and the reliability and maximum power of graph-based coverage criteria. Key},
	Author = {Keramati, Hossein and Mirian-Hosseinabadi, Seyed-Hassan},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Keramati, Mirian-Hosseinabadi - 2012 - Scientific Research and Essays - Effectiveness of control flow test coverage criteria using mutat.pdf:pdf},
	Journal = {Sci. Res. Essays},
	Keywords = {control flow coverage criteria,empirical study,mutation,mutation analysis,software testing,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {45},
	Pages = {3848--3859},
	Title = {{Effectiveness of control flow test coverage criteria using mutation analysis : An experimental study}},
	Volume = {7},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.5897/SRE11.1487}}

@phdthesis{Cachia2012,
	Author = {Cachia, Mark Anthony},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Cachia - 2012 - Unknown - Investigating ways to make Mutation Testing feasible in agile environments University of Malta.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Number = {May},
	Title = {{Investigating ways to make Mutation Testing feasible in agile environments University of Malta}},
	Year = {2012}}

@article{Gargantini2012,
	Author = {Gargantini, Angelo and Guarnieri, Marco and Magri, Eros},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gargantini, Guarnieri, Magri - 2012 - ICTSS - Extending Coverage Criteria by Evaluating their Robustness to Code Structure Changes.pdf:pdf},
	Journal = {ICTSS},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Extending Coverage Criteria by Evaluating their Robustness to Code Structure Changes}},
	Year = {2012}}

@article{Xiang2012,
	Author = {Xiang, Chen and Quing, Gu},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Xiang, Quing - 2012 - Journal of Frontiers of Computer Science and Technology - Mutation Testing Principal, Optimization And Application.pdf:pdf},
	Journal = {J. Front. Comput. Sci. Technol.},
	Keywords = {12kjb520014,61021062,61202006,application research plan of,bk2012023,education of jiangsu province,equivalent mutant,foundation of china under,grant nos,mutation,mutation testing,nantong under grant no,regression testing,research project of higher,state key labora-,test case generation,test suite adequacy,the,the national natural science,the natural science,the open project of,under grant no,南通市应用研究计划项目,国家自然科学基金,江苏省高校自然科学研究项目},
	Mendeley-Tags = {mutation},
	Number = {12},
	Title = {{Mutation Testing: Principal, Optimization And Application}},
	Volume = {06},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.3778/j.issn.1673-9418.2012.12.001}}

@inproceedings{Kintis2012,
	Author = {Kintis, Marinos and Papadakis, Mike and Malevris, Nicos},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis, Papadakis, Malevris - 2012 - ICST - Isolating First Order Equivalent Mutants via Second Order Mutation.pdf:pdf},
	Isbn = {978-0-7695-4670-4},
	Keywords = {equivalent mutants,higher order mutation,mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {701--710},
	Publisher = {Ieee},
	Title = {{Isolating First Order Equivalent Mutants via Second Order Mutation}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6200172},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2012.160}}

@phdthesis{Just2012,
	Author = {Just, Rene},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just - 2012 - Unknown - On Effective and Efficient Mutation Analysis for Unit and Integration Testing.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{On Effective and Efficient Mutation Analysis for Unit and Integration Testing}},
	Year = {2012}}

@inproceedings{Just2012b,
	Author = {Just, Rene},
	Booktitle = {ISSRE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just - 2012 - ISSRE - Using non-redundant mutation operators and test suite prioritization to achieve efficient and scalable mutation an.pdf:pdf},
	Title = {{Using non-redundant mutation operators and test suite prioritization to achieve efficient and scalable mutation analysis}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=6405400}}

@article{Nica2012,
	Author = {Nica, Simona and Wotawa, Franz},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Nica, Wotawa - 2012 - Electronic Proceedings in Theoretical Computer Science - Using Constraints for Equivalent Mutant Detection.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Nica, Wotawa - 2012 - Electronic Proceedings in Theoretical Computer Science - Using Constraints for Equivalent Mutant Detection.pdf:pdf},
	Issn = {2075-2180},
	Journal = {Electron. Proc. Theor. Comput. Sci.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Month = {jul},
	Pages = {1--8},
	Title = {{Using Constraints for Equivalent Mutant Detection}},
	Volume = {86},
	Year = {2012},
	Bdsk-Url-1 = {http://arxiv.org/abs/1207.2234v1},
	Bdsk-Url-2 = {http://dx.doi.org/10.4204/EPTCS.86.1}}

@article{Akinde2012,
	Author = {Akinde, Aderonke Olusola},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Akinde - 2012 - Asian Jouranl of Computer Science and Information Technology - Using Higher Order Mutation for Reducing Equivalent Mutan.pdf:pdf},
	Journal = {Asian Jouranl Comput. Sci. Inf. Technol.},
	Keywords = {equivalent mutants,higher order,mutants,mutation order,mutation testing},
	Pages = {13--18},
	Title = {{Using Higher Order Mutation for Reducing Equivalent Mutants in Mutation Testing}},
	Volume = {3},
	Year = {2012}}

@article{Durelli2012,
	Abstract = {High-level language virtual machines (HLL VMs) are now widely used to implement high-level programming languages. To a certain extent, their widespread adoption is due to the software engineering benefits provided by these managed execution environments, for example, garbage collection (GC) and cross-platform portability. Although HLL VMs are widely used, most research has concentrated on high-end optimizations such as dynamic compilation and advanced GC techniques. Few efforts have focused on introducing features that automate or facilitate certain software engineering activities, including software testing. This paper suggests that HLL VMs provide a reasonable basis for building an integrated software testing environment. As a proof-of-concept, we have augmented a Java virtual machine (JVM) to support weak mutation analysis. Our mutation-aware HLL VM capitalizes on the relationship between a program execution and the underlying managed execution environment, thereby speeding up the execution of the program under test and its associated mutants. To provide some evidence of the performance of our implementation, we conducted an experiment to compare the efficiency of our VM-based implementation with a strong mutation testing tool (muJava). Experimental results show that the VM-based implementation achieves speedups of as much as 89{\%} in some cases.},
	Author = {Durelli, Vinicius H S and Offutt, Jeff and Delamaro, Marcio E.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Durelli, Offutt, Delamaro - 2012 - Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICS.pdf:pdf},
	Isbn = {9780769546704},
	Issn = {2159-4848},
	Journal = {Proc. - IEEE 5th Int. Conf. Softw. Testing, Verif. Validation, ICST 2012},
	Keywords = {Java Virtual Machine,Maxine VM,Mutation Analysis,Software Testing,mu Java},
	Pages = {681--690},
	Title = {{Toward harnessing high-level language virtual machines for further speeding up weak mutation testing}},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2012.158}}

@inproceedings{Mateo2012,
	Author = {Mateo, Pedro Reales and Usaola, Macario Polo},
	Booktitle = {2012 IEEE Fifth Int. Conf. Softw. Testing, Verif. Valid.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo, Usaola - 2012 - 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation - Mutant Execution Cost.pdf:pdf},
	Isbn = {978-0-7695-4670-4},
	Keywords = {dofaster,dosmarter},
	Mendeley-Tags = {dofaster},
	Month = {apr},
	Pages = {664--672},
	Publisher = {Ieee},
	Title = {{Mutant Execution Cost Reduction: Through MUSIC (Mutant Schema Improved with Extra Code)}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6200168},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2012.156}}

@article{Meer2012,
	Author = {Meer, Ammar},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Meer - 2012 - Unknown - Mutation Sensitivity Testing Technique Implementation on Current Scientific Open Source Software.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {349--354},
	Title = {{Mutation Sensitivity Testing Technique Implementation on Current Scientific Open Source Software}},
	Year = {2012}}

@inproceedings{Just2012a,
	Author = {Just, Rene and Kapfhammer, Gregory M. and Schweiggert, Franz},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just, Kapfhammer, Schweiggert - 2012 - ICST - Do Redundant Mutants Affect the Effectiveness and Efficiency of Mutation Analysis.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Just, Kapfhammer, Schweiggert - 2012 - ICST - Do Redundant Mutants Affect the Effectiveness and Efficiency of Mutation Analysis(2).pdf:pdf},
	Isbn = {978-0-7695-4670-4},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {720--725},
	Publisher = {Ieee},
	Title = {{Do Redundant Mutants Affect the Effectiveness and Efficiency of Mutation Analysis?}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6200174},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2012.162}}

@article{Wei2012,
	Author = {Wei, Yi and Meyer, Bertrand and Oriol, Manuel},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Wei, Meyer, Oriol - 2012 - Empirical Software Engineering and Verification - Is branch coverage a good measure of testing effectiveness.pdf:pdf},
	Journal = {Empir. Softw. Eng. Verif.},
	Keywords = {branch coverage,experimental evaluation,random testing},
	Title = {{Is branch coverage a good measure of testing effectiveness?}},
	Year = {2012},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/978-3-642-25231-0%7B%5C_%7D5}}

@article{Dan2012,
	Author = {Dan, Haitao and Hierons, Robert M},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Dan, Hierons - 2012 - Unknown - Semantic Mutation Analysis of Floating-point Comparison.pdf:pdf},
	Isbn = {9780769546704},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Semantic Mutation Analysis of Floating-point Comparison}},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2012.41}}

@article{Patrick2012,
	Author = {Patrick, Matthew Timothy and Oriol, Manuel and Clark, John A},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Patrick, Oriol, Clark - 2012 - 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation - MESSI Mutant.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Patrick, Oriol, Clark - 2012 - 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation - MESSI Muta(2).pdf:pdf},
	Isbn = {978-0-7695-4670-4},
	Journal = {2012 IEEE Fifth Int. Conf. Softw. Testing, Verif. Valid.},
	Keywords = {-mutation testing,in,mutation,original program in semantics,our experiments,sampling,selected for mutation testing,static analysis,the average mutant in,the mutants most similar,the original program are,the top quarter is,to,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {apr},
	Pages = {711--719},
	Publisher = {Ieee},
	Title = {{MESSI: Mutant Evaluation by Static Semantic Interpretation}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6200173},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2012.161}}

@phdthesis{Hagman2012,
	Abstract = {Software is all around us in our lives in the industrialized world, and we as a society and individuals need it to function correctly. Software testing fills the role of performing behavior audits, to guide the correction of the software to its intended behavior. The consequences of faulty software can range to the late arrival of trains, to nuclear meltdowns. This places quality requirements on the software of various levels. Program based mutation testing provides a high level of faultfinding capability. It does this by injecting many synthetic faults into the code under test, as described by mutation operators. These faults are used to search for testcases that would identify such faults, and consequently find real faults that the synthetic faults mimic. However, mutation testing is costly on three accounts; each mutant of the original code is compiled, each mutant should ideally have an associated testcase to reveal that fault the mutant contains, finally the testcases are analyzed thoroughly by looking the output of the original and mutants to reveal the error in behavior. In order to reduce cost while maintaining a high level of faultfinding, selective mutation testing is investigated, it uses a subset of all the available mutation operators. The investigation found that using Absolute value-, and Relational operator-, mutation reduces cost of mutation testing by 80{\%}, while uncovering 83{\%} of the injected faults. Keywords:},
	Author = {Hagman, Hans},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hagman - 2012 - Unknown - Mutation Testing A comparison of mutation selection methods.pdf:pdf},
	Keywords = {mutation,survey,unread},
	Mendeley-Tags = {mutation,survey,unread},
	Title = {{Mutation Testing : A comparison of mutation selection methods}},
	Year = {2012}}

@inproceedings{Jalbert2012,
	Annote = {Uses machine learning techniques tocome up with a model.},
	Author = {Jalbert, Kevin and Bradbury, Jeremy S},
	Booktitle = {RAISE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jalbert, Bradbury - 2012 - RAISE - Predicting mutation score using source code and test suite metrics.pdf:pdf},
	Isbn = {978-1-4673-1753-5},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {jun},
	Number = {September},
	Pages = {42--46},
	Publisher = {Ieee},
	Title = {{Predicting mutation score using source code and test suite metrics}},
	Year = {2012},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6227969},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/RAISE.2012.6227969}}

@inproceedings{Groce2012,
	Address = {New York, New York, USA},
	Author = {Groce, Alex and Zhang, Chaoqiang and Eide, Eric and Chen, Yang and Regehr, John},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce et al. - 2012 - ISSTA - Swarm testing.pdf:pdf},
	Isbn = {9781450314541},
	Keywords = {configuration diversity,mutation,random testing,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {78},
	Publisher = {ACM Press},
	Title = {{Swarm testing}},
	Volume = {1},
	Year = {2012},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2338965.2336763},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2338965.2336763}}

@inproceedings{Gligoric2013,
	Abstract = {A fundamental question in software testing research is how to compare test suites, often as a means for comparing test- generation techniques. Researchers frequently compare test suites by measuring their coverage. A coverage criterion C provides a set of test requirements and measures how many requirements a given suite satisfies. A suite that satisfies 100{\%} of the (feasible) requirements is C-adequate. Previous rigorous evaluations of coverage criteria mostly fo- cused on such adequate test suites: given criteria C and C′, are C-adequate suites (on average) more effective than C′- adequate suites? However, in many realistic cases producing adequate suites is impractical or even impossible. We present the first extensive study that evaluates cover- compare suites based on c1, c2 . . . cn or based on c′ 1, c′ 2 . . . c′ age criteria for the common case of non-adequate test suites: given criteria C and C′, which one is better to use to com- pare test suites? Namely, if suites T1,T2 . . .Tn have coverage values c1, c2 . . . cn for C and c′ 2 . . . c′ n for C′, is it better to 1, c′ n? We evaluate a large set of plausible criteria, including state- ment and branch coverage, as well as stronger criteria used in recent studies. Two criteria perform best: branch cover- age and an intra-procedural acyclic path coverage.},
	Author = {Gligoric, Milos and Groce, Alex and Zhang, Chaoqiang and Sharma, Rohan and Alipour, Amin and Marinov, Darko},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gligoric et al. - 2013 - ISSTA - Comparing Non-adequate Test Suites using Coverage Criteria.pdf:pdf},
	Isbn = {9781450321594},
	Keywords = {and,coverage criteria,faults,for real faults,mutation,non-adequate test suites,or coverage criteria,previously known or,re-,researchers typically use real,searchers measure how many,seeded faults,to compare suites,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Comparing Non-adequate Test Suites using Coverage Criteria}},
	Year = {2013}}

@article{Xu2013,
	Author = {Xu, Gaochao and Dong, Yushuang and Fu, Xiaodong and Ding, Yan and Zhao, Jia and Liu, Xinzhong},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Xu et al. - 2013 - Journal of Software - An Approach for Domain Reduction with Data Dependence in Mutation Testing.pdf:pdf},
	Issn = {1796-217X},
	Journal = {J. Softw.},
	Month = {jun},
	Number = {6},
	Pages = {1511--1517},
	Title = {{An Approach for Domain Reduction with Data Dependence in Mutation Testing}},
	Volume = {8},
	Year = {2013},
	Bdsk-Url-1 = {http://ojs.academypublisher.com/index.php/jsw/article/view/9384},
	Bdsk-Url-2 = {http://dx.doi.org/10.4304/jsw.8.6.1511-1517}}

@article{Ernst2013,
	Author = {Ernst, Michael D and Fraser, Gordon},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ernst, Fraser - 2013 - Symbolic Methods in Testing - Using State Infection Conditions to Detect Equivalent Mutants and Speed up Mutation.pdf:pdf},
	Journal = {Symb. Methods Test.},
	Pages = {1--5},
	Title = {{Using State Infection Conditions to Detect Equivalent Mutants and Speed up Mutation Analysis}},
	Year = {2013}}

@article{Patrick2013,
	Author = {Patrick, Matthew Timothy and Alexander, Rob and Oriol, Manuel and Clark, John A},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Patrick et al. - 2013 - 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops - Using Muta.pdf:pdf},
	Isbn = {978-0-7695-4993-4},
	Journal = {2013 IEEE Sixth Int. Conf. Softw. Testing, Verif. Valid. Work.},
	Keywords = {-mutation testing,eration,evolution strategy,follows,ii explores our background,input distribution,motivation,mutation,paper is organised as,search based,section,section iii explains,test case gen-,the rest of this},
	Mendeley-Tags = {mutation},
	Month = {mar},
	Pages = {53--62},
	Publisher = {Ieee},
	Title = {{Using Mutation Analysis to Evolve Subdomains for Random Testing}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6571608},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSTW.2013.14}}

@inproceedings{Groce2013,
	Author = {Groce, Alex and Zhang, Chaoqiang and Alipour, Amin and Eide, Eric and Chen, Yang and Regehr, John},
	Booktitle = {ISSRE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce et al. - 2013 - ISSRE - Help, help, i'm being suppressed! The significance of suppressors in software testing.pdf:pdf},
	Isbn = {978-1-4799-2366-3},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {nov},
	Pages = {390--399},
	Publisher = {Ieee},
	Title = {{Help, help, i'm being suppressed! The significance of suppressors in software testing}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6698892},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ISSRE.2013.6698892}}

@article{Natella2013,
	Abstract = {The injection of software faults in software components to assess the impact of these faults on other components or on the system as a whole, allowing the evaluation of fault tolerance, is relatively new compared to decades of research on hardware fault injection. This paper presents an extensive experimental study (more than 3.8 million individual experiments in three real systems) to evaluate the representativeness of faults injected by a state-of-the-art approach (G-SWFIT). Results show that a significant share (up to 72 percent) of injected faults cannot be considered representative of residual software faults as they are consistently detected by regression tests, and that the representativeness of injected faults is affected by the fault location within the system, resulting in different distributions of representative/nonrepresentative faults across files and functions. Therefore, we propose a new approach to refine the faultload by removing faults that are not representative of residual software faults. This filtering is essential to assure meaningful results and to reduce the cost (in terms of number of faults) of software fault injection campaigns in complex software. The proposed approach is based on classification algorithms, is fully automatic, and can be used for improving fault representativeness of existing software fault injection approaches.},
	Annote = {Study of representativeness of faults injected by G-SWIFT. About 72{\%} are detected by regression tests.

A similarity is in the residual faults and stubborn mutants.

What about equivalent mutants.},
	Author = {Natella, Roberto and Cotroneo, Domenico and Duraes, Joao a. and Madeira, Henrique S.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Natella et al. - 2013 - IEEE Transactions on Software Engineering - On fault representativeness of software fault injection.pdf:pdf},
	Isbn = {0098-5589},
	Issn = {00985589},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {Software fault injection,experimental dependability evaluation,fault-tolerant systems,software reliability},
	Number = {1},
	Pages = {80--96},
	Title = {{On fault representativeness of software fault injection}},
	Volume = {39},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TSE.2011.124}}

@inproceedings{Zhang2013,
	Address = {New York, New York, USA},
	Author = {Zhang, Lingming and Marinov, Darko and Khurshid, Sarfraz},
	Booktitle = {ISSTA},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang, Marinov, Khurshid - 2013 - ISSTA - Faster Mutation Testing Inspired by Test Prioritization and Reduction.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Zhang, Marinov, Khurshid - 2013 - ISSTA - Faster Mutation Testing Inspired by Test Prioritization and Reduction(2).pdf:pdf},
	Isbn = {9781450321594},
	Keywords = {mutation,mutation testing,test prioritization,test reduction,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {235},
	Publisher = {ACM Press},
	Title = {{Faster Mutation Testing Inspired by Test Prioritization and Reduction}},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2483760.2483782},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2483760.2483782}}

@article{Hassan2013,
	Author = {Hassan, Mohammad Mahdi and Andrews, James H},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Hassan, Andrews - 2013 - ICSE - Comparing Multi-Point Stride Coverage and dataflow coverage.pdf:pdf},
	Isbn = {978-1-4673-3076-3},
	Journal = {ICSE},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {may},
	Pages = {172--181},
	Publisher = {Ieee},
	Title = {{Comparing Multi-Point Stride Coverage and dataflow coverage}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6606563},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSE.2013.6606563}}

@inproceedings{Bluemke2013,
	Address = {Heidelberg},
	Author = {Bluemke, Ilona and Kulesza, Karol},
	Booktitle = {Proc. Conf. Des. Autom. Test Eur.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Editor = {Zamojski, Wojciech and Mazurkiewicz, Jacek and Sugier, Jaros{\l}aw and Walkowiak, Tomasz and Kacprzyk, Janusz},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bluemke, Kulesza - 2013 - Proceedings of the conference on Design, Automation and Test in Europe - Reduction of Computational Cost in Mu.pdf:pdf},
	Isbn = {978-3-319-00944-5},
	Keywords = {mutation,reviewed},
	Mendeley-Tags = {mutation,reviewed},
	Pages = {41--51},
	Publisher = {Springer International Publishing},
	Series = {Advances in Intelligent Systems and Computing},
	Title = {{Reduction of Computational Cost in Mutation Testing by Sampling Mutants}},
	Volume = {224},
	Year = {2013},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/978-3-319-00945-2},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-319-00945-2}}

@inproceedings{Mesbah2013,
	Author = {Mesbah, Ali},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mesbah - 2013 - ICST - Efficient JavaScript Mutation Testing.pdf:pdf},
	Keywords = {-mutation testing,equivalent mutant,javascript},
	Title = {{Efficient JavaScript Mutation Testing}},
	Year = {2013}}

@article{Schulte2013,
	Author = {Schulte, Eric and Fry, Zachary P and Fast, Ethan and Weimer, Westley and Forrest, Stephanie},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schulte et al. - 2013 - GPEM - Software mutational robustness.pdf:pdf},
	Issn = {1389-2576},
	Journal = {GPEM},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Month = {jul},
	Title = {{Software mutational robustness}},
	Year = {2013},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s10710-013-9195-8},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s10710-013-9195-8}}

@inproceedings{Assis2013,
	Author = {Assis, Andre Lobo De Oliveira and Camilo-junior, Celso Goncalves and Vincenzi, Auri Marcelo Rizzo},
	Booktitle = {IEEE Congr. Evol. Comput.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Assis, Camilo-junior, Vincenzi - 2013 - IEEE Congresson Evolutionary Computation - A Coevolutionary Algorithm to Automatic Test Case S e.pdf:pdf},
	Isbn = {9781479904549},
	Keywords = {-mutation testing,mutation,search-based sof},
	Mendeley-Tags = {mutation},
	Title = {{A Coevolutionary Algorithm to Automatic Test Case S election and Mutant in Mutation Testing}},
	Year = {2013}}

@phdthesis{Niedermayr2013,
	Author = {Niedermayr, Rainer},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Niedermayr - 2013 - Unknown - Meaningful and Practical Measures for Regression Test Reliability.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Meaningful and Practical Measures for Regression Test Reliability}},
	Year = {2013}}

@article{Assylbekov2013,
	Abstract = {Strong test suites ensure the correctness and quality of software. Coverage and Mutation score are widespread metrics for evaluating the quality of a test suite. Mutation analysis process improves a test suite to obtain higher coverage scores. We investigate the correlation between the mutation score and coverage scores (branch, statement, method and class) based on an open source program with a comprehensive pool of test cases and analyse the result sets using Atlassian Clover[2] and PIT[1]. Our experimental study has shown that mutation analysis can be used to produce quality test cases and to improve coverage scores in a feasible amount of time},
	Annote = {* Looks at the correlation between sequentially selected test cases
from a single github project spojo, with clover and pit test, and   finds 0.66 R{\^{}}2

      },
	Author = {Assylbekov, Berik and Gaspar, Erick and Uddin, Nasir and Egan, Paul},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Assylbekov et al. - 2013 - ICCMS - Investigating the Correlation between Mutation Score and Coverage Score.pdf:pdf},
	Isbn = {978-1-4673-6421-8},
	Journal = {ICCMS},
	Keywords = {-coverage score,assertions,mutation,mutation analysis,mutation score,reviewed,strategies,testing,testing and debugging,unread},
	Mendeley-Tags = {mutation,reviewed,unread},
	Month = {apr},
	Pages = {347--352},
	Publisher = {Ieee},
	Title = {{Investigating the Correlation between Mutation Score and Coverage Score}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6527442},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/UKSim.2013.28}}

@phdthesis{Mateo2013a,
	Author = {Mateo, Pedro Reales},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo - 2013 - Unknown - MuSaCa Mutation Testing at System and Multi-Class levels.pdf:pdf},
	Number = {January},
	Title = {{MuSaCa Mutation Testing at System and Multi-Class levels}},
	Year = {2013}}

@article{Weimer2013,
	Author = {Weimer, Westley and Fry, Zachary P and Forrest, Stephanie},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Weimer, Fry, Forrest - 2013 - ASE - Leveraging Program Equivalence for Adaptive Program Repair Models and First Results.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Weimer, Fry, Forrest - 2013 - ASE - Leveraging Program Equivalence for Adaptive Program Repair Models and First Results.pdf:pdf},
	Isbn = {9781479902156},
	Journal = {ASE},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	Pages = {356--366},
	Title = {{Leveraging Program Equivalence for Adaptive Program Repair : Models and First Results}},
	Year = {2013}}

@techreport{Report2013,
	Author = {Coverity},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Coverity - 2013 - Unknown - Coverity Scan 2013 Open Source Report.pdf:pdf},
	Title = {{Coverity Scan : 2013 Open Source Report}},
	Year = {2013}}

@article{Kaminski2013,
	Author = {Kaminski, Gary and Ammann, Paul and Offutt, Jeff},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kaminski, Ammann, Offutt - 2013 - Journal of Systems and Software - Improving Logic-Based Testing.pdf:pdf},
	Journal = {J. Syst. Softw.},
	Keywords = {logic-based testing,mutation analysis,software testing},
	Title = {{Improving Logic-Based Testing}},
	Year = {2013}}

@phdthesis{Serapilha2013,
	Author = {Serapilha, Vinicius Humberto Durelli},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Serapilha - 2013 - Unknown - Toward harnessing a Java high-level language virtual machine for supporting software testing.pdf:pdf},
	Title = {{Toward harnessing a Java high-level language virtual machine for supporting software testing}},
	Year = {2013}}

@inproceedings{Papadakis2013,
	Address = {New York, New York, USA},
	Author = {Papadakis, Mike and {Le Traon}, Yves},
	Booktitle = {Proc. 28th Annu. ACM Symp. Appl. Comput. - SAC '13},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Le Traon - 2013 - Proceedings of the 28th Annual ACM Symposium on Applied Computing - SAC '13 - Mutation testing strategies u.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Le Traon - 2013 - Proceedings of the 28th Annual ACM Symposium on Applied Computing - SAC '13 - Mutation testing strategie(2).pdf:pdf},
	Isbn = {9781450316569},
	Keywords = {Mutant Classifi,Mutants' Impact,Mutation Testing,equivalent mutants,impact,mutant classification,mutants,mutation,mutation testing},
	Mendeley-Tags = {equivalent mutants,mutation},
	Pages = {1223},
	Publisher = {ACM Press},
	Title = {{Mutation testing strategies using mutant classification}},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2480362.2480592%20http://dl.acm.org/citation.cfm?id=2480592},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2480362.2480592}}

@article{Mateo2013,
	Author = {Mateo, Pedro Reales and Usaola, Macario Polo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo, Usaola - 2013 - Software Testing, Verification and Reliability - Parallel mutation testing.pdf:pdf},
	Issn = {09600833},
	Journal = {Softw. Testing, Verif. Reliab.},
	Month = {jun},
	Number = {4},
	Pages = {315--350},
	Title = {{Parallel mutation testing}},
	Volume = {23},
	Year = {2013},
	Bdsk-Url-1 = {http://doi.wiley.com/10.1002/stvr.1471},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr.1471}}

@article{Schuler2013,
	Author = {Schuler, David and Zeller, Andreas},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2013 - Unknown - Covering and Uncovering Equivalent Mutants.pdf:pdf},
	Keywords = {code coverage,dynamic analysis,mutation,mutation testing},
	Mendeley-Tags = {mutation},
	Number = {April 2012},
	Pages = {353--374},
	Title = {{Covering and Uncovering Equivalent Mutants}},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/stvr}}

@article{Singh2013,
	Author = {Singh, Shikha and Jain, Swati},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Singh, Jain - 2013 - VSRD International Journal of Computer Science and Information Technology - A Study on Equivalent Mutants Detecting.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Singh, Jain - 2013 - VSRD International Journal of Computer Science and Information Technology - A Study on Equivalent Mutants Detect(2).pdf:pdf},
	Journal = {VSRD Int. J. Comput. Sci. Inf. Technol.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{A Study on Equivalent Mutants Detecting Techniques}},
	Year = {2013}}

@article{Gligoric2013a,
	Address = {New York, New York, USA},
	Author = {Gligoric, Milos and Zhang, Lingming and Pereira, Cristiano and Pokam, Gilles},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gligoric et al. - 2013 - Proceedings of the 2013 International Symposium on Software Testing and Analysis - ISSTA 2013 - Selective mutat.pdf:pdf},
	Isbn = {9781450321594},
	Journal = {Proc. 2013 Int. Symp. Softw. Test. Anal. - ISSTA 2013},
	Keywords = {concurrent code,selective mutation testing},
	Pages = {224},
	Publisher = {ACM Press},
	Title = {{Selective mutation testing for concurrent code}},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2483760.2483773},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2483760.2483773}}

@article{Bowman2013,
	Author = {Bowman, Ivan T and Ag, S A P},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bowman, Ag - 2013 - Unknown - Mutatis Mutandis Evaluating DBMS Test Adequacy with Mutation Testing.pdf:pdf},
	Keywords = {database servers,mutation testing},
	Title = {{Mutatis Mutandis : Evaluating DBMS Test Adequacy with Mutation Testing}},
	Year = {2013}}

@phdthesis{Sharma2013,
	Author = {Sharma, Rohan},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sharma - 2013 - Unknown - Guidelines for coverage-based comparisons of non-adequate test suites.pdf:pdf},
	Keywords = {mutation,unread},
	Mendeley-Tags = {mutation,unread},
	School = {University of Illinois Urbana-Champaign},
	Title = {{Guidelines for coverage-based comparisons of non-adequate test suites}},
	Type = {Thesis},
	Year = {2013}}

@phdthesis{Patrick2013b,
	Author = {Patrick, Matthew Timothy},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Patrick - 2013 - Unknown - Mutation-Optimised Subdomains for Test Data Generation and Program Analysis.pdf:pdf},
	Number = {September},
	Title = {{Mutation-Optimised Subdomains for Test Data Generation and Program Analysis}},
	Year = {2013}}

@article{Jhamb2013,
	Author = {Jhamb, Megha and Singhal, Abhishek},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jhamb, Singhal - 2013 - Unknown - An Efficient Approach for Equivalent Mutants Detection using Fuzzy Logic.pdf:pdf},
	Keywords = {Mutation Testing, Mutants, Equivalent Mutant, Reac},
	Number = {6},
	Pages = {819--822},
	Title = {{An Efficient Approach for Equivalent Mutants Detection using Fuzzy Logic}},
	Volume = {4},
	Year = {2013}}

@article{Inozemtseva2013,
	Address = {New York, New York, USA},
	Author = {Inozemtseva, Laura and Hemmati, Hadi and Holmes, Reid},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Inozemtseva, Hemmati, Holmes - 2013 - Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESECFSE 2013 -.pdf:pdf},
	Isbn = {9781450322379},
	Journal = {Proc. 2013 9th Jt. Meet. Found. Softw. Eng. - ESEC/FSE 2013},
	Keywords = {fault history,mutant reduction,mutation testing,test suite},
	Pages = {639},
	Publisher = {ACM Press},
	Title = {{Using fault history to improve mutation reduction}},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2491411.2494586},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2491411.2494586}}

@inproceedings{Zhang2013b,
	Author = {Zhang, Lingming and Zhang, Lu and Khurshid, Sarfraz},
	Booktitle = {ACM SIGPLAN Int. Conf. OO Program. Syst. Lang. Appl.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang, Zhang, Khurshid - 2013 - ACM SIGPLAN International Conference on OO Programming Systems Languages and Applications - Injecting Me.pdf:pdf},
	Isbn = {9781450323741},
	Keywords = {fault,localization,mutation,mutation testing,regression testing,software evolution,unread},
	Mendeley-Tags = {mutation,unread},
	Title = {{Injecting Mechanical Faults to Localize Developer Faults for Evolving Software}},
	Year = {2013}}

@inproceedings{Lisherness2013,
	Abstract = {Mutation testing is an established technique for evaluating validation thoroughness, but its adoption has been limited by the manual effort required to analyze the results. This paper describes the use of coverage discounting for mutation analysis, where undetected mutants are explained in terms of functional coverpoints, simplifying their analysis and saving effort. Two benchmarks are shown to compare this improved flow against regular mutation analysis. We also propose a confidence metric and simulation ordering algorithm optimized for coverage discounting, potentially reducing overall simulation time.},
	Author = {Lisherness, Peter and Lesperance, Nicole and Cheng, Kwang-ting Tim},
	Booktitle = {Conf. Des. Autom. Test Eur.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lisherness, Lesperance, Cheng - 2013 - Conference on Design, Automation and Test in Europe - Mutation Analysis with Coverage Discounting.pdf:pdf},
	Isbn = {9783981537000},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {7--10},
	Title = {{Mutation Analysis with Coverage Discounting}},
	Year = {2013}}

@article{Kintis2013,
	Author = {Kintis, Marinos and Malevris, Nicos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis, Malevris - 2013 - 2013 20th Asia-Pacific Software Engineering Conference (APSEC) - Identifying More Equivalent Mutants via Code.pdf:pdf},
	Isbn = {978-1-4799-2144-7},
	Journal = {2013 20th Asia-Pacific Softw. Eng. Conf.},
	Keywords = {-mutation testing,equivalent mutants,similar code},
	Month = {dec},
	Pages = {180--188},
	Publisher = {Ieee},
	Title = {{Identifying More Equivalent Mutants via Code Similarity}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6805405},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/APSEC.2013.34}}

@article{Baker2013,
	Abstract = {Testing provides a primary means for assuring software in safety-critical systems. To demonstrate, particularly to a certification authority, that sufficient testing has been performed, it is necessary to achieve the test coverage levels recommended or mandated by safety standards and industry guidelines. Mutation testing provides an alternative or complementary method of measuring test sufficiency, but has not been widely adopted in the safety-critical industry. In this study, we provide an empirical evaluation of the application of mutation testing to airborne software systems which have already satisfied the coverage requirements for certification. Specifically, we apply mutation testing to safety-critical software developed using high-integrity subsets of C and Ada, identify the most effective mutant types, and analyze the root causes of failures in test cases. Our findings show how mutation testing could be effective where traditional structural coverage analysis and manual peer review have failed. They also show that several testing issues have origins beyond the test activity, and this suggests improvements to the requirements definition and coding process. Our study also examines the relationship between program characteristics and mutation survival and considers how program size can provide a means for targeting test areas most likely to have dormant faults. Industry feedback is also provided, particularly on how mutation testing can be integrated into a typical verification life cycle of airborne software.},
	Author = {Baker, Richard and Habli, Ibrahim},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Baker, Habli - 2013 - IEEE Transactions on Software Engineering - An Empirical Evaluation of Mutation Testing for Improving the Test Qua.pdf:pdf},
	Issn = {0098-5589},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Month = {jun},
	Number = {6},
	Pages = {787--805},
	Title = {{An Empirical Evaluation of Mutation Testing for Improving the Test Quality of Safety-Critical Software}},
	Volume = {39},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6298894},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TSE.2012.56}}

@article{Ferna2013,
	Author = {Mateo, Pedro Reales and Ferna, Luis and Mateo, Pedro Reales and Usaola, Macario Polo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo et al. - 2013 - IEEE Transactions on Software Engineering - Validating Second-Order Mutation at System Level.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Mateo et al. - 2013 - IEEE Transactions on Software Engineering - Validating Second-Order Mutation at System Level.pdf:pdf},
	Journal = {IEEE Trans. Softw. Eng.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {4},
	Pages = {570--587},
	Title = {{Validating Second-Order Mutation at System Level}},
	Volume = {39},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=6216382}}

@article{Sarkar2013,
	Author = {Sarkar, Tanmoy},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sarkar - 2013 - Unknown - Testing database applications using coverage analysis and mutation analysis.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Sarkar - 2013 - Unknown - Testing database applications using coverage analysis and mutation analysis.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Testing database applications using coverage analysis and mutation analysis}},
	Year = {2013}}

@inproceedings{Zhang2013a,
	Annote = {
Operator-Based and Random Mutant Selection : Better Together









- Zhang, Lingming; Gligoric, Milos; Marinov, Darko; Khurshid, Sarfraz







Studies combination of operator based and random sampling techniques, and finds that first doing operator based techniques for a set of each and also separated by the program elements (best is method), and out of these, choose x{\%} in each is the best strategy. Infact, just taking x{\%} of mutants directly from each program element is also good enough (without worrying about operators).},
	Author = {Zhang, Lingming and Gligoric, Milos and Marinov, Darko and Khurshid, Sarfraz},
	Booktitle = {IEEE/ACM ASE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2013 - IEEEACM ASE - Operator-Based and Random Mutant Selection Better Together.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2013 - IEEEACM ASE - Operator-Based and Random Mutant Selection Better Together.pdf:pdf},
	Isbn = {9781479902156},
	Keywords = {mutation,printed,reviewed,unread},
	Mendeley-Tags = {mutation,printed,reviewed,unread},
	Month = {nov},
	Pages = {92--102},
	Publisher = {Ieee},
	Title = {{Operator-Based and Random Mutant Selection : Better Together}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6693070},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ASE.2013.6693070}}

@article{Delahaye2013,
	Author = {Delahaye, Mickael and du Bousquet, Lydie},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delahaye, du Bousquet - 2013 - 2013 13th International Conference on Quality Software - A Comparison of Mutation Analysis Tools for Java.pdf:pdf},
	Isbn = {978-0-7695-5039-8},
	Journal = {2013 13th Int. Conf. Qual. Softw.},
	Keywords = {mutation,tools},
	Mendeley-Tags = {mutation,tools},
	Month = {jul},
	Pages = {187--195},
	Publisher = {Ieee},
	Title = {{A Comparison of Mutation Analysis Tools for Java}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6605925},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/QSIC.2013.47}}

@article{Patrick2013a,
	Author = {Patrick, Matthew Timothy and Alexander, Rob and Oriol, Manuel and Clark, John A},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Patrick et al. - 2013 - 2013 20th Asia-Pacific Software Engineering Conference (APSEC) - Selecting Highly Efficient Sets of Subdomains f.pdf:pdf},
	Isbn = {978-1-4799-2144-7},
	Journal = {2013 20th Asia-Pacific Softw. Eng. Conf.},
	Month = {dec},
	Pages = {91--98},
	Publisher = {Ieee},
	Title = {{Selecting Highly Efficient Sets of Subdomains for Mutation Adequacy}},
	Year = {2013},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6805394},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/APSEC.2013.23}}

@misc{Jia2013,
	Author = {Jia, Yue and Harman, Mark},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia, Harman - 2013 - Unknown - presoHigher Order Mutation Testing.pdf:pdf},
	Publisher = {Information and Software Technology , 2009},
	Title = {{preso:Higher Order Mutation Testing}},
	Year = {2013}}

@inproceedings{Deng,
	Abstract = {Mutation analysis is widely considered to be an exceptionally effective criterion for designing tests. It is also widely considered to be expensive in terms of the number of test requirements and in the amount of execution needed to create a good test suite. This paper posits that simply deleting statements, implemented with the statement deletion (SDL) mutation operators in Mothra, is enough to get very good tests. A version of the SDL operator for Java was designed and implemented inside the muJava mutation system. The SDL operator was applied to 40 separate Java classes, tests were designed to kill the non-equivalent SDL mutants, and then run against all mutants.},
	Author = {Deng, Lin and Offutt, A Jefferson and Li, Nan},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Deng, Offutt, Li - 2013 - ICST - Empirical Evaluation of the Statement Deletion Mutation Operator.pdf:pdf},
	Keywords = {mutation,selective mutation},
	Mendeley-Tags = {mutation,selective mutation},
	Title = {{Empirical Evaluation of the Statement Deletion Mutation Operator}},
	Year = {2013}}

@article{Chen2013,
	Address = {New York, New York, USA},
	Annote = {* The goal of fuzzertamer is to rank failure-inducing test cases such that any prefix of ranked    list triggers as many different faults as possible
* Assumption: The more similar the test cases or two executons of the compiler on those, the more  likely they are to stem from same fault - similarity based on different distance functions.
* Distance functions: Levenstein : smallest number of character additions/deletions
* Distance functions: Euclidean : By the distance of token based lexical feature vectors, which are word counts of each word in the reduced test case. Another feature vector is one containing the     number of execution of function names per test case.

      },
	Author = {Chen, Yang and Groce, Alex and Zhang, Chaoqiang and Wong, Weng-Keen and Fern, Xiaoli and Eide, Eric and Regehr, John},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Chen et al. - 2013 - PLDI - Taming compiler fuzzers.pdf:pdf},
	Isbn = {9781450320146},
	Journal = {PLDI},
	Keywords = {automated testing,bug reporting,compiler defect,compiler testing,fuzz testing,mutation,random testing,reviewed,test-case reduction,unread},
	Mendeley-Tags = {mutation,reviewed,unread},
	Pages = {197},
	Publisher = {ACM Press},
	Title = {{Taming compiler fuzzers}},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2491956.2462173},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2491956.2462173}}

@phdthesis{Norman2014,
	Author = {Norman, Niclas},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Norman - 2014 - Unknown - Mutation testing as quality assurance in base station software.pdf:pdf},
	Title = {{Mutation testing as quality assurance in base station software}},
	Year = {2014}}

@article{Reales2014,
	Abstract = {This article gives a short overview of the main characteristics of mutation tools. If a test suite finds all the artificial errors inserted in the mutants and finds no fault in the original, it's likely that the program under test is free of them. Obviously, the validity of this affirmation depends on the nature of the artificial fault: some of them are better than others. This testing technique has been used in the research arena to check the effectiveness of new proposed testing techniques, but it hasn't been used until recently in industry due to its costs and the lack of knowledge and industrial tools.},
	Author = {Reales, Pedro and Polo, Macario and Fernandez-Aleman, Jose Luis and Toval, Ambrosio and Piattini, Mario},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Reales et al. - 2014 - Software, IEEE - Mutation Testing.pdf:pdf},
	Isbn = {0740-7459 VO - 31},
	Issn = {07407459},
	Journal = {Software, IEEE},
	Keywords = {debugging,mutation testing,software testing,test suite},
	Pages = {30--35},
	Title = {{Mutation Testing}},
	Volume = {31},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2014.68}}

@article{Papadakis2014b,
	Author = {Papadakis, Mike and Delamaro, Marcio Eduardo and {Le Traon}, Yves},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Delamaro, Le Traon - 2014 - Science of Computer Programming - Mitigating the effects of equivalent mutants with mutant classi.pdf:pdf},
	Issn = {01676423},
	Journal = {Sci. Comput. Program.},
	Month = {dec},
	Pages = {298--319},
	Publisher = {Elsevier B.V.},
	Title = {{Mitigating the effects of equivalent mutants with mutant classification strategies}},
	Volume = {95},
	Year = {2014},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0167642314002603},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.scico.2014.05.012}}

@article{Brucker2014,
	Author = {Schuler, David and Zeller, Andreas},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schuler, Zeller - 2014 - Software Testing Verification and Reliability - Checked coverage an Indicator for Oracle Quality.pdf:pdf},
	Issn = {10991689},
	Journal = {Softw. Test. Verif. Reliab.},
	Keywords = {coverage metrics,dynamic slicing,mutation testing,test suite quality},
	Number = {8},
	Pages = {591--592},
	Title = {{Checked coverage: an Indicator for Oracle Quality}},
	Volume = {24},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/stvr}}

@inproceedings{Groce2014,
	Author = {Groce, Alex and Alipour, Amin and Zhang, Chaoqiang and Chen, Yang and Regehr, John},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce et al. - 2014 - ICST - Cause Reduction for Quick Testing.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Title = {{Cause Reduction for Quick Testing}},
	Year = {2014}}

@inproceedings{Just,
	Annote = {- First isolated real faults by relying on keyword search
- Can the fault be reproduced? i.e does a test fail?
- Prune the commit to remove irrelevant changes.
(rev{\_}bug, rev{\_}fix)
- Get two test suites (T{\_}pass, T{\_}fail)
* By excluding failing tests},
	Author = {Just, Rene and Jalali, Darioush and Inozemtseva, Laura and Ernst, Michael D and Holmes, Reid and Fraser, Gordon},
	Booktitle = {FSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just et al. - 2014 - FSE - Are mutants a valid substitute for real faults in software testing.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Just et al. - 2014 - FSE - Are mutants a valid substitute for real faults in software testing(2).pdf:pdf},
	Title = {{Are mutants a valid substitute for real faults in software testing?}},
	Year = {2014}}

@article{Madeyski2014a,
	Author = {Madeyski, Lech and Orzeszyna, Wojciech},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Madeyski, Orzeszyna - 2014 - Unknown - Overcoming the Equivalent Mutant Problem A Systematic Literature Review and a Comparative Experi.pdf:pdf},
	Number = {1},
	Pages = {23--42},
	Title = {{Overcoming the Equivalent Mutant Problem : A Systematic Literature Review and a Comparative Experiment of Second Order Mutation}},
	Volume = {40},
	Year = {2014}}

@article{Mateo2014,
	Author = {Mateo, Pedro Reales and Usaola, Macario Polo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Mateo, Usaola - 2014 - Software Testing, Verification and Reliability - Reducing mutation costs through uncovered mutants.pdf:pdf},
	Issn = {09600833},
	Journal = {Softw. Testing, Verif. Reliab.},
	Month = {may},
	Pages = {n/a--n/a},
	Title = {{Reducing mutation costs through uncovered mutants}},
	Year = {2014},
	Bdsk-Url-1 = {http://doi.wiley.com/10.1002/stvr.1534},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr.1534}}

@inproceedings{Kurtz2014,
	Author = {Kurtz, Bob and Ammann, Paul and Delamaro, Marcio Eduardo and Offutt, A Jefferson and Deng, Lin},
	Booktitle = {ICSTW},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kurtz et al. - 2014 - ICSTW - Mutant Subsumption Graphs.pdf:pdf},
	Keywords = {mutation,mutation testing,subsumption},
	Mendeley-Tags = {mutation},
	Title = {{Mutant Subsumption Graphs}},
	Year = {2014}}

@techreport{Gopinath2014a,
	Author = {Gopinath, Rahul and Jensen, Carlos and Groce, Alex},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gopinath, Jensen, Groce - 2014 - Unknown - Mutant Census An Empirical Examination of the Competent Programmer Hypothesis.pdf:pdf},
	Keywords = {empirical analysis,mutation,real faults,test frameworks},
	Title = {{Mutant Census : An Empirical Examination of the Competent Programmer Hypothesis}},
	Year = {2014}}

@inproceedings{Ammann2014,
	Author = {Ammann, Paul and Delamaro, Marcio Eduardo and Offutt, A Jefferson},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ammann, Delamaro, Offutt - 2014 - ICST - Establishing Theoretical Minimal Sets of Mutants.pdf:pdf},
	Keywords = {- mutation testing,dynamic,minimal mutant sets,mutation},
	Mendeley-Tags = {mutation},
	Title = {{Establishing Theoretical Minimal Sets of Mutants}},
	Year = {2014}}

@techreport{Derezinska2014,
	Author = {Derezinska, Anna and Ha{\l}as, Konrad and Ha{\l}as, Konrad},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezinska, Ha{\l}as, Ha{\l}as - 2014 - Unknown - Operators for Mutation Testing of Python Programs.pdf:pdf},
	Title = {{Operators for Mutation Testing of Python Programs}},
	Year = {2014}}

@article{Mirshokraie2014a,
	Author = {Mirshokraie, Shabnam and Mesbah, Ali and Pattabiraman, Karthik},
	Journal = {IEEE Trans. Softw. Eng.},
	Title = {{Guided Mutation Testing for JavaScript Web Applications}},
	Year = {2014}}

@inproceedings{Harman2014,
	Annote = {May provide an alternative to mutant seleciton},
	Author = {Harman, Mark and Jia, Yue and Mateo, Pedro Reales and Polo, Macario},
	Booktitle = {ASE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Harman et al. - 2014 - ASE - Angels and monsters an empirical investigation of potential test effectiveness and efficiency improvement f.pdf:pdf},
	Isbn = {9781450330138},
	Title = {{Angels and monsters: an empirical investigation of potential test effectiveness and efficiency improvement from strongly subsuming higher order mutation}},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2643008}}

@phdthesis{Marki2014,
	Author = {Marki, Andras},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Marki - 2014 - Unknown - On Software Testing And Subsuming Mutants.pdf:pdf},
	Title = {{On Software Testing And Subsuming Mutants}},
	Year = {2014}}

@techreport{Orzeszyna2014,
	Author = {Orzeszyna, Wojciech and Madeyski, Lech and Torkar, Richard},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Orzeszyna, Madeyski, Torkar - 2014 - Unknown - Protocol for a Systematic Literature Review of Methods Dealing with Equivalent Mutant Pro.pdf:pdf},
	Pages = {1--36},
	Title = {{Protocol for a Systematic Literature Review of Methods Dealing with Equivalent Mutant Problem}},
	Year = {2014}}

@inproceedings{Delamaro2014,
	Author = {Delamaro, Marcio Eduardo and Offutt, A Jefferson and Ammann, Paul},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delamaro, Offutt, Ammann - 2014 - ICST - Designing Deletion Mutation Operators.pdf:pdf},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Pages = {1--10},
	Title = {{Designing Deletion Mutation Operators}},
	Year = {2014}}

@inproceedings{Gopinath2014,
	Abstract = {One of the key concerns of developers testing code is how to determine a test suite's quality -- its ability to find faults. The most common approach in industry is to use code cov- erage as a measure for test suite quality, and diminishing returns in coverage or high absolute coverage as a stopping rule. In testing research, suite quality is often evaluated by measuring its ability to kill mutants, which are artificially seeded potential faults. Mutation testing is effective but expensive, thus seldom used by practitioners. Determining which criteria best predict mutation kills is therefore critical to practical estimation of test suite quality. Previous work has only used small sets of programs, and usually compares multiple suites for a single program. Practitioners, however, seldom compare suites --- they evaluate one suite. Using suites (both manual and automatically generated) from a large set of real-world open-source projects shows that re- sults for evaluation differ from those for suite-comparison: statement coverage (not block, branch, or path) predicts mutation kills best. Categories},
	Author = {Gopinath, Rahul and Jensen, Carlos and Groce, Alex},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gopinath, Jensen, Groce - 2014 - ICSE - Code Coverage for Suite Evaluation by Developers.pdf:pdf},
	Keywords = {evaluation of coverage criteria,mutation,statistical,test frameworks},
	Mendeley-Tags = {mutation},
	Title = {{Code Coverage for Suite Evaluation by Developers}},
	Year = {2014}}

@inproceedings{Devroey2014a,
	Author = {Devroey, Xavier and Perrouin, Gilles and Cordy, Maxime and Papadakis, Mike and Legay, Axel and Schobbens, Pierre-Yves},
	Booktitle = {FSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Devroey et al. - 2014 - FSE - A Variability Perspective of Mutation Analysis.pdf:pdf},
	Isbn = {9781450330565},
	Title = {{A Variability Perspective of Mutation Analysis}},
	Year = {2014}}

@inproceedings{Huang2014,
	Address = {Cham},
	Author = {Huang, Zhan and Alexander, Rob and Clark, John A},
	Booktitle = {Int. Conf. Auton. Agents Multiagent Syst.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Editor = {Dalpiaz, Fabiano and Dix, J{\"{u}}rgen and van Riemsdijk, M. Birna},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Huang, Alexander, Clark - 2014 - International Conference on Autonomous Agents and Multiagent Systems - Mutation Testing for Jason Agent.pdf:pdf},
	Isbn = {978-3-319-14483-2},
	Issn = {16113349},
	Keywords = {agent-oriented programming,mutation testing,test evaluation},
	Publisher = {Springer International Publishing},
	Series = {Lecture Notes in Computer Science},
	Title = {{Mutation Testing for Jason Agents}},
	Volume = {8758},
	Year = {2014},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/978-3-319-14484-9},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-319-14484-9}}

@article{Ghiduk2014,
	Author = {Ghiduk, Ahmed S},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ghiduk - 2014 - Ijcsi - Using Evolutionary Algorithms for Higher-Order Mutation Testing.pdf:pdf},
	Journal = {Ijcsi},
	Keywords = {6,and used to study,between defects and their,first-order mutants,for,genetic algorithms,higher-,impact on software testing,jia and harman,mutation testing,order mutants,test-inputs generation,the interactions},
	Number = {2},
	Pages = {93--104},
	Title = {{Using Evolutionary Algorithms for Higher-Order Mutation Testing}},
	Volume = {11},
	Year = {2014}}

@article{Singla2014,
	Author = {Singla, Tannu and Kumar, Ajay and Garhwal, Sunita},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Singla, Kumar, Garhwal - 2014 - Applied Mathematics {\&} Information Sciences - Reducing Mutation Testing Endeavor using the Similar Condit.pdf:pdf},
	Issn = {1935-0090},
	Journal = {Appl. Math. Inf. Sci.},
	Keywords = {mutation operators,mutation score,mutation testing},
	Month = {sep},
	Number = {5},
	Pages = {2389--2393},
	Title = {{Reducing Mutation Testing Endeavor using the Similar Conditions for the same Mutation Operators Occurs at Different Locations}},
	Volume = {8},
	Year = {2014},
	Bdsk-Url-1 = {http://www.naturalspublishing.com/Article.asp?ArtcID=5909},
	Bdsk-Url-2 = {http://dx.doi.org/10.12785/amis/080534}}

@article{Alrmuny2014,
	Author = {Alrmuny, Dalal Z},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Alrmuny - 2014 - Lecture Notes on Software Engineering - Open Problems in Software Test Coverage.pdf:pdf},
	Issn = {23013559},
	Journal = {Lect. Notes Softw. Eng.},
	Number = {1},
	Pages = {121--125},
	Title = {{Open Problems in Software Test Coverage}},
	Volume = {2},
	Year = {2014},
	Bdsk-Url-1 = {http://www.lnse.org/show-32-126-1.html},
	Bdsk-Url-2 = {http://dx.doi.org/10.7763/LNSE.2014.V2.107}}

@inproceedings{Le2014,
	Author = {Le, Duc and Alipour, Amin and Gopinath, Rahul and Groce, Alex},
	Booktitle = {ISSTA Tools Demo},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Le et al. - 2014 - ISSTA Tools Demo - MuCheck An Extensible Tool for Mutation Testing of Haskell Programs.pdf:pdf},
	Isbn = {9781450326452},
	Keywords = {functional programming languages,haskell,mutatation testing,mutation operators},
	Pages = {1--4},
	Title = {{MuCheck : An Extensible Tool for Mutation Testing of Haskell Programs}},
	Year = {2014}}

@article{Delamaro2014a,
	Author = {Delamaro, Marcio Eduardo and Offutt, A Jefferson},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delamaro, Offutt - 2014 - cs.gmu.edu - Assessing the Influence of Multiple Test Case Selection on Mutation Experiments.pdf:pdf},
	Journal = {cs.gmu.edu},
	Title = {{Assessing the Influence of Multiple Test Case Selection on Mutation Experiments}},
	Year = {2014},
	Bdsk-Url-1 = {http://cs.gmu.edu/%7B~%7Doffutt/rsrch/papers/MultipleSetsExper-Mut2014.pdf}}

@inproceedings{Kosmatov,
	Author = {Bardin, Sebastien and Kosmatov, Nikolai and Cheynier, Francois},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Bardin, Kosmatov, Cheynier - 2014 - ICST - Efficient Leverage of Symbolic ATG Tools to Advanced Coverage Criteria.pdf:pdf},
	Keywords = {a significant overhead,coverage criteria,emphasising black-box reuse as,however,main points mostly left,much as,possible,same general line,symbolic execution,testing,the path space and,we focus on two,we follow the},
	Title = {{Efficient Leverage of Symbolic ATG Tools to Advanced Coverage Criteria}},
	Volume = {7},
	Year = {2014}}

@phdthesis{Tornblom2014,
	Author = {T{\"{o}}rnblom, John},
	File = {:Users/rahul/Documents/Mendeley.Desktop/T{\"{o}}rnblom - 2014 - Unknown - Improving Quality of Avionics Software Using Mutation Testing.pdf:pdf},
	Title = {{Improving Quality of Avionics Software Using Mutation Testing}},
	Year = {2014}}

@inproceedings{Papadakis2014,
	Abstract = {Modern systems tend to be highly configurable. Testing such systems requires selecting test cases from a large input space. Thus, there is a need to systematically sample program inputs in order to reduce the testing effort. In such cases, testing the interactions between program parameters has been identified as an effective way to deal with this problem. In these lines, Combinatorial Interaction Testing (CIT) models the program input interactions and uses this model to select test cases. Going a step further, we apply mutation analysis on the CIT input model to select program test cases. Mutation operates by injecting defects to the program input model and measures the number of defects found by the selected test cases. Experiments performed on four real programs show that measuring the number of model-based defects gives a stronger correlation to code-level faults than measuring the number of the exercised interactions. Therefore, the proposed mutation analysis approach forms a valid and more effective alternative to CIT.},
	Author = {Papadakis, Mike and Henard, Christopher and {Le Traon}, Yves},
	Booktitle = {Proc. - IEEE 7th Int. Conf. Softw. Testing, Verif. Validation, ICST 2014},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Henard, Le Traon - 2014 - Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation, I.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Henard, Le Traon - 2014 - Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation, I.pdf:pdf},
	Isbn = {9780769551852},
	Keywords = {-mutation analysis,Combinatorial Interaction Testing,Fault Detection,Mutation Analysis,combinatorial interaction test-,fault detection,ing},
	Pages = {1--10},
	Title = {{Sampling program inputs with mutation analysis: Going beyond combinatorial interaction testing}},
	Year = {2014},
	Bdsk-Url-1 = {http://pages.cs.aueb.gr/%7B~%7Dmpapad/papers/icst2014-CITMUT.pdf%20http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=6823860},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICST.2014.11}}

@article{Nguyen2014,
	Author = {Nguyen, QV and Madeyski, Lech},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Nguyen, Madeyski - 2014 - Studies in Computational Intelligence - Problems of Mutation Testing and Higher Order Mutation Testing.pdf:pdf},
	Journal = {Stud. Comput. Intell.},
	Keywords = {higher order mutants,higher order mutation,mutation,mutation testing},
	Mendeley-Tags = {mutation},
	Title = {{Problems of Mutation Testing and Higher Order Mutation Testing}},
	Year = {2014},
	Bdsk-Url-1 = {http://madeyski.e-informatyka.pl/download/NguyenMadeyski2014.pdf}}

@inproceedings{Just2014,
	Author = {Just, Rene and Ernst, Michael D and Fraser, Gordon},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just, Ernst, Fraser - 2014 - ISSTA - Efficient Mutation Analysis by Propagating and Partitioning Infected Execution States Categories an.pdf:pdf},
	Isbn = {9781450326452},
	Keywords = {all or part of,dynamic analysis,mutation analysis,or,or hard copies of,permission to make digital,software testing,this work for personal},
	Pages = {315--326},
	Title = {{Efficient Mutation Analysis by Propagating and Partitioning Infected Execution States Categories and Subject Descriptors}},
	Year = {2014}}

@article{KumarSingh2014,
	Author = {{Kumar Singh}, Pradeep and Sangwan, Om Prakash and Sharma, Arun},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kumar Singh, Sangwan, Sharma - 2014 - International Journal of Modern Education and Computer Science - A Study and Review on the Develop.pdf:pdf},
	Issn = {20750161},
	Journal = {Int. J. Mod. Educ. Comput. Sci.},
	Month = {nov},
	Number = {11},
	Pages = {1--10},
	Title = {{A Study and Review on the Development of Mutation Testing Tools for Java and Aspect-J Programs}},
	Volume = {6},
	Year = {2014},
	Bdsk-Url-1 = {http://www.mecs-press.org/ijmecs/ijmecs-v6-n11/v6n11-1.html},
	Bdsk-Url-2 = {http://dx.doi.org/10.5815/ijmecs.2014.11.01}}

@article{Groce2014a,
	Author = {Groce, Alex},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Groce - 2014 - Unknown - Coverage and Its Discontents.pdf:pdf},
	Keywords = {coverage,evaluation,testing},
	Title = {{Coverage and Its Discontents}},
	Year = {2014}}

@article{Kintis2014,
	Author = {Kintis, Marinos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis - 2014 - {\ldots} Testing, Verification and {\ldots} - Employing second‐order mutation for isolating first‐order equivalent mutants.pdf:pdf},
	Issn = {09600833},
	Journal = {{\ldots} Testing, Verif. {\ldots}},
	Keywords = {dynamic analysis,equivalent mutants,higher order mutation,impact,mutants,mutation testing},
	Month = {apr},
	Pages = {n/a--n/a},
	Title = {{Employing second‐order mutation for isolating first‐order equivalent mutants}},
	Year = {2014},
	Bdsk-Url-1 = {http://doi.wiley.com/10.1002/stvr.1529%20http://onlinelibrary.wiley.com/doi/10.1002/stvr.1529/full},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr.1529}}

@article{Henard2014,
	Abstract = {Assessing the quality of a test suite is an important step of the testing process. Indeed, it is necessary to ensure that the different test cases target all the critical parts of the system. Model-based testing is a famous technique to perform testing. It uses a model of the system under test. Most of these models include logic formulas. Such formulas encompasses constraints to be satisfied within a system, e.g., an expected behavior or particular conditions to be fulfilled at a given stage of the execution. One way to evaluate the quality of a test suite with respect to these logic constraints is to use mutation analysis. This technique has been proven to be effective for evaluating the quality of a test suite in both model-based and non-model-based testing. However, while many mutation analysis tools exist, none of them performs on logic formulas. Towards this direction, this paper introduces MutaLog, an open source tool which allows performing mutation analysis on logic formulas.},
	Author = {Henard, Christopher and Papadakis, Mike and Traon, Yves Le},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Henard, Papadakis, Traon - 2014 - Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation Works.pdf:pdf},
	Isbn = {9780769551944},
	Journal = {Proc. - IEEE 7th Int. Conf. Softw. Testing, Verif. Valid. Work. ICSTW 2014},
	Pages = {399--404},
	Title = {{MutaLog: A tool for mutating logic formulas}},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2014.54}}

@article{Gay2014,
	Author = {Gay, Gregory and Staats, Matt and Whalen, MW and Heimdahl, MPE},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gay et al. - 2014 - Unknown - Moving the Goalposts Coverage Satisfaction Is Not Enough.pdf:pdf},
	Isbn = {9781450328524},
	Keywords = {automated test generation,software testing,structural coverage},
	Title = {{Moving the Goalposts: Coverage Satisfaction Is Not Enough}},
	Year = {2014},
	Bdsk-Url-1 = {http://www.greggay.com/pdf/14sbst.pdf}}

@article{Delamaro2014b,
	Author = {Delamaro, Marcio Eduardo and Deng, Lin and Durelli, VHS},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Delamaro, Deng, Durelli - 2014 - 7th IEEE International {\ldots} - Experimental evaluation of SDL and one-op mutation for c.pdf:pdf},
	Journal = {7th IEEE Int. {\ldots}},
	Title = {{Experimental evaluation of SDL and one-op mutation for c}},
	Year = {2014},
	Bdsk-Url-1 = {http://cs.gmu.edu/%7B~%7Doffutt/rsrch/papers/SDL-CProteum-ICST2014.pdf}}

@article{Fraser2014,
	Author = {Fraser, Gordon and Arcuri, Andrea},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Fraser, Arcuri - 2014 - Empirical Software Engineering - Achieving scalable mutation-based generation of whole test suites.pdf:pdf},
	Issn = {1382-3256},
	Journal = {Empir. Softw. Eng.},
	Keywords = {classes,mutation,mutation testing,search-based testing,test case generation,testing,unit testing},
	Mendeley-Tags = {mutation},
	Month = {feb},
	Title = {{Achieving scalable mutation-based generation of whole test suites}},
	Year = {2014},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/s10664-013-9299-z},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/s10664-013-9299-z}}

@inproceedings{Papadakis2014a,
	Author = {Papadakis, Mike and Traon, Yves Le},
	Booktitle = {ACM Symp. Appl. {\ldots}},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis, Traon - 2014 - ACM Symposium On Applied {\ldots} - Effective Fault Localization via Mutation Analysis A Selective Mutation Approac.pdf:pdf},
	Isbn = {9781450324694},
	Keywords = {fault localization,mutation analysis,program debugging},
	Pages = {0--7},
	Title = {{Effective Fault Localization via Mutation Analysis: A Selective Mutation Approach}},
	Year = {2014},
	Bdsk-Url-1 = {http://pages.cs.aueb.gr/%7B~%7Dmpapad/papers/sac2014-FL.pdf}}

@article{Ueshiba2014,
	Author = {Ueshiba, Takaya},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ueshiba - 2014 - Unknown - Detecting Equivalent Mutants Using Symbolic Computation.pdf:pdf},
	Isbn = {9781941968024},
	Keywords = {-mutation analysis,equiva-,javaml,lent mutants,symbolic computation},
	Pages = {6--11},
	Title = {{Detecting Equivalent Mutants Using Symbolic Computation}},
	Year = {2014}}

@article{Souza2014,
	Author = {Souza, FCM and Papadakis, Mike and Durelli, VHS and Delamaro, Marcio Eduardo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Souza et al. - 2014 - pages.cs.aueb.gr - Test Data Generation Techniques for Mutation Testing A Systematic Mapping.pdf:pdf},
	Journal = {pages.cs.aueb.gr},
	Keywords = {mutation testing,systematic map-,test data generation},
	Title = {{Test Data Generation Techniques for Mutation Testing: A Systematic Mapping}},
	Year = {2014},
	Bdsk-Url-1 = {http://pages.cs.aueb.gr/%7B~%7Dmpapad/papers/eselaw2014.pdf}}

@inproceedings{Zhong2014,
	Author = {Zhong, Hao and Su, Zendong},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhong, Su - 2014 - ICSE - An Empirical Study on Real Bug Fixes.pdf:pdf},
	Title = {{An Empirical Study on Real Bug Fixes}},
	Year = {2014}}

@article{Namin2014,
	Author = {Namin, Akbar Siami and Xue, Xiaozhen and Rosas, Omar and Sharma, Pankaj},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Namin et al. - 2014 - Software Testing, Verification and Reliability - MuRanker a mutant ranking tool.pdf:pdf},
	Journal = {Softw. Testing, Verif. Reliab.},
	Keywords = {distance functions,mutation testing,software testing,testing tools},
	Pages = {1--39},
	Title = {{MuRanker: a mutant ranking tool}},
	Year = {2014},
	Bdsk-Url-1 = {http://onlinelibrary.wiley.com/doi/10.1002/stvr.1542/full},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/stvr}}

@article{Gopinath2014d,
	Author = {Gopinath, Rahul and Jensen, Carlos and Groce, Alex},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gopinath, Jensen, Groce - 2014 - ISSRE - Mutations How close are they to real faults.pdf:pdf},
	Journal = {ISSRE},
	Keywords = {presentation},
	Mendeley-Tags = {presentation},
	Title = {{Mutations : How close are they to real faults ?}},
	Year = {2014}}

@article{Chaurasia2014,
	Author = {Chaurasia, Pawan Kumar},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Chaurasia - 2014 - Journal of Global Research in Computer Science - Mutation Testing A Review.pdf:pdf},
	Journal = {J. Glob. Res. Comput. Sci.},
	Keywords = {- mutants,bb-weak,ex-weak,fom,hom,sshom,st-weak,super mutant},
	Number = {2},
	Pages = {33--36},
	Title = {{Mutation Testing: A Review}},
	Volume = {5},
	Year = {2014}}

@article{Edwards2014,
	Author = {Edwards, SH and Shams, Zalia},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Edwards, Shams - 2014 - {\ldots} of the 36th International Conference on {\ldots} - Comparing test quality measures for assessing student-written.pdf:pdf},
	Isbn = {9781450327688},
	Journal = {{\ldots} 36th Int. Conf. {\ldots}},
	Keywords = {automated assessment,automated grading,mutation testing,programming assignments,quality,software testing,test,test coverage,test metrics},
	Pages = {354--363},
	Title = {{Comparing test quality measures for assessing student-written tests}},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2591164}}

@article{Just2014a,
	Author = {Just, Rene and Schweiggert, Franz},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Just, Schweiggert - 2014 - Journal of Software Testing, Verification and Reliability - Higher Accuracy and Lower Run Time E ffi cient M.pdf:pdf},
	Journal = {J. Softw. Testing, Verif. Reliab.},
	Pages = {1--22},
	Title = {{Higher Accuracy and Lower Run Time : E ffi cient Mutation Analysis Using Non-Redundant Mutation Operators}},
	Year = {2014}}

@inproceedings{Yao2014,
	Address = {New York, New York, USA},
	Author = {Yao, Xiangjuan and Harman, Mark and Jia, Yue},
	Booktitle = {Proc. 36th Int. Conf. Softw. Eng. - ICSE 2014},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Yao, Harman, Jia - 2014 - Proceedings of the 36th International Conference on Software Engineering - ICSE 2014 - A study of equivalent a.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Yao, Harman, Jia - 2014 - Proceedings of the 36th International Conference on Software Engineering - ICSE 2014 - A study of equivalent a.pdf:pdf},
	Isbn = {9781450327565},
	Keywords = {a test input that,and the original program,equivalent mutant,from which,haviour of a mutant,mutation testing,reveals a difference between,stubborn mutant,the ba-},
	Pages = {919--930},
	Publisher = {ACM Press},
	Title = {{A study of equivalent and stubborn mutation operators using human analysis of equivalence}},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2568225.2568265},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2568225.2568265}}

@phdthesis{Zhang2014a,
	Author = {Zhang, Lingming},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang - 2014 - Unknown - Unifying Regression Testing with Mutation Testing.pdf:pdf},
	Title = {{Unifying Regression Testing with Mutation Testing}},
	Year = {2014}}

@article{Orso2014,
	Author = {Orso, Alessandro and Rothermel, Gregg},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Orso, Rothermel - 2014 - {\ldots} the IEEE International conference on Software {\ldots} - Software testing a research travelogue (2000--2014).pdf:pdf},
	Isbn = {9781450328654},
	Journal = {{\ldots} IEEE Int. Conf. Softw. {\ldots}},
	Keywords = {software testing},
	Title = {{Software testing: a research travelogue (2000--2014)}},
	Year = {2014},
	Bdsk-Url-1 = {http://www.cc.gatech.edu/fac/Alex.Orso/papers/orso.rothermel.ICSE2014-FOSE.pdf}}

@article{Derezinska2014a,
	Abstract = {Mutation testing of Python programs raises a problem of incompetent mutants. Incompetent mutants cause execution errors due to inconsistency of types that cannot be resolved before run-time. We present a practical approach in which incompetent mutants can be generated, but the solution is transparent for a user and incompetent mutants are detected by a mutation system during test execution. Experiments with 20 traditional and object-oriented operators confirmed that the overhead can be accepted. The paper presents an experimental evaluation of the first- and higher-order mutation. Four algorithms to the 2nd and 3rd order mutant generation were applied. The impact of code coverage consideration on the process efficiency is discussed. The experiments were supported by the MutPy system for mutation testing of Python programs.},
	Author = {Derezinska, Anna and Ha{\l}as, Konrad},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezinska, Ha{\l}as - 2014 - Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation Workshops,.pdf:pdf},
	Isbn = {9780769551944},
	Journal = {Proc. - IEEE 7th Int. Conf. Softw. Testing, Verif. Valid. Work. ICSTW 2014},
	Keywords = {Python,dynamically typed language,higher order mutation,mutation testing},
	Pages = {156--164},
	Title = {{Experimental evaluation of mutation testing approaches to Python programs}},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2014.24}}

@article{Priyanka2014,
	Author = {Priyanka, M and {Shyam Kumar T}},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Priyanka, Shyam Kumar T - 2014 - International Journal of Innovative Technologies - Regression Testing Of Mutation Based Unit Test Cases.pdf:pdf},
	Journal = {Int. J. Innov. Technol.},
	Keywords = {mutation},
	Mendeley-Tags = {mutation},
	Number = {01},
	Pages = {19--22},
	Title = {{Regression Testing Of Mutation Based Unit Test Cases In OOP}},
	Volume = {02},
	Year = {2014}}

@inproceedings{Zamojski2014,
	Author = {Derezinska, Anna and Ha{\l}as, Konrad},
	Booktitle = {Int. Conf. Dependability Complex Syst. DepCoS-RELCOMEX},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Derezinska, Ha{\l}as - 2014 - International Conference on Dependability and Complex Systems DepCoS-RELCOMEX - Analysis of Mutation Operato.pdf:pdf},
	Isbn = {9783319070124},
	Issn = {21945357},
	Keywords = {dynamically typed,mutation operators,mutation testing,programming language,python},
	Pages = {155--164},
	Title = {{Analysis of Mutation Operators for the Python Language}},
	Volume = {286},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-07013-1}}

@inproceedings{Inozemtseva2014,
	Abstract = {The coverage of a test suite is often used as a proxy for its ability to detect faults. However, previous studies that investigated the correlation between code coverage and test suite effectiveness have failed to reach a consensus about the nature and strength of the relationship between these test suite characteristics. Moreover, many of the studies were done with small or synthetic programs, making it unclear whether their results generalize to larger programs, and some of the studies did not account for the confounding influence of test suite size. We have extended these studies by evaluating the relation- ship between test suite size, coverage, and effectiveness for large Java programs. Our study is the largest to date in the literature: we generated 31,000 test suites for five systems consisting of up to 724,000 lines of source code. We then mea- sured the statement coverage, decision coverage, and modified condition coverage of these suites and used mutation testing to evaluate their fault detection effectiveness. We found that there is a low to moderate correlation between coverage and effectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite effectiveness},
	Annote = {* Generates test-suites by identifying all test methods in a suite, and using addTest reflection to generate test suite.
* Made 1000 suites each of 3,10,30,100,300,1000 cases
* Uses mutation, and normalized mutation which is the number of     mutants killed in covered code (not in the entire code base).
* Gets r{\^{}}2 values of 0.26 to 0.97 for effectiveness to test suite   size.
* Moderate to high correlation if suite size is ignored. (not the   normalized), For many, there is still the correlation if            considering normalized mu score.
* Fixing suite size lowered correlation between coverage and        effectiveness.

        
Why should normalized mutation score be surprising? (Or even be considered) It seems intuitive that as the lower hanging fruites are eaten first, you will have to write more code to get a little more mutants.

        
Why should the test case size be controlled?},
	Author = {Inozemtseva, Laura and Holmes, Reid},
	Booktitle = {ICSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Inozemtseva, Holmes - 2014 - ICSE - Coverage Is Not Strongly Correlated With Test Suite Effectiveness.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Inozemtseva, Holmes - 2014 - ICSE - Coverage Is Not Strongly Correlated With Test Suite Effectiveness(2).pdf:pdf},
	Keywords = {mutation,reviewed},
	Mendeley-Tags = {mutation,reviewed},
	Title = {{Coverage Is Not Strongly Correlated With Test Suite Effectiveness}},
	Year = {2014}}

@article{Gopinath2014b,
	Author = {Gopinath, Rahul and Ahmed, Iftekhar and Jensen, Carlos and Groce, Alex},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gopinath et al. - 2014 - Unknown - An Empirical Comparison of Mutant Selection Approaches.pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Gopinath et al. - 2014 - Unknown - An Empirical Comparison of Mutant Selection Approaches.pdf:pdf},
	Keywords = {could not find function,empirical analysis,error,mutation operators,test frameworks,theme,theme{\_}set},
	Title = {{An Empirical Comparison of Mutant Selection Approaches}},
	Year = {2014}}

@article{Kintis2015,
	Abstract = {Context: The equivalent mutant problem is a well-known impediment to the adoption of mutation testing in practice. In consequence of its undecidable nature, a complete automated solution is unattainable. To worsen the situation, the manual analysis of the generated mutants of a program under test is prohibitive due to their vast number and the complexity of determining their equivalence. Objective: This paper focuses on the automated identification of equivalent and partially equivalent mutants, i.e. mutants that are equivalent to the original program for a specific subset of paths. To this end, the utilisation of a series of previously proposed data flow patterns is investigated. This study also examines the cross-language nature of these patterns and the killability of the detected partially equivalent mutants. Method: A tool, named MEDIC (Mutants' Equivalence DIsCovery), incorporating the aforementioned patterns was developed. Its efficiency and effectiveness were evaluated based on a set of manually analysed mutants from real-world programs, written in the Java programming language. Furthermore, MEDIC was employed to test subjects written in the JavaScript programming language. Results: MEDIC managed to detect 56{\%} of the examined equivalent mutants in 125 s, providing strong evidence regarding both its effectiveness and efficiency. Additionally, MEDIC was able to identify equivalent mutants in the JavaScript test subjects, lending colour to the cross-language nature of the implemented patterns. Finally, the identified partially equivalent mutant set consisted largely of killable mutants, 16{\%} of which were stubborn ones. Conclusion: It can be concluded that pattern-based equivalent mutant identification forms a viable approach for combating the equivalent mutant problem. MEDIC automatically detected a considerable number of the manually identified equivalent mutants and was successfully applied to test subjects in all examined programming languages.},
	Author = {Kintis, Marinos and Malevris, Nicos},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis, Malevris - 2015 - Information and Software Technology - MEDIC A static analysis framework for equivalent mutant identification.pdf:pdf},
	Issn = {09505849},
	Journal = {Inf. Softw. Technol.},
	Keywords = {Data flow analysis,Equivalent mutant detection,Mutation testing,Static analysis,Stubborn mutant detection},
	Pages = {1--17},
	Title = {{MEDIC: A static analysis framework for equivalent mutant identification}},
	Volume = {68},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.infsof.2015.07.009}}

@inproceedings{Arcaini2015,
	Abstract = {Context: In mutation analysis, a mutant of a software artifact, either a program or a model, is said equivalent if it leaves the artifact meaning unchanged. Equivalent mutants are usually seen as an inconvenience and they reduce the applicability of mutation analysis. Objective: Instead, we here claim that equivalent mutants can be useful to define, detect, and remove static anomalies, i.e., deficiencies of given qualities: If an equivalent mutant has a better quality value than the original artifact, then an anomaly has been found and removed. Method: We present a process for detecting static anomalies based on mutation, equivalence checking, and quality measurement. Results: Our proposal and the originating technique are applicable to different kinds of software artifacts. We present anomalies and conduct several experiments in different contexts, at specification, design, and implementation level. Conclusion: We claim that in mutation analysis a new research direction should be followed, in which equivalent mutants and operators generating them are welcome.},
	Author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia and Vavassori, Paolo},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Arcaini et al. - 2015 - ICSTW - Rehabilitating equivalent mutants as static anomaly detectors in software artifacts.pdf:pdf},
	Isbn = {9781479918850},
	Issn = {09505849},
	Keywords = {Equivalent mutant,Quality measure,Static anomaly},
	Number = {April},
	Title = {{Rehabilitating equivalent mutants as static anomaly detectors in software artifacts}},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.infsof.2016.01.019}}

@article{Sun2015,
	Abstract = {Context: Mutation testing, which systematically generates a set of mutants by seeding various faults into the base program under test, is a popular technique for evaluating the effectiveness of a testing method. However, it normally requires the execution of a large amount of mutants and thus incurs a high cost. Objective: A common way to decrease the cost of mutation testing is mutant reduction, which selects a subset of representative mutants. In this paper, we propose a new mutant reduction approach from the perspective of program structure. Method: Our approach attempts to explore path information of the program under test, and select mutants that are as diverse as possible with respect to the paths they cover. We define two path-aware heuristic rules, namely module-depth and loop-depth rules, and combine them with statement- and operator-based mutation selection to develop four mutant reduction strategies. Results: We evaluated the cost-effectiveness of our mutant reduction strategies against random mutant selection on 11 real-life C programs with varying sizes and sampling ratios. Our empirical studies show that two of our mutant reduction strategies, which primarily rely on the path-aware heuristic rules, are more effective and systematic than pure random mutant selection strategy in terms of selecting more representative mutants. In addition, among all four strategies, the one giving loop-depth the highest priority has the highest effectiveness. Conclusion: In general, our path-aware approach can reduce the number of mutants without jeopardizing its effectiveness, and thus significantly enhance the overall cost-effectiveness of mutation testing. Our approach is particularly useful for the mutation testing on large-scale complex programs that normally involve a huge amount of mutants with diverse fault characteristics.},
	Author = {ai Sun, Chang and Xue, Feifei and Liu, Huai and Zhang, Xiangyu},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Sun et al. - 2015 - Information and Software Technology - A path-aware approach to mutant reduction in mutation testing.pdf:pdf},
	Issn = {09505849},
	Journal = {Inf. Softw. Technol.},
	Keywords = {Control flow,Mutation testing,Path depth,Selective mutation testing},
	Pages = {1--17},
	Publisher = {Elsevier B.V.},
	Title = {{A path-aware approach to mutant reduction in mutation testing}},
	Volume = {0},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.infsof.2016.02.006}}

@article{Kurtz2015,
	Abstract = {Mutation analysis generates a large set of variants, or mutants, and then demands a test set that distinguishes each variant from the original artifact. It has long been apparent that many mutants contribute little, if anything, to the subsequent test set. Researchers have developed various approaches to separate valuable mutants from redundant mutants. The notion of subsumption underlies several such approaches. Informally, one mutant subsumes another if tests that kill the first also kill the second. Computing subsumption relations is, not surprisingly, undecidable. Recent work formalized the notion of a mutant subsumption graph (MSG) and showed that root nodes in the MSG precisely identify mutants that are not redundant. To address the decidability issue, we first defined the dynamic subsumption graph as an approximation to the MSG. This paper continues by showing how symbolic execution can be used to construct static subsumption graphs. While symbolic execution has some distinct shortcomings, we show how we can mitigate these problems with a hybrid approach that extracts test cases from the analysis process and re-evaluates the subsumption graph dynamically},
	Author = {Kurtz, Bob and Ammann, Paul and Offutt, A Jefferson},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kurtz, Ammann, Offutt - 2015 - Software Testing, Verification and {\ldots} - Static analysis of mutant subsumption.pdf:pdf},
	Isbn = {9781479918850},
	Journal = {Softw. Testing, Verif. {\ldots}},
	Title = {{Static analysis of mutant subsumption}},
	Year = {2015},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=7107454}}

@inproceedings{Marion2015,
	Author = {Marion, Jean-yves},
	Booktitle = {ICST},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Marion - 2015 - ICST - Sound and Quasi-Complete Detection of Infeasible Test Requirements.pdf:pdf},
	Keywords = {and hence,cases,infeasible test require-,ments,need to be constructed,requirements indicates a potential,some additional test cases,static analysis,structural coverage criteria,value analysis,weakest precondition,weakness of the test},
	Title = {{Sound and Quasi-Complete Detection of Infeasible Test Requirements}},
	Volume = {7},
	Year = {2015}}

@inproceedings{Huang2015,
	Author = {Huang, Zhan and Alexander, Rob},
	Booktitle = {EMAS},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Huang, Alexander - 2015 - EMAS - Semantic Mutation Testing for Multi-Agent Systems.pdf:pdf},
	Keywords = {agent programming languages,cog-,semantic mutation testing},
	Pages = {14--16},
	Title = {{Semantic Mutation Testing for Multi-Agent Systems}},
	Year = {2015},
	Bdsk-Url-1 = {http://www-users.cs.york.ac.uk/%7B~%7Drda/Zhan%20Huang%20EMAS%202015%20paper%20FINAL%20CAMERA%20VERSION.pdf}}

@inproceedings{Papadakis2015,
	Abstract = {Identifying equivalent mutants remains the largest impediment to the widespread uptake of mutation testing. Despite being researched for more than three decades, the problem remains. We propose Trivial Compiler Equivalence (TCE) a technique that exploits the use of readily available compiler technology to address this long-standing challenge. TCE is directly applicable to real-world programs and can imbue existing tools with the ability to detect equivalent mutants and a special form of useless mutants called duplicated mutants. We present a thorough empirical study using 6 large open source programs, several orders of magnitude larger than those used in previous work, and 18 benchmark programs with hand-analysis equivalent mutants. Our results reveal that, on large real-world programs, TCE can discard more than 7{\%} and 21{\%} of all the mutants as being equivalent and duplicated mutants respectively. A human- based equivalence verification reveals that TCE has the ability to detect approximately 30{\%} of all the existing equivalent mutants.},
	Author = {Papadakis, Mike and Jia, Yue and Harman, Mark and {Le Traon}, Yves},
	Booktitle = {Proc. - Int. Conf. Softw. Eng.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis et al. - 2015 - Proceedings - International Conference on Software Engineering - Trivial compiler equivalence A large scale em.pdf:pdf},
	Isbn = {9781479919345},
	Issn = {02705257},
	Pages = {936--946},
	Title = {{Trivial compiler equivalence: A large scale empirical study of a simple, fast and effective equivalent mutant detection technique}},
	Volume = {1},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2015.103}}

@inproceedings{Saleh2015,
	Author = {Saleh, Iman and Nagi, Khaled},
	Booktitle = {ICSR},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Saleh, Nagi - 2015 - ICSR - HadoopMutator A Cloud-Based Mutation Testing.pdf:pdf},
	Keywords = {experimentation,hadoop,mapreduce,mutation testing},
	Title = {{HadoopMutator : A Cloud-Based Mutation Testing}},
	Year = {2015}}

@inproceedings{Tengeri2015,
	Author = {Tengeri, D{\'{a}}vid and Besz{\'{e}}des, {\'{A}}rp{\'{a}}d and Gergely, Tam{\'{a}}s and Vid{\'{a}}cs, L{\'{a}}szl{\'{o}} and Havas, D{\'{a}}vid and Gyim{\'{o}}thy, Tibor},
	Booktitle = {ICSTW},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Tengeri et al. - 2015 - ICSTW - Beyond Code Coverage -- an Approach for Test Suite Assessment and Improvement.pdf:pdf},
	Isbn = {9781479918850},
	Keywords = {code coverage,e,g,if a function is,is unnecessary,its statement-level coverage,needless to work with,never invoked it is,regression testing,test suite evolution,test suite quality,test suite refactoring,white box testing metrics},
	Title = {{Beyond Code Coverage -- an Approach for Test Suite Assessment and Improvement}},
	Year = {2015}}

@article{Jia2015,
	Author = {Jia, Yue and Wu, Fan and Harman, Mark and Krinke, Jens},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Jia et al. - 2015 - Unknown - Genetic Improvement using Higher Order Mutation.pdf:pdf},
	Isbn = {9781450334884},
	Keywords = {gi,higher order mutation,sbse},
	Pages = {15--16},
	Title = {{Genetic Improvement using Higher Order Mutation}},
	Year = {2015}}

@inproceedings{Gong2015,
	Author = {Gong, Pei and Zhao, Ruilian and Li, Zheng},
	Booktitle = {ICSTW},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gong, Zhao, Li - 2015 - ICSTW - Faster mutation-based fault localization with a novel mutation execution strategy.pdf:pdf},
	Isbn = {9781479918850},
	Keywords = {dynamic mutation execution,ization,mutation cost reduction,mutation-based fault local-,software debugging},
	Number = {Mutation},
	Title = {{Faster mutation-based fault localization with a novel mutation execution strategy}},
	Year = {2015},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%7B%5C_%7Dall.jsp?arnumber=7107448}}

@inproceedings{Zhang2016,
	Author = {Zhang, Jie and Wang, Ziyi and Zhang, Lingming and Hao, Dan and Zang, Lei and Cheng, Shiyang and Zhang, Lu},
	Booktitle = {Proc. 25th Int. Symp. Softw. Test. Anal. - ISSTA 2016},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Zhang et al. - 2016 - Proceedings of the 25th International Symposium on Software Testing and Analysis - ISSTA 2016 - Predictive mutatio.pdf:pdf},
	Isbn = {9781450343909},
	Keywords = {machine learning,mutation testing,software testing},
	Pages = {342--353},
	Title = {{Predictive mutation testing}},
	Year = {2016},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2931037.2931038},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2931037.2931038}}

@inproceedings{Workshops2016,
	Author = {Workshops, Validation and Shin, Donghwan and Yoo, Shin and Bae, Doo-hwan},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Workshops et al. - 2016 - ICST - Diversity-Aware Mutation Adequacy Criterion for Improving Fault Detection Capability.pdf:pdf},
	Title = {{Diversity-Aware Mutation Adequacy Criterion for Improving Fault Detection Capability}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.37}}

@inproceedings{Papadakis,
	Author = {Papadakis, Mike and Henard, Christopher and Harman, Mark and Traon, Yves Le},
	Booktitle = {ISSTA},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Papadakis et al. - 2016 - ISSTA - Threats to the Validity of Mutation-Based Test Assessment.pdf:pdf},
	Keywords = {mutation testing,subsuming mutants,test assessment},
	Title = {{Threats to the Validity of Mutation-Based Test Assessment}},
	Year = {2016}}

@article{Araujo2016,
	Author = {Ara{\'{u}}jo, Cl{\'{a}}udio A. and Delamaro, Marcio E. and Maldonado, Jos{\'{e}} C. and Vincenzi, Auri M. R.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ara{\'{u}}jo et al. - 2016 - Journal of Software Engineering Research and Development - Correlating automatic static analysis and mutation te.pdf:pdf},
	Issn = {2195-1721},
	Journal = {J. Softw. Eng. Res. Dev.},
	Number = {1},
	Pages = {5},
	Publisher = {Journal of Software Engineering Research and Development},
	Title = {{Correlating automatic static analysis and mutation testing: towards incremental strategies}},
	Volume = {4},
	Year = {2016},
	Bdsk-Url-1 = {http://jserd.springeropen.com/articles/10.1186/s40411-016-0031-8},
	Bdsk-Url-2 = {http://dx.doi.org/10.1186/s40411-016-0031-8}}

@article{Arcaini2016,
	Author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia and Vavassori, Paolo},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Arcaini et al. - 2016 - Information and Software Technology - A novel use of equivalent mutants for static anomaly detection in software.pdf:pdf},
	Issn = {0950-5849},
	Journal = {Inf. Softw. Technol.},
	Keywords = {Equivalent mutant,Static anomaly,Quality measure},
	Pages = {1--13},
	Publisher = {Elsevier B.V.},
	Title = {{A novel use of equivalent mutants for static anomaly detection in software artifacts}},
	Volume = {000},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.infsof.2016.01.019}}

@inproceedings{Tengeri2016,
	Author = {Tengeri, D{\'{a}}vid and Vid{\'{a}}cs, L{\'{a}}szl{\'{o}} and Besz{\'{e}}des, {\'{A}}rp{\'{a}}d and J{\'{a}}sz, Judit},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Tengeri et al. - 2016 - ICST - Relating Code Coverage , Mutation Score and Test Suite Reducibility to Defect Density.pdf:pdf},
	Title = {{Relating Code Coverage , Mutation Score and Test Suite Reducibility to Defect Density}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.25}}

@article{Silva2016,
	Author = {Silva, Rodolfo Adamshuk and Senger, Rocio and S{\'{e}}rgio, Paulo and Souza, Lopes De},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Silva et al. - 2016 - Information and Software Technology - A systematic review on search based mutation testing.pdf:pdf},
	Journal = {Inf. Softw. Technol.},
	Pages = {1--17},
	Title = {{A systematic review on search based mutation testing}},
	Volume = {000},
	Year = {2016}}

@inproceedings{Ghardallou2016,
	Author = {Ghardallou, Wided and Frias, Marcelo F},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ghardallou, Frias - 2016 - ICST - Debugging Without Testing.pdf:pdf},
	Isbn = {9781509018277},
	Keywords = {debugging},
	Title = {{Debugging Without Testing}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.12}}

@inproceedings{Shin2016,
	Archiveprefix = {arXiv},
	Arxivid = {1601.06466},
	Author = {Shin, Donghwan and Bae, Doo-hwan},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {1601.06466},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Shin, Bae - 2016 - ICST - A Theoretical Framework for Understanding Mutation-Based Testing Methods(3).pdf:pdf;:Users/rahul/Documents/Mendeley.Desktop/Shin, Bae - 2016 - ICST - A Theoretical Framework for Understanding Mutation-Based Testing Methods(2).pdf:pdf},
	Isbn = {9781509018277},
	Title = {{A Theoretical Framework for Understanding Mutation-Based Testing Methods}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.22}}

@inproceedings{Rojas2016,
	Author = {Rojas, Miguel and Fraser, Gordon},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop//Rojas, Fraser - 2016 - ICST - CODE DEFENDERS A Mutation Testing Game.pdf:pdf},
	Title = {{CODE DEFENDERS : A Mutation Testing Game}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.43}}

@inproceedings{Vergilio2016,
	Author = {Vergilio, Silvia Regina and Filho, Jakubovski and Ehrenfried, Henrique V},
	Booktitle = {1st Brazilian Symp. Syst. Autom. Softw. Test.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Vergilio, Filho, Ehrenfried - 2016 - 1st Brazilian Symposium on Systematic and Automated Software Testing - Evaluating Different Strateg.pdf:pdf},
	Isbn = {9781450347662},
	Number = {October},
	Title = {{Evaluating Different Strategies for Reduction of Mutation Testing Costs Evaluating Different Strategies for Reduction of Mutation Testing Costs}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2993288.2993292}}

@inproceedings{Kurtz2016a,
	Author = {Kurtz, Bob and Ammann, Paul and Offutt, Jeff},
	Booktitle = {FSE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kurtz, Ammann, Offutt - 2016 - FSE - Analyzing the Validity of Selective Mutation with Dominator Mutants.pdf:pdf},
	Isbn = {9781450342186},
	Pages = {571--582},
	Title = {{Analyzing the Validity of Selective Mutation with Dominator Mutants}},
	Year = {2016}}

@inproceedings{Parsai2016,
	Author = {Parsai, Ali and Parsai, Ali and Murgia, Alessandro and Demeyer, Serge},
	Booktitle = {QRS},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Parsai et al. - 2016 - QRS - A Model to Estimate First-Order Mutation Coverage from Higher-Order Mutation Coverage A Model to Estimate F.pdf:pdf},
	Number = {August},
	Title = {{A Model to Estimate First-Order Mutation Coverage from Higher-Order Mutation Coverage A Model to Estimate First-Order Mutation Coverage from Higher-Order Mutation Coverage}},
	Year = {2016}}

@inproceedings{Lindstr2016,
	Author = {Lindstr, Birgitta},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Lindstr - 2016 - ICST - On Strong Mutation and Subsuming Mutants.pdf:pdf},
	Title = {{On Strong Mutation and Subsuming Mutants}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.28}}

@inproceedings{Kurtz2016,
	Author = {Kurtz, Bob and Ammann, Paul and Offutt, Jeff and Kurtz, Mariet and Va, Fairfax},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kurtz et al. - 2016 - ICST - Are We There Yet How Redundant and Equivalent Mutants Affect Determination of Test Completeness.pdf:pdf},
	Pages = {142--151},
	Title = {{Are We There Yet ? How Redundant and Equivalent Mutants Affect Determination of Test Completeness}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.41}}

@inproceedings{Dubois1998,
	Abstract = {Clustering was usually applied on numerical and categorical information. However, textual information is acquiring an increasing importance with the appearance of methods for textual data mining. This paper proposes the use of classical clustering algorithms with a mixed function that combines numerical, categorical and semantic features. The content of the semantic features is extracted from textual data. This paper analyses and compares the behavior of different existing semantic similarity functions that use WordNet as background ontology. The different partitions obtained with the clustering algorithm are compared to human classifications in order to see which one approximates better the human reasoning. Moreover, the interpretability of the obtained clusters is discussed. The results show that those similarity measures that provide better results when compared using a standard benchmark also provide better and more interpretable partitions.},
	Archiveprefix = {arXiv},
	Arxivid = {arXiv:1504.06044v2},
	Author = {Strug, Joanna and Strug, Barbara},
	Booktitle = {Int. Conf. Artif. Intell. Soft Comput.},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {arXiv:1504.06044v2},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Strug, Strug - 2016 - International Conference on Artificial Intelligence and Soft Computing - Artificial Intelligence and Soft Computin.pdf:pdf},
	Isbn = {9783642132070},
	Keywords = {awareness,base transceiver station,behaviour recognition,call detail record,cell phone network,context-,multi agent system,pervasive computing,pro-active system,smart city},
	Pages = {644--654},
	Title = {{Artificial Intelligence and Soft Computing}},
	Volume = {9692},
	Year = {2016},
	Bdsk-Url-1 = {http://www.springerlink.com/content/15202tv751321p51/},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-642-13208-7}}

@inproceedings{Kintis201,
	Author = {Kintis, Marinos and Papadakis, Mike and Papadopoulos, Andreas and Valvis, Evangelos and Malevris, Nicos},
	Booktitle = {SCAM},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis et al. - 2016 - SCAM - Analysing and Comparing the Effectiveness of Mutation Testing Tools A Manual Study.pdf:pdf},
	Title = {{Analysing and Comparing the Effectiveness of Mutation Testing Tools : A Manual Study}},
	Year = {2016}}

@inproceedings{Tokumoto2016,
	Abstract = {---Mutation analysis is a method for evaluating the effectiveness of a test suite by seeding faults artificially and measuring the fraction of seeded faults detected by the test suite. The major limitation of mutation analysis is its lengthy execution time because it involves generating, compiling and running large numbers of mutated programs, called mutants. Our tool MuVM achieves a significant runtime improvement by performing higher order mutation analysis using four techniques, metamutation, mutation on virtual machine, higher order split-stream execution, and state infection-based mutation. In order to obtain the same behavior as mutating the source code directly, metamutation pre-serves the mutation location information which may potentially be lost during bitcode compilation and optimization. Mutation on a virtual machine reduces the compilation and testing cost by compiling a program once and invoking a process once. Higher order split-stream execution also reduces the testing cost by executing common parts of the mutants together and splitting the execution at a seeded fault. State infection-based mutation reduces the number of generated mutants by omitting infeasible mutants. Our comparative experiments indicate that our tool is significantly superior to an existing tool, an existing technique (mutation schema generation), and no-split-stream execution in higher order mutation.},
	Author = {Tokumoto, Susumu and Yoshida, Hiroaki and Sakamoto, Kazunori and Honiden, Shinichi},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Tokumoto et al. - 2016 - ICST - MuVM Higher Order Mutation Analysis Virtual Machine for C.pdf:pdf},
	Isbn = {9781509018277},
	Keywords = {High Order Mutants,Software Testing,---Mutation Analysis},
	Title = {{MuVM: Higher Order Mutation Analysis Virtual Machine for C}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.18}}

@inproceedings{Huo2016,
	Author = {Huo, Chen},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Huo - 2016 - ICST - Interpreting Coverage Information Using Direct and Indirect Coverage.pdf:pdf},
	Isbn = {9781509018277},
	Number = {3},
	Title = {{Interpreting Coverage Information Using Direct and Indirect Coverage}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.20}}

@inproceedings{Cheng2016,
	Author = {Cheng, Yufeng and Wang, Meng and Xiong, Yingfei and Hao, Dan and Zhang, Lu},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Cheng et al. - 2016 - ICST - Empirical Evaluation of Test Coverage for Functional Programs.pdf:pdf},
	Isbn = {9781509018277},
	Title = {{Empirical Evaluation of Test Coverage for Functional Programs}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.8}}

@article{Gong2016,
	Author = {Gong, Dunwei and Zhang, Gongjie and Yao, Xiangjuan and Meng, Fanlin},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Gong et al. - 2016 - Information and Software Technology - Mutant reduction based on dominance relation for weak mutation testing.pdf:pdf},
	Issn = {09505849},
	Journal = {Inf. Softw. Technol.},
	Keywords = {Dominance relation,Mutant,Reduction,Software testing,Weak mutation testing},
	Month = {may},
	Pages = {1--15},
	Publisher = {Elsevier B.V.},
	Title = {{Mutant reduction based on dominance relation for weak mutation testing}},
	Volume = {0},
	Year = {2016},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0950584916300805},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.infsof.2016.05.001}}

@inproceedings{Visser2016,
	Annote = {Reachablily 94{\%}

Equivalent mutant?

One off mutants can be made by different operators depending on the algorithm.},
	Author = {Visser, Willem},
	Booktitle = {ASE},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Visser - 2016 - ASE - What Makes Killing a Mutant Hard.pdf:pdf},
	Isbn = {9781450338455},
	Keywords = {mutation testing,probabilistic symbolic execution},
	Pages = {39--44},
	Title = {{What Makes Killing a Mutant Hard}},
	Year = {2016}}

@inproceedings{Schwartz2016,
	Author = {Schwartz, Amanda and Hetzel, Michael},
	Booktitle = {Autom. Softw. Test.},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Schwartz, Hetzel - 2016 - Automation of Software Testing - The Impact of Fault Type on the Relationship Between Code Coverage and Fault.pdf:pdf},
	Isbn = {9781450341516},
	Keywords = {code coverage,software testing,test suite effectiveness},
	Pages = {29--35},
	Title = {{The Impact of Fault Type on the Relationship Between Code Coverage and Fault Detection}},
	Year = {2016}}

@article{Ma2016,
	Author = {Ma, Yu-Seung and Kim, Sang-Woon},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ma, Kim - 2016 - Journal of Systems and Software - Mutation Testing Cost Reduction by Clustering Overlapped Mutants.pdf:pdf},
	Issn = {01641212},
	Journal = {J. Syst. Softw.},
	Keywords = {Mutation testing,Software testing},
	Publisher = {Elsevier Inc.},
	Title = {{Mutation Testing Cost Reduction by Clustering Overlapped Mutants}},
	Year = {2016},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0164121216000078},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.jss.2016.01.007}}

@inproceedings{Holling2016,
	Author = {Holling, Dominik and Banescu, Sebastian and Probst, Marco and Petrovska, Ana and Pretschner, Alexander},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Holling et al. - 2016 - ICST - Nequivack Assessing mutation score confidence.pdf:pdf},
	Title = {{Nequivack : Assessing mutation score confidence}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.29}}

@inproceedings{Pill2016,
	Author = {Pill, Ingo and Rubil, Ivan and Wotawa, Franz},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Pill, Rubil, Wotawa - 2016 - ICST - SIMULTATE A Toolset for Fault Injection and Mutation Testing of Simulink Models.pdf:pdf},
	Pages = {168--173},
	Title = {{SIMULTATE : A Toolset for Fault Injection and Mutation Testing of Simulink Models}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.21}}

@inproceedings{Larson2016,
	Author = {Larson, Eric and Kirk, Anna},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Larson, Kirk - 2016 - ICST - Generating Evil Test Strings for Regular Expressions.pdf:pdf},
	Isbn = {9781509018277},
	Keywords = {regular expressions,test generation,testing},
	Pages = {309--319},
	Title = {{Generating Evil Test Strings for Regular Expressions}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.29}}

@article{Ray2016,
	Archiveprefix = {arXiv},
	Arxivid = {arXiv:1506.01159v2},
	Author = {Ray, Baishakhi and Bacchelli, Alberto},
	Eprint = {arXiv:1506.01159v2},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Ray, Bacchelli - 2016 - Unknown - On the ``Naturalness'' of Buggy Code.pdf:pdf},
	Isbn = {9781450339001},
	Title = {{On the ``Naturalness'' of Buggy Code}},
	Year = {2016}}

@phdthesis{Kintis2016,
	Author = {Kintis, Marinos},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Kintis - 2016 - Unknown - Effective Methods to Tackle the Equivalent Mutant Problem when Testing Software with Mutation.pdf:pdf},
	Number = {June},
	Title = {{Effective Methods to Tackle the Equivalent Mutant Problem when Testing Software with Mutation}},
	Year = {2016}}

@techreport{Allamanis2016,
	Abstract = {Mutation analysis measures test suite adequacy, the degree to which a test suite detects seeded faults: one test suite is better than another if it detects more mutants. Mutation analysis effectiveness rests on the assumption that mutants are coupled with real faults i.e. mutant detection is strongly correlated with real fault detection. The work that validated this also showed that a large portion of defects remain out of reach. We introduce tailored mutation operators to reach and capture these defects. Tailored mutation operators are built from and apply to an existing codebase and its history. They can, for instance, identify and replay errors specific to the project for which they are tailored. As our point of departure, we define tailored mutation operators for identifiers, which mutation analysis has largely ignored, because there are too many ways to mutate them. Evaluated on the Defects4J dataset, our new mutation operators creates mutants coupled to 14{\%} more faults, compared to traditional mutation operators. These new mutation operators, however, quadruple the number of mutants. To combat this problem, we propose a new approach to mutant selection focusing on the location at which to apply mutation operators and the unnaturalness of the mutated code. The results demonstrate that the location selection heuristics produce mutants more closely coupled to real faults for a given budget of mutation operator applications. In summary, this paper defines and explores tailored mutation operators, advancing the state of the art in mutation testing in two ways: 1) it suggests mutation operators that mutate identifiers and literals, extending mutation analysis to a new class of faults and 2) it demonstrates that selecting the location where a mutation operator is applied decreases the number of generated mutants without affecting the coupling of mutants and real faults.},
	Archiveprefix = {arXiv},
	Arxivid = {1611.02516},
	Author = {Allamanis, Miltiadis and Barr, Earl T. and Just, Ren{\'{e}} and Sutton, Charles},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {1611.02516},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Allamanis et al. - 2016 - Unknown - Tailored Mutants Fit Bugs Better.pdf:pdf},
	Title = {{Tailored Mutants Fit Bugs Better}},
	Year = {2016},
	Bdsk-Url-1 = {http://arxiv.org/abs/1611.02516}}

@inproceedings{Praphamontripong2016,
	Author = {Praphamontripong, Upsorn and Offutt, Jeff and Deng, Lin and Gu, Jingjing},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Praphamontripong et al. - 2016 - ICST - An Experimental Evaluation of Web Mutation Operators.pdf:pdf},
	Title = {{An Experimental Evaluation of Web Mutation Operators}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2016.17}}

@techreport{Laurent2016,
	Abstract = {Mutation testing is used extensively to support the experimentation of software engineering studies. Its application to real-world projects is possible thanks to modern tools that automate the whole mutation analysis process. However, popular mutation testing tools use a restrictive set of mutants which do not conform to the community standards as supported by the mutation testing literature. This can be problematic since the effectiveness of mutation depends on its mutants. We therefore examine how effective are the mutants of a popular mutation testing tool, named PIT, compared to comprehensive ones, as drawn from the literature and personal experience. We show that comprehensive mutants are harder to kill and encode faults not captured by the mutants of PIT for a range of 11{\%} to 62{\%} of the Java classes of the considered projects.},
	Archiveprefix = {arXiv},
	Arxivid = {1601.02351},
	Author = {Laurent, Thomas and Ventresque, Anthony and Papadakis, Mike and Henard, Christopher and Traon, Yves Le},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {1601.02351},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Laurent et al. - 2016 - Unknown - Assessing and Improving the Mutation Testing Practice of PIT.pdf:pdf},
	Title = {{Assessing and Improving the Mutation Testing Practice of PIT}},
	Year = {2016},
	Bdsk-Url-1 = {http://arxiv.org/abs/1601.02351}}

@inproceedings{RobertFeldtSimonPouldingDavidClark2016,
	Archiveprefix = {arXiv},
	Arxivid = {arXiv:1506.03482v1},
	Author = {Robert Feldt and Simon Poulding and David Clark and Shin Yoo},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	Eprint = {arXiv:1506.03482v1},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Robert Feldt, Simon Poulding, David Clark - 2016 - ICST - Test Set Diameter Quantifying the Diversity of Sets of Test Cases.pdf:pdf},
	Isbn = {9781509018277},
	Title = {{Test Set Diameter: Quantifying the Diversity of Sets of Test Cases}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.33}}

@inproceedings{Yu2016,
	Author = {Yu, Tingting and Wen, Wei and Han, Xue and Hayes, Jane Huffman},
	Booktitle = {ICST},
	Date-Modified = {2016-12-01 19:05:15 +0000},
	File = {:Users/rahul/Documents/Mendeley.Desktop/Yu et al. - 2016 - ICST - Predicting Testability of Concurrent Programs.pdf:pdf},
	Isbn = {9781509018277},
	Title = {{Predicting Testability of Concurrent Programs}},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICST.2016.39}}
